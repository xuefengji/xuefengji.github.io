(window.webpackJsonp=window.webpackJsonp||[]).push([[243],{1151:function(s,t,a){"use strict";a.r(t);var e=a(1),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"子查询语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#子查询语法"}},[s._v("#")]),s._v(" 子查询语法")]),s._v(" "),a("p",[s._v("在有些场景中，我们需要使用两条或多条查询语句，而恰好第二条查询语句的搜索条件其实是用到了第一条查询语句的查询结果。为了书写简便，我们可以把这两条语句合并到一条语句中，从而减少了把第一条查询语句的结果复制粘贴到第二条查询语句中的步骤")]),s._v(" "),a("p",[s._v("在书写上，只需要把第二条查询语句用小括号 "),a("code",[s._v("()")]),s._v(" 扩起来作为一个操作数放到第一条的搜索条件处，这样就起到了合并两条查询语句的作用")]),s._v(" "),a("p",[s._v("小括号中的查询语句也被称为"),a("strong",[s._v("子查询")]),s._v("或者"),a("strong",[s._v("内层查询")]),s._v("，使用内层查询的结果作为搜索条件的查询称为"),a("strong",[s._v("外层查询")]),s._v("。如果在一个查询语句中需要用到更多的表的话，那么在一个子查询中可以继续嵌套另一个子查询，在执行查询语句时，将按照"),a("strong",[s._v("从内到外")]),s._v("的顺序依次执行这些查询")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("小贴士")]),s._v(" "),a("p",[s._v("所有的子查询都必须用小括号扩起来，否则是非法的")])]),s._v(" "),a("h2",{attrs:{id:"标量子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#标量子查询"}},[s._v("#")]),s._v(" 标量子查询")]),s._v(" "),a("p",[s._v("如果子查询的结果只有一个值，这种子查询称之为"),a("strong",[s._v("标量子查询")]),s._v("。比如下面这个，子查询的结果是一个学号（"),a("code",[s._v("number")]),s._v("）：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" student_score "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" number "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" student_info "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'张星星'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("因为标量子查询单纯的代表一个值，所以它可以作为表达式的操作数来参与运算，它除了用在外层查询的搜索条件中以外，也可以被放到查询列表处，比如这样：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" number "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" student_info "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'张星星'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),s._v(" 学号"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("标量子查询单纯的代表一个值，由标量子查询作为的操作数组成的搜索条件只要符合表达语法就可以。比如来查询学号大于 "),a("code",[s._v('"张星星"')]),s._v(" 的学号的学生成绩，可以这么写：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" student_score "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" number "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" student_info "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'张星星'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"列子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#列子查询"}},[s._v("#")]),s._v(" 列子查询")]),s._v(" "),a("p",[s._v("如果子查询语句的结果集中并不是一个单独的值，而是一个列，该子查询也被称之为"),a("strong",[s._v("列子查询")])]),s._v(" "),a("p",[s._v("因为列子查询得到的结果是多个值，相当于一个列表。那么就可以使用 "),a("code",[s._v("IN")]),s._v(" 和 "),a("code",[s._v("NOT IN")]),s._v(" 操作符搭配子查询的结果组成表达式来作为外层查询的搜索条件的")]),s._v(" "),a("p",[s._v("就像这样一个场景：查询 "),a("code",[s._v('"计算机科学与工程"')]),s._v(" 专业的学生的成绩：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" student_score "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" number "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" student_info "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" major "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'计算机科学与工程'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h2",{attrs:{id:"行子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#行子查询"}},[s._v("#")]),s._v(" 行子查询")]),s._v(" "),a("p",[s._v("有列子查询，自然就有行子查询。只要子查询的结果集中最多只包含一条记录，而且这条记录中有超过一个列的数据（如果该条记录只包含一个列的话，该子查询就成了标量子查询），那么这个子查询就可以被称之为"),a("strong",[s._v("行子查询")])]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" student_score "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" subject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'高等数学'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" student_info "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("看上面这句查询语句，子查询的查询列表是 "),a("code",[s._v("number")]),s._v("（列名）, "),a("code",[s._v("'高等数学'")]),s._v("（常数），在子查询语句中加了 "),a("code",[s._v("LIMIT 1")]),s._v(" 这个子句，意味着子查询最多只能返回一条记录，所以该子查询就可以被看作一个行子查询")]),s._v(" "),a("p",[s._v("这句查询语句表达的语义就是：先获取到子查询的执行结果，然后再执行外层查询，如果 "),a("code",[s._v("student_score")]),s._v(" 中记录的 "),a("code",[s._v("number")]),s._v(" 等于子查询结果中的 "),a("code",[s._v("number")]),s._v(" 列并且 "),a("code",[s._v("subject")]),s._v(" 列等于子查询结果中的 "),a("code",[s._v("'高等数学'")]),s._v("，那么就将该记录加入到结果集")]),s._v(" "),a("p",[s._v("因为子查询执行后产生的结果集是一个行（包含 2 个列），所以外层查询里用作等值比较的另一个操作数也得是 2 个值，本例中就是 "),a("code",[s._v("(number, subject)")]),s._v("（并且必须用小括号 "),a("code",[s._v("()")]),s._v(" 扩住，否则会产生歧义）")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("小贴士")]),s._v(" "),a("p",[s._v("在想要得到标量子查询或者行子查询，但又不能保证子查询的结果集只有一条记录时，应该使用 "),a("code",[s._v("LIMIT 1")]),s._v(" 子句来限制记录数量")])]),s._v(" "),a("h2",{attrs:{id:"表子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表子查询"}},[s._v("#")]),s._v(" 表子查询")]),s._v(" "),a("p",[s._v("如果子查询结果集中包含多行多列，那么这个子查询也可以被称之为"),a("strong",[s._v("表子查询")]),s._v("，比如这样：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" student_score "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" subject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("IN")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'高等数学'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" student_info "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" major "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'计算机科学与工程'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("在这个例子中的子查询执行之后的结果集中包含多行多列，所以可以被看作是一个表子查询")]),s._v(" "),a("h2",{attrs:{id:"exists-和-not-exists-子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exists-和-not-exists-子查询"}},[s._v("#")]),s._v(" EXISTS 和 NOT EXISTS 子查询")]),s._v(" "),a("p",[s._v("有时候外层查询并不关心子查询中的结果是什么，而只关心子查询的结果集是不是为空集，这时可以用到下边这两个操作符：")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[s._v("操作符")]),s._v(" "),a("th",{staticStyle:{"text-align":"left"}},[s._v("示例")]),s._v(" "),a("th",{staticStyle:{"text-align":"left"}},[s._v("描述")])])]),s._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[s._v("EXISTS")])]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[s._v("EXISTS (SELECT ...)")])]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("当子查询结果集不是空集时表达式为真")])]),s._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("code",[s._v("NOT EXISTS")])]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[a("code",[s._v("NOT EXISTS (SELECT ...)")])]),s._v(" "),a("td",{staticStyle:{"text-align":"left"}},[s._v("当子查询结果集是空集时表达式为真")])])])]),s._v(" "),a("p",[s._v("举个例子：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("mysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" student_score "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXISTS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" student_info "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" number "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20200108")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nEmpty "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" sec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("其中子查询的意思是在 "),a("code",[s._v("student_info")]),s._v(" 表中查找学号为 "),a("code",[s._v("20200108")]),s._v(" 的学生信息，很显然并没有该学生，所以子查询的结果集是一个空集，于是 "),a("code",[s._v("EXISTS")]),s._v(" 表达式的结果为 "),a("code",[s._v("FALSE")]),s._v("，所以外层查询也就不查了，直接返回了一个 "),a("code",[s._v("Empty set")]),s._v("，表示没有结果")]),s._v(" "),a("p",[a("code",[s._v("NOT EXISTS")]),s._v(" 的用法同理")]),s._v(" "),a("h2",{attrs:{id:"不相关子查询和相关子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#不相关子查询和相关子查询"}},[s._v("#")]),s._v(" 不相关子查询和相关子查询")]),s._v(" "),a("p",[s._v("所谓"),a("strong",[s._v("不相关子查询")]),s._v("，就是子查询和外层查询都没有依赖关系，子查询可以独立运行并产生结果之后，再拿结果作为外层查询的条件去执行外层查询")]),s._v(" "),a("p",[s._v("而有时候我们需要在子查询的语句中引用到外层查询的值，这样的话子查询就不能当作一个独立的语句去执行，这种子查询被称为"),a("strong",[s._v("相关子查询")])]),s._v(" "),a("p",[s._v("比如说我们想查看一些学生的基本信息，但是前提是这些学生在 "),a("code",[s._v("student_score")]),s._v(" 表中有成绩记录，那可以这么写：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("mysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" id_number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" major "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" student_info "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("EXISTS")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" student_score "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" student_score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("number "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" student_info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----------+-----------+--------------------+--------------------------+")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" number   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" name      "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" id_number          "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" major                    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----------+-----------+--------------------+--------------------------+")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20220101")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 张星星    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("158177199901044792")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 计算机科学与工程         "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20220102")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 王二狗    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("151008199801178529")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 计算机科学与工程         "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20220103")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 陈珊珊    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("17156319980116959")]),s._v("X "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 软件工程                 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20220104")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 李思思    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("141992199701078600")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 软件工程                 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----------+-----------+--------------------+--------------------------+")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rows")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" sec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("小贴士")]),s._v(" "),a("p",[a("code",[s._v("student_info")]),s._v(" 和 "),a("code",[s._v("student_score")]),s._v(" 表里都有 "),a("code",[s._v("number")]),s._v(" 列，所以在子查询的 "),a("code",[s._v("WHERE")]),s._v(" 语句中书写 "),a("code",[s._v("number = number")]),s._v(" 会造成二义性，也就是让服务器懵逼，不知道这个 "),a("code",[s._v("number")]),s._v(" 列到底是哪个表的。为了区分，在列名前边加上了表名，并用点 "),a("code",[s._v(".")]),s._v(" 连接起来，这种显式的将列所属的表名书写出来的名称称为该列的全限定名")]),s._v(" "),a("p",[s._v("上边子查询的 "),a("code",[s._v("WHERE")]),s._v(" 语句中用了列的全限定名："),a("code",[s._v("student_score.number = student_info.number")])])]),s._v(" "),a("p",[s._v("这条查询语句可以分成这么两部分来理解：")]),s._v(" "),a("ul",[a("li",[s._v("我们要查询学生的一些基本信息")]),s._v(" "),a("li",[s._v("这些学生必须符合这样的条件："),a("code",[s._v("必须有成绩记录保存在 student_score 表中")])])]),s._v(" "),a("p",[s._v("所以这个例子中的"),a("strong",[s._v("相关子查询")]),s._v("的查询过程是这样的：")]),s._v(" "),a("ul",[a("li",[s._v("先执行外层查询获得到 "),a("code",[s._v("student_info")]),s._v(" 表的第一条记录，发现它的 "),a("code",[s._v("number")]),s._v(" 值是 "),a("code",[s._v("20220101")]),s._v("。把 "),a("code",[s._v("20220101")]),s._v(" 当作参数传入到子查询，此时子查询的意思是判断 "),a("code",[s._v("student_score")]),s._v(" 表的 "),a("code",[s._v("number")]),s._v(" 字段是否有 "),a("code",[s._v("20220101")]),s._v(" 这个值存在，子查询的结果是该值存在，所以整个 "),a("code",[s._v("EXISTS")]),s._v(" 表达式的值为 "),a("code",[s._v("TRUE")]),s._v("，那么 "),a("code",[s._v("student_info")]),s._v(" 表的第一条记录可以被加入到结果集")]),s._v(" "),a("li",[s._v("再执行外层查询获得到 "),a("code",[s._v("student_info")]),s._v(" 表的第二条记录，发现它的 "),a("code",[s._v("number")]),s._v(" 值是 "),a("code",[s._v("20220102")]),s._v("，与上面的步骤相同，"),a("code",[s._v("student_info")]),s._v(" 表的第二条记录也可以被加入到结果集")]),s._v(" "),a("li",[s._v("与上面类似，"),a("code",[s._v("student_info")]),s._v(" 表的第三条记录也可以被加入到结果集")]),s._v(" "),a("li",[s._v("与上面类似，"),a("code",[s._v("student_info")]),s._v(" 表的第四条记录也可以被加入到结果集")]),s._v(" "),a("li",[s._v("再执行外层查询获得到 "),a("code",[s._v("student_info")]),s._v(" 表的第五条记录，发现它的 "),a("code",[s._v("number")]),s._v(" 值是 "),a("code",[s._v("20220105")]),s._v("，把 "),a("code",[s._v("20220105")]),s._v(" 当作参数传入到它的子查询，此时子查询的意思是判断 "),a("code",[s._v("student_score")]),s._v(" 表的 "),a("code",[s._v("number")]),s._v(" 字段是否有 "),a("code",[s._v("20220105")]),s._v(" 这个值存在，子查询的结果是该值不存在，所以整个 "),a("code",[s._v("EXISTS")]),s._v(" 表达式的值为 "),a("code",[s._v("FALSE")]),s._v("，那么 "),a("code",[s._v("student_info")]),s._v(" 表的第五条记录就不被加入结果集中")]),s._v(" "),a("li",[s._v("与上一步骤类似，"),a("code",[s._v("student_info")]),s._v(" 表的第六条记录也不被加入结果集中")]),s._v(" "),a("li",[a("code",[s._v("student_info")]),s._v(" 表没有更多的记录了，结束查询")])]),s._v(" "),a("p",[s._v("所以最后的查询结果是上面展示的 4 条记录")]),s._v(" "),a("h2",{attrs:{id:"对同一个表的子查询"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对同一个表的子查询"}},[s._v("#")]),s._v(" 对同一个表的子查询")]),s._v(" "),a("p",[s._v("不只是在涉及多个表查询的时候会用到子查询，在只涉及单个表的查询中有时也会用到子查询")]),s._v(" "),a("p",[s._v("比如我们想看看在 "),a("code",[s._v("student_score")]),s._v(" 表的 "),a("code",[s._v("'高等数学'")]),s._v(" 这门课的成绩中，有哪些超过了平均分的记录，根据字面意思第一反应是这么写：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("mysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" student_score "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" subject "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'高等数学'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" score "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("AVG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nERROR "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1111")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("HY000"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(": Invalid "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("use")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("of")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("group")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v("\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("很抱歉，报错了。为啥呢？因为聚集函数是用来对分组做数据统计的（如果没有 "),a("code",[s._v("GROUP BY")]),s._v(" 语句那么意味着只有一个分组），而 "),a("code",[s._v("WHERE")]),s._v(" 子句是以记录为单位来执行过滤操作的，在 "),a("code",[s._v("WHERE")]),s._v(" 子句执行完成之后才会得到分组，也就是说："),a("strong",[s._v("聚集函数不能放到 "),a("code",[s._v("WHERE")]),s._v(" 子句中")])]),s._v(" "),a("p",[s._v("如果想实现上面的需求，就需要搞一个 "),a("code",[s._v("student_score")]),s._v(" 表的副本，就相当于有了两个 "),a("code",[s._v("student_score")]),s._v(" 表，在一个表上使用聚集函数统计，统计完了之后拿着统计结果再到另一个表中进行过滤，这个过程可以这么写：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("mysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" student_score "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" subject "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'高等数学'")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" score "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("AVG")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" student_score "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" subject "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'高等数学'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----------+--------------+-------+")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" number   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" subject      "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" score "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----------+--------------+-------+")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20220101")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 高等数学     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("78")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20220102")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 高等数学     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----------+--------------+-------+")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rows")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" sec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("我们使用子查询先统计出了 "),a("code",[s._v("'高等数学'")]),s._v(" 这门课的平均分，然后再到外层查询中使用这个平均分组成的表达式来作为搜索条件去查找大于平均分的记录")]),s._v(" "),a("p",[s._v("（完）")])])}),[],!1,null,null,null);t.default=r.exports}}]);