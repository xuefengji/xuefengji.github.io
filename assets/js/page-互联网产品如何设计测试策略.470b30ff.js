(window.webpackJsonp=window.webpackJsonp||[]).push([[209],{1293:function(v,_,t){"use strict";t.r(_);var s=t(1),a=Object(s.a)({},(function(){var v=this,_=v.$createElement,s=v._self._c||_;return s("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[s("h1",{attrs:{id:"互联网产品如何设计测试策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#互联网产品如何设计测试策略"}},[v._v("#")]),v._v(" 互联网产品如何设计测试策略")]),v._v(" "),s("h2",{attrs:{id:"互联网产品"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#互联网产品"}},[v._v("#")]),v._v(" 互联网产品")]),v._v(" "),s("p",[s("strong",[v._v("特点")]),v._v("：快")]),v._v(" "),s("ul",[s("li",[v._v("互联网产品的上线周期通常是以「天」甚至是以「小时」为单位。")]),v._v(" "),s("li",[v._v("发布流程通常包含了代码静态扫描、单元测试、编译、打包、上传、下载、部署和测试的全流程。")])]),v._v(" "),s("p",[s("strong",[v._v("通常情况下，互联网产品要求全回归测试的执行时间不能超过 4 小时")]),v._v("。")]),v._v(" "),s("p",[v._v("如何在保证测试质量和测试覆盖率的前提下，有效缩短测试执行时间就是本文的主题。")]),v._v(" "),s("h2",{attrs:{id:"传统软件产品的测试策略设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#传统软件产品的测试策略设计"}},[v._v("#")]),v._v(" 传统软件产品的测试策略设计")]),v._v(" "),s("p",[s("strong",[v._v("常用的模型")]),v._v("：金字塔模型")]),v._v(" "),s("p",[s("img",{attrs:{src:t(733),alt:"传统测试策略"}})]),v._v(" "),s("h3",{attrs:{id:"单元测试-重要"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单元测试-重要"}},[v._v("#")]),v._v(" 单元测试（重要）")]),v._v(" "),s("ul",[s("li",[v._v("处于金字塔最底部，属于白盒测试范畴，通常由开发工程师完成")]),v._v(" "),s("li",[v._v("能尽早发现缺陷，降低修复成本")]),v._v(" "),s("li",[v._v("传统软件产品，生命周期都比较长，通常会有多个版本持续发布，为了在后期的版本升级过程中能够尽早发现并快速定位问题，每次 build 过程中都会多次反复执行单元测试")])]),v._v(" "),s("h3",{attrs:{id:"api-测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#api-测试"}},[v._v("#")]),v._v(" API 测试")]),v._v(" "),s("p",[v._v("处于金字塔中间，"),s("strong",[v._v("主要针对的是各模块暴露的接口，通常采用灰盒测试方法")])]),v._v(" "),s("p",[s("strong",[v._v("灰盒测试")]),v._v("：")]),v._v(" "),s("p",[v._v("概述：介于"),s("strong",[v._v("白盒")]),v._v("和"),s("strong",[v._v("黑盒")]),v._v("之间的一种测试技术")]),v._v(" "),s("p",[v._v("核心思想：利用测试执行的代码覆盖率来指导测试用例的设计")]),v._v(" "),s("p",[v._v("例如 API 接口测试 ：")]),v._v(" "),s("ul",[s("li",[v._v("以黑盒方式设计如何调用 API 的测试用例")]),v._v(" "),s("li",[v._v("测试执行过程中统计代码覆盖率，然后根据代码覆盖率情况来补充更多、更有针对性的测试用例")])]),v._v(" "),s("h3",{attrs:{id:"gui-测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gui-测试"}},[v._v("#")]),v._v(" GUI 测试")]),v._v(" "),s("p",[v._v("处于金字塔最上层，模拟用户在软件界面上的各种操作，并验证这些操作对应的结果是否正确")]),v._v(" "),s("p",[s("strong",[v._v("优点")]),v._v("：能够实际模拟真实用户的行为，直接验证软件的商业价值")]),v._v(" "),s("p",[s("strong",[v._v("缺点")]),v._v("：")]),v._v(" "),s("ul",[s("li",[v._v("执行的代价比较大，就算是采用 GUI 自动化测试技术，用例的维护和执行代价依然很大")]),v._v(" "),s("li",[v._v("GUI 测试的稳定性问题，是长期以来阻碍 GUI 测试发展的重要原因")])]),v._v(" "),s("h2",{attrs:{id:"互联网产品的测试策略设计"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#互联网产品的测试策略设计"}},[v._v("#")]),v._v(" 互联网产品的测试策略设计")]),v._v(" "),s("h3",{attrs:{id:"gui-测试-轻量级测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#gui-测试-轻量级测试"}},[v._v("#")]),v._v(" GUI 测试（轻量级测试）")]),v._v(" "),s("p",[s("strong",[v._v("互联网产品迭代周期对 GUI 测试的影响")]),v._v("：")]),v._v(" "),s("ul",[s("li",[v._v("给开发 GUI 自动化测试用例的时间非常有限")]),v._v(" "),s("li",[v._v("客户端界面的频繁变化 , 导致 GUI 自动化测试的效率会非常低")]),v._v(" "),s("li",[v._v("GUI 测试是轻量级的, 不允许去执行大量的用例")])]),v._v(" "),s("p",[s("strong",[v._v("测试策略")]),v._v("：以"),s("strong",[v._v("手工为主，自动化为辅")])]),v._v(" "),s("ul",[s("li",[v._v("手工测试：利用探索性测试思想，针对新开发或者新修改的界面功能进行测试")]),v._v(" "),s("li",[v._v("自动化：主要放在相对稳定且核心业务的基本功能验证, "),s("strong",[v._v("只覆盖最核心且直接影响主营业务流程的 E2E 场景")])])]),v._v(" "),s("h3",{attrs:{id:"api-测试-重点测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#api-测试-重点测试"}},[v._v("#")]),v._v(" API 测试（重点测试）")]),v._v(" "),s("p",[v._v("菱形的测试策略 ："),s("strong",[v._v("重量级 API 测试，轻量级 GUI 测试，轻量级单元测试")])]),v._v(" "),s("p",[s("img",{attrs:{src:t(734),alt:"菱形测试策略"}})]),v._v(" "),s("p",[s("strong",[v._v("重量级 API 测试原因")]),v._v("："),s("strong",[v._v("API 测试可以实现良好的投入产出比")])]),v._v(" "),s("ul",[s("li",[v._v("API 测试用例的开发与调试效率比 GUI 测试要高得多, 而且测试用例的代码实现比较规范")]),v._v(" "),s("li",[v._v("API 测试用例的执行稳定性远远高于 GUI 测试")]),v._v(" "),s("li",[v._v("单个 API 测试用例的执行时间往往要比 GUI 测试短很多")]),v._v(" "),s("li",[v._v("很多互联网产品采用了微服务架构，而对微服务的测试，本质上就是对不同的 Web Service 的测试，也就是 API 测试")]),v._v(" "),s("li",[v._v("API 接口的改动一般比较少，在调用方式没有改变的情况下，测试用例不需要做大的改动，用例的可重用性很高, 可以保证较高的投入产出比")])]),v._v(" "),s("h3",{attrs:{id:"单元测试-轻量级测试"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单元测试-轻量级测试"}},[v._v("#")]),v._v(" 单元测试（轻量级测试）")]),v._v(" "),s("p",[s("strong",[v._v("轻量级原因")]),v._v("：互联网产品的"),s("strong",[v._v("快")])]),v._v(" "),s("ul",[s("li",[v._v("快速实现功能"),s("br"),v._v("\n互联网产品追求的是最快速的功能实现并上线，基本不会有时间去做全面的单元测试")]),v._v(" "),s("li",[v._v("快速寻求用户反馈")]),v._v(" "),s("li",[v._v("快速试错")]),v._v(" "),s("li",[v._v("快速迭代更新")])]),v._v(" "),s("p",[v._v("频繁的迭代会让单元测试处于不断重写的状态。")]),v._v(" "),s("p",[s("strong",[v._v("采用「分而治之」测试策略思想")]),v._v("：")]),v._v(" "),s("p",[v._v("全面单元测试只会应用在那些"),s("strong",[v._v("相对稳定和最核心的模块和服务")]),v._v("上，而应用层或者上层业务服务很少会大规模开展单元测试。")]),v._v(" "),s("ul",[s("li",[v._v("后端基础服务和一些公共应用服务相对稳定，对于系统全局来说是「牵一发而动全身」，所以后端服务很有必要开展全面的单元测试。")]),v._v(" "),s("li",[v._v("对于一些核心算法和关键应用，比如银行网关接口，第三方支付集成接口等，也要做比较全面的单元测试。")])]),v._v(" "),s("p",[v._v("（完）")])])}),[],!1,null,null,null);_.default=a.exports},733:function(v,_,t){v.exports=t.p+"assets/img/传统测试策略.7c1f6339.jpg"},734:function(v,_,t){v.exports=t.p+"assets/img/菱形测试策略.a56dc7f1.jpg"}}]);