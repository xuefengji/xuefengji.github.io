(window.webpackJsonp=window.webpackJsonp||[]).push([[343],{1302:function(t,v,_){"use strict";_.r(v);var a=_(1),s=Object(a.a)({},(function(){var t=this,v=t.$createElement,a=t._self._c||v;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨域"}},[t._v("#")]),t._v(" 跨域")]),t._v(" "),a("h2",{attrs:{id:"什么是跨域问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是跨域问题"}},[t._v("#")]),t._v(" 什么是跨域问题")]),t._v(" "),a("p",[t._v("前端调用的后端接口不属于同一个域（域名或端口不同），就会产生跨域问题，也就是说你的应用访问了该应用域名或端口之外的域名或端口")]),t._v(" "),a("p",[a("img",{attrs:{src:_(742),alt:"ky"}})]),t._v(" "),a("h3",{attrs:{id:"为什么会出现跨域"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么会出现跨域"}},[t._v("#")]),t._v(" 为什么会出现跨域")]),t._v(" "),a("p",[t._v("受浏览器的"),a("strong",[t._v("同源策略")]),t._v("的限制")]),t._v(" "),a("h2",{attrs:{id:"同源策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同源策略"}},[t._v("#")]),t._v(" 同源策略")]),t._v(" "),a("h3",{attrs:{id:"为什么要有同源策略"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么要有同源策略"}},[t._v("#")]),t._v(" 为什么要有同源策略")]),t._v(" "),a("p",[t._v("同源策略是页面中的一种安全策略")]),t._v(" "),a("p",[a("strong",[t._v("举个没有安全策略的例子")]),t._v("：")]),t._v(" "),a("p",[t._v("比如你打开一个银行站点，又不小心打开了一个恶意站点，在没有任何安全措施的情况下，恶意站点可以做很多事情：")]),t._v(" "),a("ul",[a("li",[t._v("修改银行站点的 DOM、CSSOM 等信息")]),t._v(" "),a("li",[t._v("在银行站点内部插入 JavaScript 脚本")]),t._v(" "),a("li",[t._v("劫持用户登录的用户名和密码")]),t._v(" "),a("li",[t._v("读取银行站点的 Cookie、IndexDB 等数据")]),t._v(" "),a("li",[t._v("甚至还可以将这些信息上传至自己的服务器，这样就可以在你不知情的情况下伪造一些转账请求等信息")])]),t._v(" "),a("p",[a("strong",[t._v("总结")]),t._v("：同源策略会隔离不同源的 DOM、页面数据和网络通信，进而实现 Web 页面的安全性")]),t._v(" "),a("h3",{attrs:{id:"什么是同源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是同源"}},[t._v("#")]),t._v(" 什么是同源")]),t._v(" "),a("p",[t._v("如果两个 URL 的协议、域名和端口都相同，这两个 URL 就是同源，如：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("当前页面 URL")]),t._v(" "),a("th",[t._v("被请求页面 URL")]),t._v(" "),a("th",[t._v("是否同源")]),t._v(" "),a("th",[t._v("原因")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("http://www.test.com/")]),t._v(" "),a("td",[t._v("http://www.test.com/index.html")]),t._v(" "),a("td",[t._v("是")]),t._v(" "),a("td",[t._v("协议、域名、端口号相同")])]),t._v(" "),a("tr",[a("td",[t._v("http://www.test.com/")]),t._v(" "),a("td",[t._v("https://www.test.com/index.html")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("协议不同（http/https）")])]),t._v(" "),a("tr",[a("td",[t._v("http://www.test.com/")]),t._v(" "),a("td",[t._v("http://www.baidu.com/")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("主域名不同（test/baidu）")])]),t._v(" "),a("tr",[a("td",[t._v("http://www.test.com/")]),t._v(" "),a("td",[t._v("http://blog.test.com/")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("子域名不同（www/blog）")])]),t._v(" "),a("tr",[a("td",[t._v("http://www.test.com:8080/")]),t._v(" "),a("td",[t._v("http://www.test.com:7001/")]),t._v(" "),a("td",[t._v("否")]),t._v(" "),a("td",[t._v("端口号不同（8080/7001）")])])])]),t._v(" "),a("h3",{attrs:{id:"同源策略-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同源策略-2"}},[t._v("#")]),t._v(" 同源策略")]),t._v(" "),a("p",[t._v("定义：")]),t._v(" "),a("ul",[a("li",[t._v("浏览器默认两个相同的源之间是可以相互访问资源和操作 DOM 的")]),t._v(" "),a("li",[t._v("两个不同的源之间若想要相互访问资源或者操作 DOM，有一套基础的安全策略的制约，称为同源策略")])]),t._v(" "),a("h4",{attrs:{id:"同源策略主要表现在-dom、web-数据和网络这三个层面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#同源策略主要表现在-dom、web-数据和网络这三个层面"}},[t._v("#")]),t._v(" 同源策略主要表现在 DOM、Web 数据和网络这三个层面")]),t._v(" "),a("h5",{attrs:{id:"dom-层面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#dom-层面"}},[t._v("#")]),t._v(" DOM 层面")]),t._v(" "),a("p",[t._v("同源策略限制了来自不同源的 JavaScript 脚本对当前 DOM 对象读和写的操作")]),t._v(" "),a("p",[t._v("例子：")]),t._v(" "),a("p",[t._v("打开某网的官网，并打开一个专栏：")]),t._v(" "),a("p",[a("img",{attrs:{src:_(743),alt:"dom1"}})]),t._v(" "),a("p",[t._v("由于页面是同源关系，可以在第二个页面操作第一个页面的 DOM ：")]),t._v(" "),a("p",[a("img",{attrs:{src:_(744),alt:"dom2"}})]),t._v(" "),a("p",[t._v("如果打开的第二个页面和第一个页面不是同源关系，那就无法操作：")]),t._v(" "),a("p",[a("img",{attrs:{src:_(745),alt:"dom3"}})]),t._v(" "),a("h5",{attrs:{id:"数据层面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#数据层面"}},[t._v("#")]),t._v(" 数据层面")]),t._v(" "),a("ul",[a("li",[t._v("源策略限制了不同源的站点读取当前站点的 Cookie、IndexDB、LocalStorage 等数据")]),t._v(" "),a("li",[t._v("由于同源策略，无法通过第二个页面的 opener 来访问第一个页面中的 Cookie、IndexDB 或者 LocalStorage 等内容")])]),t._v(" "),a("h5",{attrs:{id:"网络层面"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络层面"}},[t._v("#")]),t._v(" 网络层面")]),t._v(" "),a("p",[t._v("同源策略限制了通过 XMLHttpRequest 等方式将站点的数据发送给不同源的站点")]),t._v(" "),a("h2",{attrs:{id:"跨域问题解决方案"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨域问题解决方案"}},[t._v("#")]),t._v(" 跨域问题解决方案")]),t._v(" "),a("h3",{attrs:{id:"设置-document-domain-解决无法读取非同源网页的-cookie-问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#设置-document-domain-解决无法读取非同源网页的-cookie-问题"}},[t._v("#")]),t._v(" 设置 document.domain 解决无法读取非同源网页的 Cookie 问题")]),t._v(" "),a("ul",[a("li",[t._v("浏览器是通过 document.domain 属性来检查两个页面是否同源，只要通过设置相同的 document.domain，两个页面就可以共享 Cookie")]),t._v(" "),a("li",[t._v("此方案仅限主域相同，子域不同的跨域应用场景")])]),t._v(" "),a("h3",{attrs:{id:"跨文档通信-api-window-postmessage"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#跨文档通信-api-window-postmessage"}},[t._v("#")]),t._v(" 跨文档通信 API：window.postMessage()")]),t._v(" "),a("ul",[a("li",[t._v("页面和其打开的新窗口的数据传递")]),t._v(" "),a("li",[t._v("多窗口之间消息传递")]),t._v(" "),a("li",[t._v("页面与嵌套的iframe消息传递")]),t._v(" "),a("li",[t._v("上面三个场景的跨域数据传递")])]),t._v(" "),a("h3",{attrs:{id:"jsonp"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jsonp"}},[t._v("#")]),t._v(" JSONP")]),t._v(" "),a("p",[t._v("是服务器与客户端跨源通信的常用方法")]),t._v(" "),a("p",[t._v("优点：简单适用，兼容性好（兼容低版本 IE）")]),t._v(" "),a("p",[t._v("缺点：是只支持 Get 请求，不支持 Post 请求")]),t._v(" "),a("p",[t._v("核心思想：网页通过添加一个"),a("code",[t._v("元素")]),t._v("，向服务器请求 JSON 数据，服务器收到请求后，将数据放在一个指定名字的回调函数的参数位置传回来")]),t._v(" "),a("h3",{attrs:{id:"cors"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cors"}},[t._v("#")]),t._v(" CORS")]),t._v(" "),a("p",[t._v("是跨域资源分享（Cross-Origin Resource Sharing）的缩写")]),t._v(" "),a("ul",[a("li",[t._v("普通跨域请求：只需服务器端设置 Access-Control-Allow-Origin")]),t._v(" "),a("li",[t._v("带 Cookie 跨域请求：前后端都需要进行设置")]),t._v(" "),a("li",[t._v("webpack 本地代理")])]),t._v(" "),a("p",[t._v("在 "),a("code",[t._v("webpack.config.js")]),t._v(" 中利用 WebpackDevServer 配置本地代理")]),t._v(" "),a("p",[a("img",{attrs:{src:_(746),alt:"web"}})]),t._v(" "),a("h3",{attrs:{id:"websocket"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#websocket"}},[t._v("#")]),t._v(" Websocket")]),t._v(" "),a("ul",[a("li",[t._v("WebSocket 和 HTTP 都是应用层协议，都基于 TCP 协议")]),t._v(" "),a("li",[t._v("WebSocket 是一种双向通信协议，在建立连接之后，WebSocket 的服务器与客户端都能主动向对方发送或接收数据")]),t._v(" "),a("li",[t._v("WebSocket 在建立连接时需要借助 HTTP 协议，连接建立好了之后 client 与 server 之间的双向通信就与 HTTP 无关了")])]),t._v(" "),a("h3",{attrs:{id:"nginx反向代理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx反向代理"}},[t._v("#")]),t._v(" Nginx反向代理")]),t._v(" "),a("p",[t._v("使用 Nginx 反向代理实现跨域，是最简单的跨域方式")]),t._v(" "),a("p",[t._v("配置 Nginx，在一个服务器上配置多个前缀来转发 http/https 请求到多个真实的服务器")]),t._v(" "),a("p",[t._v("（完）")])])}),[],!1,null,null,null);v.default=s.exports},742:function(t,v,_){t.exports=_.p+"assets/img/ky.615910ef.png"},743:function(t,v,_){t.exports=_.p+"assets/img/dom1.b317392a.png"},744:function(t,v,_){t.exports=_.p+"assets/img/dom2.a42e6e5c.png"},745:function(t,v,_){t.exports=_.p+"assets/img/dom3.764031c7.png"},746:function(t,v,_){t.exports=_.p+"assets/img/webpack.7adadf00.png"}}]);