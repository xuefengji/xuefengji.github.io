(window.webpackJsonp=window.webpackJsonp||[]).push([[65],{487:function(s,t,a){"use strict";a.r(t);var n=a(1),r=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"复杂度分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复杂度分析"}},[s._v("#")]),s._v(" 复杂度分析")]),s._v(" "),a("h2",{attrs:{id:"复杂度是什么"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复杂度是什么"}},[s._v("#")]),s._v(" 复杂度是什么")]),s._v(" "),a("p",[s._v("数据结构和算法解决的是如何让代码运行得更快，如何让代码更省存储空间。")]),s._v(" "),a("p",[s._v("因此需从执行时间和占用空间两个维度来评估数据结构和算法的性能，这两个维度的性能指标分别用"),a("strong",[s._v("时间复杂度")]),s._v("和"),a("strong",[s._v("空间复杂度")]),s._v("两个概念来描述，二者统称为"),a("strong",[s._v("复杂度")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"复杂度表示法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#复杂度表示法"}},[s._v("#")]),s._v(" 复杂度表示法")]),s._v(" "),a("p",[s._v("复杂度描述的是算法执行时间（或占用空间）与数据规模的增长关系，通常采用大 O 表示法。")]),s._v(" "),a("h2",{attrs:{id:"时间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度"}},[s._v("#")]),s._v(" 时间复杂度")]),s._v(" "),a("p",[s._v("算法的执行效率，粗略地讲，就是算法代码执行的时间。由于我们只是粗略估算，所以可以假定每行代码的执行时间都是一样的，表示一个单位时间："),a("code",[s._v("unit_time")]),s._v("。")]),s._v(" "),a("p",[s._v("例如下面这段伪代码，作用是求 "),a("code",[s._v("1, 2, 3 ... n")]),s._v(" 的累加和：")]),s._v(" "),a("div",{staticClass:"language-C line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("            "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// unit_time")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("              "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// unit_time")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// n * unit_time")]),s._v("\n    sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("        "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// n * unit_time")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" sum"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("第 2、3 行代码分别需要 1 个 "),a("code",[s._v("unit_time")]),s._v(" 的执行时间，第 4、5 行都运行了 n 遍，所以需要 "),a("code",[s._v("2n * unit_time")]),s._v(" 的执行时间。")]),s._v(" "),a("p",[s._v("这段代码总的执行时间就是 "),a("code",[s._v("(2n + 2) * unit_time")]),s._v("。可以看出来，"),a("strong",[s._v("所有代码的执行时间 T(n) 与每行代码的执行次数 f(n) 成正比")]),s._v("。")]),s._v(" "),a("div",{staticClass:"language-C line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("T")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("O")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("其中，T(n) 表示代码执行的时间；n 表示数据规模的大小；f(n) 表示每行代码执行的次数总和。公式中的 O，表示代码的执行时间 T(n) 与 f(n) 表达式成正比。")]),s._v(" "),a("p",[s._v("所以，上面的伪代码示例中 "),a("code",[s._v("T(n) = O(2n + 2)")]),s._v("，这就是"),a("strong",[s._v("大 O 时间复杂度表示法")]),s._v("。大 O 时间复杂度实际上并不具体表示代码真正的执行时间，而是表示"),a("strong",[s._v("代码执行时间随数据规模增长的变化趋势")]),s._v("，所以，也叫作"),a("strong",[s._v("渐进时间复杂度")]),s._v("，简称"),a("strong",[s._v("时间复杂度")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"时间复杂度分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度分析"}},[s._v("#")]),s._v(" 时间复杂度分析")]),s._v(" "),a("p",[s._v("有三个比较实用的方法可以用来分析一段代码的时间复杂度。")]),s._v(" "),a("h3",{attrs:{id:"_1-只关注循环执行次数最多的一段代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-只关注循环执行次数最多的一段代码"}},[s._v("#")]),s._v(" 1）只关注循环执行次数最多的一段代码")]),s._v(" "),a("p",[s._v("当有嵌套循环的时候，例如：")]),s._v(" "),a("div",{staticClass:"language-C line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("             "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// unit_time")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("               "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// unit_time")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("               "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// unit_time")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// n * unit_time")]),s._v("\n    j "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("                 "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// n * unit_time")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// n^2 * unit_time")]),s._v("\n      sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sum "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("  i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// n^2 * unit_time")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("上述伪代码的执行时间可以表示为："),a("code",[s._v("T(n) = (2n"),a("sup",[s._v("2")]),s._v(" + 2n + 3) * unit_time")]),s._v("。前面说过，大 O 这种复杂度表示方法只是表示一种变化趋势，当 n 很大时，公式中的低阶、常量、系数三部分并不左右增长趋势，都可以忽略。我们只需要记录一个最大阶的量级就可以了，上述伪代码的时间复杂度可以表示为："),a("code",[s._v("T(n) = O(n"),a("sup",[s._v("2")]),s._v(")")]),s._v("。")]),s._v(" "),a("p",[s._v("所以，"),a("strong",[s._v("我们在分析一个算法、一段代码的时间复杂度的时候，只关注循环执行次数最多的那一段代码就可以了")]),s._v("。这段核心代码执行次数的 n 的量级，就是整段要分析代码的时间复杂度。")]),s._v(" "),a("h3",{attrs:{id:"_2-加法法则-总复杂度等于量级最大的那段代码的复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-加法法则-总复杂度等于量级最大的那段代码的复杂度"}},[s._v("#")]),s._v(" 2）加法法则：总复杂度等于量级最大的那段代码的复杂度")]),s._v(" "),a("p",[s._v("如果一段代码由多个代码块组成，例如下述伪代码：")]),s._v(" "),a("div",{staticClass:"language-C line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sum_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" p "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    sum_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sum_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" p"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sum_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" q "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" q "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    sum_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sum_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sum_3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    j "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      sum_3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sum_3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("  i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n \n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" sum_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" sum_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" sum_3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("p",[s._v("这个代码分为三部分，分别是求 sum_1、sum_2、sum_3。我们可以分别分析每一部分的时间复杂度，然后把它们放到一块儿，再取一个量级最大（项的次数最高）的作为整段代码的复杂度：")]),s._v(" "),a("ul",[a("li",[s._v("第一段代码循环执行了 100 次，是一个常量的执行时间，跟 n 的规模无关，时间复杂度可以忽略。")]),s._v(" "),a("li",[s._v("第二段代码循环了 n 次，时间复杂度是 "),a("code",[s._v("O(n)")]),s._v("。")]),s._v(" "),a("li",[s._v("第三段代码嵌套循环，内外层都循环了 n 次，时间复杂度是 "),a("code",[s._v("O(n"),a("sup",[s._v("2")]),s._v(")")]),s._v("。")]),s._v(" "),a("li",[s._v("综合这三段代码的时间复杂度，我们取其中最大的量级，整段代码的时间复杂度就为 "),a("code",[s._v("O(n"),a("sup",[s._v("2")]),s._v(")")]),s._v("。")])]),s._v(" "),a("p",[a("strong",[s._v("总的时间复杂度就等于量级最大的那段代码的时间复杂度")]),s._v("，抽象成公式就是：")]),s._v(" "),a("p",[s._v("如果 "),a("code",[s._v("T1(n) = O(f(n))")]),s._v("，"),a("code",[s._v("T2(n) = O(g(n))")]),s._v("，那么 "),a("code",[s._v("T(n) = T1(n) + T2(n) = max(O(f(n)), O(g(n))) = O(max(f(n), g(n)))")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"_3-乘法法则-嵌套代码的复杂度等于嵌套内外代码复杂度的乘积"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-乘法法则-嵌套代码的复杂度等于嵌套内外代码复杂度的乘积"}},[s._v("#")]),s._v(" 3）乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积")]),s._v(" "),a("p",[s._v("类比加法法则，乘法法则的公式就是：")]),s._v(" "),a("p",[s._v("如果 "),a("code",[s._v("T1(n) = O(f(n))")]),s._v("，"),a("code",[s._v("T2(n) = O(g(n))")]),s._v("，那么 "),a("code",[s._v("T(n) = T1(n) * T2(n) = O(f(n)) * O(g(n)) = O(f(n)*g(n))")]),s._v("。")]),s._v(" "),a("p",[s._v("假设 "),a("code",[s._v("T1(n) = O(n)")]),s._v("，"),a("code",[s._v("T2(n) = O(n"),a("sup",[s._v("2")]),s._v(")")]),s._v("，则 "),a("code",[s._v("T1(n) * T2(n) = O(n"),a("sup",[s._v("3")]),s._v(")")]),s._v("。")]),s._v(" "),a("p",[s._v("落实到具体的代码上，乘法法则就是运用于"),a("strong",[s._v("嵌套函数/嵌套循环")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"时间复杂度实例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#时间复杂度实例"}},[s._v("#")]),s._v(" 时间复杂度实例")]),s._v(" "),a("h3",{attrs:{id:"_1-o-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-o-1"}},[s._v("#")]),s._v(" 1）O(1)")]),s._v(" "),a("p",[a("code",[s._v("O(1)")]),s._v(" 是常量级时间复杂度的一种表示方法，并不是指只执行了一行代码。比如一段代码有 3 行，它的时间复杂度也是 "),a("code",[s._v("O(1)")]),s._v("，而不是 "),a("code",[s._v("O(3)")]),s._v("。")]),s._v(" "),a("p",[s._v("只要代码的执行时间不随 n 的增大而增长，那么时间复杂度都记作 "),a("code",[s._v("O(1)")]),s._v("。一般情况下，只要算法中不存在循环语句（指未明确指定循环次数的情况）、递归语句，即使有成千上万行的代码，其时间复杂度也是 "),a("code",[s._v("Ο(1)")]),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"_2-o-logn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-o-logn"}},[s._v("#")]),s._v(" 2）O(logn)")]),s._v(" "),a("p",[s._v("对数阶时间复杂度非常常见，同时也是最难分析的一种时间复杂度。看下面的一个例子：")]),s._v(" "),a("div",{staticClass:"language-C line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[s._v("i"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("while")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<=")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("根据前面讲的复杂度分析方法，第 3 行代码是循环执行次数最多的。所以，只要计算出这行代码被执行了多少次，就能知道整段代码的时间复杂度。")]),s._v(" "),a("p",[s._v("从代码中可以看出，变量 i 的值从 1 开始取，每循环一次就乘以 2。当大于 n 时，循环结束。变量 i 的取值就像一个等比数列："),a("code",[s._v("2"),a("sup",[s._v("0")]),s._v(" 2"),a("sup",[s._v("1")]),s._v(" 2"),a("sup",[s._v("2")]),s._v(" ... 2"),a("sup",[s._v("x")])]),s._v("，其中 "),a("code",[s._v("2"),a("sup",[s._v("x")]),s._v(" <= n")]),s._v("。")]),s._v(" "),a("p",[s._v("所以只要知道 x 的值是多少，就能知道这行代码执行的次数是多少。通过 "),a("code",[s._v("2"),a("sup",[s._v("x")]),s._v(" = n")]),s._v(" 可得 "),a("code",[s._v("x = log"),a("sub",[s._v("2")]),s._v("n")]),s._v("。")]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("结论")]),s._v(" "),a("p",[s._v("实际上，在对数阶时间复杂度中，不管是以 2 为底，还是以 3 为底，甚至以 10 为底，我们都可以把所有对数阶的时间复杂度都记为 "),a("code",[s._v("O(logn)")]),s._v("。")])]),s._v(" "),a("p",[s._v("理由："),a("code",[s._v("log"),a("sub",[s._v("3")]),s._v("n = log"),a("sub",[s._v("3")]),s._v("2 * log"),a("sub",[s._v("2")]),s._v("n")]),s._v("，所以 "),a("code",[s._v("O(log"),a("sub",[s._v("3")]),s._v("n) = O(C * log"),a("sub",[s._v("2")]),s._v("n)")]),s._v("，其中 "),a("code",[s._v("C = log"),a("sub",[s._v("3")]),s._v("2")]),s._v(" 是一个常量，"),a("strong",[s._v("在采用大 O 标记复杂度的时候，可以忽略系数，即 "),a("code",[s._v("O(Cf(n)) = O(f(n))")])]),s._v("。")]),s._v(" "),a("p",[s._v("所以 "),a("code",[s._v("O(log"),a("sub",[s._v("3")]),s._v("n)")]),s._v(" 就等于 "),a("code",[s._v("O(log"),a("sub",[s._v("2")]),s._v("n)")]),s._v("。")]),s._v(" "),a("p",[s._v("因此，在对数阶时间复杂度的表示方法里，我们忽略对数的「底」，统一表示为 "),a("code",[s._v("O(logn)")]),s._v("。")]),s._v(" "),a("details",{staticClass:"custom-block details"},[a("summary",[s._v("换底公式")]),s._v(" "),a("p",[s._v("由"),a("a",{attrs:{href:"https://www.baidu.com/s?wd=%E6%8D%A2%E5%BA%95%E5%85%AC%E5%BC%8F",target:"_blank",rel:"noopener noreferrer"}},[s._v("换底公式"),a("OutboundLink")],1),s._v(" "),a("code",[s._v("log"),a("sub",[s._v("a")]),s._v("b = log"),a("sub",[s._v("c")]),s._v("b / log"),a("sub",[s._v("c")]),s._v("a")]),s._v(" 可得：")]),s._v(" "),a("p",[a("code",[s._v("log"),a("sub",[s._v("2")]),s._v("n = log"),a("sub",[s._v("3")]),s._v("n / log"),a("sub",[s._v("3")]),s._v("2")]),s._v("，进而可得："),a("code",[s._v("log"),a("sub",[s._v("3")]),s._v("n = log"),a("sub",[s._v("2")]),s._v("n * log"),a("sub",[s._v("3")]),s._v("2")])])]),s._v(" "),a("h3",{attrs:{id:"_3-o-nlogn"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-o-nlogn"}},[s._v("#")]),s._v(" 3）O(nlogn)")]),s._v(" "),a("p",[s._v("根据乘法法则，如果一段代码的时间复杂度是上面分析的 "),a("code",[s._v("O(logn)")]),s._v("，循环执行 n 遍，时间复杂度就是 "),a("code",[s._v("O(nlogn)")]),s._v(" 了。")]),s._v(" "),a("p",[s._v("时间复杂度为 "),a("code",[s._v("O(nlogn)")]),s._v(" 的常见算法有：归并排序、快速排序。")]),s._v(" "),a("h3",{attrs:{id:"_4-o-m-n-、o-m-n"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-o-m-n-、o-m-n"}},[s._v("#")]),s._v(" 4）O(m+n)、O(m*n)")]),s._v(" "),a("p",[s._v("这种情况和前面提到的加法法则不一样，如下代码：")]),s._v(" "),a("div",{staticClass:"language-C line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("cal")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sum_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" m"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    sum_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sum_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" sum_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" j "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    sum_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" sum_2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" j"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" sum_1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" sum_2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("上述代码中，m 和 n 是表示两个数据规模。我们无法事先评估 m 和 n 谁的量级大，所以在表示复杂度的时候，就不能简单地利用加法法则省略掉其中一个。因此，上面代码的时间复杂度就是 "),a("code",[s._v("O(m + n)")]),s._v("。")]),s._v(" "),a("p",[s._v("针对这种情况，原来的加法法则就不正确了，我们需要将加法规则改为："),a("br"),s._v(" "),a("code",[s._v("T1(m) + T2(n) = O(f(m) + g(n))")]),s._v("。")]),s._v(" "),a("p",[s._v("但是乘法法则继续有效："),a("code",[s._v("T1(m) * T2(n) = O(f(m) * f(n))")]),s._v("。")]),s._v(" "),a("h2",{attrs:{id:"空间复杂度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空间复杂度"}},[s._v("#")]),s._v(" 空间复杂度")]),s._v(" "),a("p",[s._v("时间复杂度的全称是渐进时间复杂度，表示算法的执行时间与数据规模之间的增长关系。类比一下，"),a("strong",[s._v("空间复杂度全称就是渐进空间复杂度，表示算法的存储空间与数据规模之间的增长关系")]),s._v("。")]),s._v(" "),a("p",[s._v("有了时间复杂度分析的基础，空间复杂度分析就非常简单了。以下面这段伪代码作为示例：")]),s._v(" "),a("div",{staticClass:"language-C line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("void")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("print")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" new "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("--")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    print out a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("i"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("跟时间复杂度分析一样，第 2 行代码中申请了一个空间存储变量 i，但是它是常量阶的，跟数据规模 n 没有关系，所以可以忽略。")]),s._v(" "),a("p",[s._v("第 3 行申请了一个大小为 n 的 int 类型数组，除此之外，剩下的代码都没有占用更多的空间，所以整段代码的空间复杂度就是 "),a("code",[s._v("O(n)")]),s._v("。")]),s._v(" "),a("p",[s._v("常见的空间复杂度就是 "),a("code",[s._v("O(1)")]),s._v("、"),a("code",[s._v("O(n)")]),s._v("、"),a("code",[s._v("O(n"),a("sup",[s._v("2")]),s._v(")")]),s._v("，对数阶复杂度平时都用不到。总的来看，空间复杂度分析比时间复杂度分析要简单很多。")]),s._v(" "),a("p",[s._v("（完）")])])}),[],!1,null,null,null);t.default=r.exports}}]);