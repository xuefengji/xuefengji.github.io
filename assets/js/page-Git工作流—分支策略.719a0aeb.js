(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{598:function(t,e,a){t.exports=a.p+"assets/img/gitflow.23132652.png"},599:function(t,e,a){t.exports=a.p+"assets/img/githubflow.11b13033.png"},600:function(t,e,a){t.exports=a.p+"assets/img/gitlabflow-production.69790997.png"},601:function(t,e,a){t.exports=a.p+"assets/img/gitlabflow-pre-production.d7f939a2.png"},602:function(t,e,a){t.exports=a.p+"assets/img/gitlabflow-stable.f315915a.png"},803:function(t,e,a){"use strict";a.r(e);var r=a(1),i=Object(r.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"git-工作流-分支策略"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#git-工作流-分支策略"}},[t._v("#")]),t._v(" Git 工作流 — 分支策略")]),t._v(" "),r("h2",{attrs:{id:"前言"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),r("p",[t._v("设想这样一个场景：某企业的开发团队使用 Git 管理日常开发工作，最初开发团队的代码有一条主干分支（master/main）。后来为了开发新功能，从主干分支拉出一条特性分支，但新功能完成后，该特性分支没有合入主干分支，而是作为下次开发的主干分支，重新拉出一条新的特性分支，导致主干分支一直形同虚设，团队没有一条稳定的代码分支。")]),t._v(" "),r("p",[t._v("这个问题很大程度上源于团队对分支策略的不了解，导致分支策略使用很混乱。因此，我们需要采用 Git 工作流 —— 分支策略来此类问题。")]),t._v(" "),r("p",[t._v("目前业界常见的 Git 分支策略主要有：GitFlow、GitHubFlow 以及 GitLabFlow，本文一一作介绍，方便团队开发时，根据自身情况选择最合适的方案。")]),t._v(" "),r("h2",{attrs:{id:"gitflow-策略"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#gitflow-策略"}},[t._v("#")]),t._v(" GitFlow 策略")]),t._v(" "),r("p",[t._v("GitFlow 是这三种分支策略中最早出现的。")]),t._v(" "),r("p",[t._v("GitFlow 通常包含五种类型的分支："),r("code",[t._v("master")]),t._v(" 分支、"),r("code",[t._v("develop")]),t._v(" 分支、"),r("code",[t._v("feature")]),t._v(" 分支、"),r("code",[t._v("release")]),t._v(" 分支以及 "),r("code",[t._v("hotfix")]),t._v(" 分支。")]),t._v(" "),r("h3",{attrs:{id:"分支定义"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分支定义"}},[t._v("#")]),t._v(" 分支定义")]),t._v(" "),r("p",[r("strong",[t._v("master 分支")]),t._v("：主干分支，这是一个稳定的分支，又称为保护分支，表示正式发布的历史，所有对外正式版本发布都会合并到这里，并打上版本标签。通常情况下只允许其他分支将代码合入，不允许向 "),r("code",[t._v("master")]),t._v(" 分支直接提交代码。")]),t._v(" "),r("p",[r("strong",[t._v("develop 分支")]),t._v("：开发分支，用来用来整合功能分支，表示最新的开发状态。包含要发布到下一个 "),r("code",[t._v("release")]),t._v(" 的代码。")]),t._v(" "),r("blockquote",[r("ul",[r("li",[t._v("注意每次合并到 "),r("code",[t._v("master")]),t._v(" 都要打上 tag，方便定位。")]),t._v(" "),r("li",[r("code",[t._v("master")]),t._v(" 分支和 "),r("code",[t._v("develop")]),t._v(" 分支都是历史分支，用来记录项目的历史记录。相对于这两个分支，下面的其它分支都属于临时分支，这些分支完成自己的使命后就可以被删除。")])])]),t._v(" "),r("p",[r("strong",[t._v("feature 分支")]),t._v("：功能分支，通常从 "),r("code",[t._v("develop")]),t._v(" 分支拉出，每个新功能的开发对应一个功能分支，用于开发人员提交代码并进行自测。自测完成后，会将 "),r("code",[t._v("feature")]),t._v(" 分支的代码合并至 "),r("code",[t._v("develop")]),t._v(" 分支，进入下一个 "),r("code",[t._v("release")]),t._v("。")]),t._v(" "),r("p",[r("strong",[t._v("release 分支")]),t._v("：发布分支，发布新版本时，基于 "),r("code",[t._v("develop")]),t._v(" 分支创建，从此刻开始新的功能不会加到这个分支，这个分支只应该做 bug 修复、文档生成和其他面向发布的任务。当发布分支足够稳定后，它的生命周期就可以结束了，这时候将 "),r("code",[t._v("release")]),t._v(" 分支 合并到 "),r("code",[t._v("master")]),t._v(" 分支，然后打上 tag 版本号；接着还需要将 "),r("code",[t._v("release")]),t._v(" 分支合并回 "),r("code",[t._v("develop")]),t._v(" 分支。")]),t._v(" "),r("blockquote",[r("ul",[r("li",[r("code",[t._v("release")]),t._v(" 分支可以删掉，因为在 "),r("code",[t._v("master")]),t._v(" 上打了 tag，即使删掉了发布分支，你也可以很方便的重新创建一个："),r("div",{staticClass:"language-bash line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-bash"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 基于 tag v1.0.0 创建一个分支")]),t._v("\n$ "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" checkout -b release/v1.0.0 v1.0.0\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br")])])]),t._v(" "),r("li",[t._v("release 分支是 develop 和 master 之间的缓冲区，对于一个发布，往往会在发布分支中停留一段时间，等待稳定后才合并到 master。")]),t._v(" "),r("li",[t._v("release 分支使得团队可以在完善当前发布版本的同时，不阻拦新功能的开发。")])])]),t._v(" "),r("p",[r("strong",[t._v("hotfix 分支")]),t._v("：热修复分支，生产环境发现新 bug 时创建的临时分支，这些 bug 可能比较紧急，而且跨越多个分支，所以可以创建一个 "),r("code",[t._v("hotfix")]),t._v(" 分支快速修复 "),r("code",[t._v("master")]),t._v(" 上面的 bug。问题验证通过后，合并到 "),r("code",[t._v("master")]),t._v(" 和 "),r("code",[t._v("develop")]),t._v(" 分支，并打上 tag。")]),t._v(" "),r("blockquote",[r("p",[r("code",[t._v("hotfix")]),t._v(" 分支是唯一一个可以从 "),r("code",[t._v("master")]),t._v(" 分叉出来的分支类型。")])]),t._v(" "),r("h3",{attrs:{id:"开发流程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#开发流程"}},[t._v("#")]),t._v(" 开发流程")]),t._v(" "),r("p",[t._v("通常开发过程中新功能的开发过程如下：")]),t._v(" "),r("ul",[r("li",[t._v("从 "),r("code",[t._v("develop")]),t._v(" 分支拉取一条 "),r("code",[t._v("feature")]),t._v(" 分支，开发团队在 "),r("code",[t._v("feature")]),t._v(" 分支上进行新功能开发。")]),t._v(" "),r("li",[t._v("开发完成后，将 "),r("code",[t._v("feature")]),t._v(" 分支合入到 "),r("code",[t._v("develop")]),t._v(" 分支，并进行开发环境的验证。")]),t._v(" "),r("li",[t._v("开发环境验证完成，从 "),r("code",[t._v("develop")]),t._v(" 分支拉取一条 "),r("code",[t._v("release")]),t._v(" 分支，到测试环境进行 SIT/UAT 测试。")]),t._v(" "),r("li",[t._v("测试无问题后，可将 "),r("code",[t._v("develop")]),t._v(" 分支合入 "),r("code",[t._v("master")]),t._v(" 分支。")]),t._v(" "),r("li",[t._v("待发版时，直接将 "),r("code",[t._v("master")]),t._v(" 分支代码部署到生产环境。")])]),t._v(" "),r("p",[t._v("可参考下图：")]),t._v(" "),r("div",{staticStyle:{"text-align":"center"}},[r("img",{attrs:{src:a(598),alt:"GitFlow"}}),t._v(" "),r("p",{staticStyle:{"text-align":"center",color:"#888"}},[t._v("（GitFlow 示意图）")])]),t._v(" "),r("h3",{attrs:{id:"优缺点"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#优缺点"}},[t._v("#")]),t._v(" 优缺点")]),t._v(" "),r("p",[t._v("GitFlow 的优点：")]),t._v(" "),r("ul",[r("li",[t._v("分支各司其职，覆盖大部分开发场景。")]),t._v(" "),r("li",[t._v("预期 master 分支中任何 commit 都是可部署的。")]),t._v(" "),r("li",[t._v("严格按照流程执行，出现重大事故的情形会大大降低。")])]),t._v(" "),r("p",[t._v("GitFlow 的缺点：")]),t._v(" "),r("ul",[r("li",[t._v("过于繁琐，无法要求所有团队成员按照这个流程严格执行。")]),t._v(" "),r("li",[t._v("违反 Git 提倡的 short-lived 分支原则。")]),t._v(" "),r("li",[t._v("如果特性分支过多的话很容易造成代码冲突，从而提高了合入的成本。")]),t._v(" "),r("li",[t._v("由于每次提交都涉及多个分支，所以 GitFlow 也太不适合提交频率较高的项目。")]),t._v(" "),r("li",[t._v("master 分支历史记录并不干净，只能通过打 tag 标记哪些是 master 真正要部署的。")]),t._v(" "),r("li",[t._v("对持续部署和 "),r("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/77577415",target:"_blank",rel:"noopener noreferrer"}},[t._v("Monorepo"),r("OutboundLink")],1),t._v(" 仓库不友好。")])]),t._v(" "),r("h2",{attrs:{id:"githubflow-策略"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#githubflow-策略"}},[t._v("#")]),t._v(" GitHubFlow 策略")]),t._v(" "),r("p",[t._v("GitHubFlow 看名字也知道和 GitHub 有关，它来源于 GitHub 团队的工作实践。当代码托管在 GitHub 上时，则需要使用 GitHubFlow。相比 GitFlow 而言，GitHubFlow 没有那么多分支。")]),t._v(" "),r("p",[t._v("GitHubFlow 通常只有一个 "),r("code",[t._v("master")]),t._v(" 分支是固定的（"),r("a",{attrs:{href:"https://github.com/github/renaming",target:"_blank",rel:"noopener noreferrer"}},[t._v("现在被更名为 main 了"),r("OutboundLink")],1),t._v("），而且 GitHubFlow 中的 "),r("code",[t._v("master")]),t._v(" 分支通常是受保护的，只有特定权限的人才可以向 "),r("code",[t._v("master")]),t._v(" 分支合入代码。")]),t._v(" "),r("h3",{attrs:{id:"适用场景"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#适用场景"}},[t._v("#")]),t._v(" 适用场景")]),t._v(" "),r("ul",[r("li",[t._v("适合开源项目。开源项目需要接受任何开发者的代码共享，无需给他们正式的代码库的写权限。")]),t._v(" "),r("li",[t._v("适合大型的，自发性的团队。fork 的方式可以提供灵活的方式来安全协作。")])]),t._v(" "),r("h3",{attrs:{id:"开发流程-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#开发流程-2"}},[t._v("#")]),t._v(" 开发流程")]),t._v(" "),r("ul",[r("li",[t._v("在 GitHubFlow 中，要求每个成员先 fork 项目到自己的目录（fork 的本质就是让 GitHub 将项目克隆到你的个人目录）。")]),t._v(" "),r("li",[t._v("每次有新功能开发或修复 bug 时，需要从 "),r("code",[t._v("master")]),t._v(" 分支拉取一个新的 "),r("code",[t._v("feature")]),t._v(" 分支，在这个新分支上进行代码提交。")]),t._v(" "),r("li",[t._v("功能开发完成，开发者创建 "),r("code",[t._v("feature")]),t._v(" 分支合并到上游（upstream）项目的 Pull Request（简称 PR），通知源仓库开发者进行代码修改 Review。")]),t._v(" "),r("li",[t._v("上游项目的所有者决定是否合并你的代码，如果确认无误，他会将代码合入 "),r("code",[t._v("master")]),t._v(" 分支。")])]),t._v(" "),r("p",[t._v("可参考下图：")]),t._v(" "),r("div",{staticStyle:{"text-align":"center"}},[r("img",{attrs:{src:a(599),alt:"GitHubFlow"}}),t._v(" "),r("p",{staticStyle:{"text-align":"center",color:"#888"}},[t._v("（GitHubFlow 示意图）")])]),t._v(" "),r("p",[t._v("很多人可能会问，提交代码通常是 "),r("code",[t._v("commit")]),t._v(" 或者 "),r("code",[t._v("push")]),t._v("，拉取代码才是 "),r("code",[t._v("pull")]),t._v("，为什么 GitHubFlow 中提交代码是「Pull Request」。因为在 GitHubFlow 中，PR 是通知其他人员到你的代码库去拉取代码至本地，然后由他们进行最终的提交，所以用 "),r("code",[t._v("pull")]),t._v(" 而非 "),r("code",[t._v("push")]),t._v("。")]),t._v(" "),r("h3",{attrs:{id:"优缺点-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#优缺点-2"}},[t._v("#")]),t._v(" 优缺点")]),t._v(" "),r("p",[t._v("GitHubFlow 的优点：")]),t._v(" "),r("ul",[r("li",[t._v("相对于 GitFlow 来说比较简单。")])]),t._v(" "),r("p",[t._v("GitHubFlow 的缺点：")]),t._v(" "),r("ul",[r("li",[t._v("因为只有一条 master 分支，万一代码合入后，由于某些因素 master 分支不能立刻发布，就会导致最终发布的版本和计划不同。")])]),t._v(" "),r("h2",{attrs:{id:"gitlabflow-策略"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#gitlabflow-策略"}},[t._v("#")]),t._v(" GitLabFlow 策略")]),t._v(" "),r("p",[t._v("GitLabFlow 出现的最晚，GitLabFlow 是开源工具 GitLab 推荐的做法。")]),t._v(" "),r("p",[t._v("GitLabFlow 支持 GitFlow 的分支策略，也支持 GitHubFlow 的「Pull Request」（在 GitLabFlow 中被称为「Merge Request」）。")]),t._v(" "),r("p",[t._v("相比于 GitHubFlow，GitLabFlow 增加了对预生产环境和生产环境的管理，即 "),r("code",[t._v("master")]),t._v(" 分支对应为开发环境的分支，预生产和生产环境由其他分支（如 "),r("code",[t._v("pre-production")]),t._v("、"),r("code",[t._v("production")]),t._v("）进行管理。在这种情况下，"),r("code",[t._v("master")]),t._v(" 分支是 "),r("code",[t._v("pre-production")]),t._v(" 分支的上游，"),r("code",[t._v("pre-production")]),t._v(" 是 "),r("code",[t._v("production")]),t._v(" 分支的上游；GitLabFlow 规定代码必须从上游向下游发展，即新功能或修复 bug 时，特性分支的代码测试无误后，必须先合入 "),r("code",[t._v("master")]),t._v(" 分支，然后才能由 "),r("code",[t._v("master")]),t._v(" 分支向 "),r("code",[t._v("pre-production")]),t._v(" 环境合入，最后由 "),r("code",[t._v("pre-production")]),t._v(" 合入到 "),r("code",[t._v("production")]),t._v("。")]),t._v(" "),r("p",[t._v("基于环境：")]),t._v(" "),r("div",{staticStyle:{"text-align":"center"}},[r("img",{staticStyle:{width:"200px"},attrs:{src:a(600),alt:"GitLabFlow"}}),t._v(" "),r("p",{staticStyle:{"text-align":"center",color:"#888"}},[t._v("（GitLabFlow：master -> production，图来源于网络）")])]),t._v(" "),r("div",{staticStyle:{"text-align":"center"}},[r("img",{staticStyle:{width:"300px"},attrs:{src:a(601),alt:"GitLabFlow"}}),t._v(" "),r("p",{staticStyle:{"text-align":"center",color:"#888"}},[t._v("（GitLabFlow：master -> pre-production -> production，图来源于网络）")])]),t._v(" "),r("p",[t._v("基于发布计划：")]),t._v(" "),r("div",{staticStyle:{"text-align":"center"}},[r("img",{staticStyle:{width:"300px"},attrs:{src:a(602),alt:"GitLabFlow"}}),t._v(" "),r("p",{staticStyle:{"text-align":"center",color:"#888"}},[t._v("（GitLabFlow：master -> stable，图来源于网络）")])]),t._v(" "),r("p",[t._v("GitLabFlow 中的 Merge Request 是将一个分支合入到另一个分支的请求，通过 Merge Request 可以对比合入分支和被合入分支的差异，也可以做代码的 Review。")]),t._v(" "),r("p",[t._v("GitLabFlow 并不像 GitFlow、GitHubFlow 一样具有明显的规范，它更多是在 GitHubFlow 基础上，综合考虑环境部署、项目管理等问题而得出的一种实践。")]),t._v(" "),r("h2",{attrs:{id:"团队定制的分支策略"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#团队定制的分支策略"}},[t._v("#")]),t._v(" 团队定制的分支策略")]),t._v(" "),r("p",[t._v("比较流行的 Git 分支策略是 GitFlow，但是大部分团队会根据自己的情况制定自己的 Git 工作流规范，例如我们团队的分支规范：")]),t._v(" "),r("p",[r("strong",[t._v("master 分支")]),t._v("：表示一个稳定的发布版本。")]),t._v(" "),r("ul",[r("li",[t._v("场景：前端会跟随后端的版本迭代，在 "),r("code",[t._v("dev")]),t._v(" 分支测试稳定后，合并到 "),r("code",[t._v("master")]),t._v(" 分支，并使用 "),r("code",[t._v("tag")]),t._v(" 标记前端版本和对应的后端版本。")]),t._v(" "),r("li",[t._v("tag 规范："),r("code",[t._v("v{version}@{product_version}")]),t._v("，例如 v0.1.0@SQY_3.0。")]),t._v(" "),r("li",[t._v("人员：由项目负责人进行审核合并，普通开发者没有权限。")])]),t._v(" "),r("p",[r("strong",[t._v("dev 分支")]),t._v("：开发者主要工作的分支，最新的特性或 bug 修复都会提交到这个分支。开发者如果在该分支进行了提交，在 "),r("code",[t._v("push")]),t._v(" 到远程之前应该先 "),r("code",[t._v("pull")]),t._v(" 一下，并尽量使用 "),r("code",[t._v("rebase")]),t._v(" 模式，保证分支的简洁。")]),t._v(" "),r("ul",[r("li",[t._v("命名规范："),r("code",[t._v("dev")])]),t._v(" "),r("li",[t._v("tag 规范：在 "),r("code",[t._v("dev")]),t._v(" 分支中也可能会经历发布过程，例如 bug 修复版本。这里同样使用 tag 来标记这些发布，例如 v0.1.1。")]),t._v(" "),r("li",[t._v("提交规范：如果是在开发分支上进行开发，在推送到远程之前，应该使用 "),r("code",[t._v("git rebase")]),t._v(" 形式更新本地分支。")]),t._v(" "),r("li",[t._v("建议操作：建议时不时地 "),r("code",[t._v("pull")]),t._v(" 一下，尤其是每天打开电脑正式工作前，保证本地代码版本与远端版本的一致性（因为很多人都不能优雅地解决代码冲突）。")])]),t._v(" "),r("p",[r("strong",[t._v("feature 分支")]),t._v("：涉及多人协作或者大功能的开发，应该从 "),r("code",[t._v("dev")]),t._v(" 分支 "),r("code",[t._v("checkout")]),t._v(" 出独立的 "),r("code",[t._v("feature")]),t._v(" 分支，避免干扰 "),r("code",[t._v("dev")]),t._v(" 分支。")]),t._v(" "),r("ul",[r("li",[t._v("场景\n"),r("ul",[r("li",[t._v("涉及多人协作：团队多个成员在同一个项目下负责开发不同的功能，这时候每个成员在自己的 "),r("code",[t._v("feature")]),t._v(" 分支独立开发。")]),t._v(" "),r("li",[t._v("大功能开发：大功能开发跨越周期比较长，需要多次迭代才会稳定。这时候应该在独立的分支上开发。方便跟踪历史记录，也免于干扰 "),r("code",[t._v("dev")]),t._v(" 分支的迭代和发布。")])])]),t._v(" "),r("li",[t._v("命名规范\n"),r("ul",[r("li",[r("code",[t._v("feature/name")]),t._v("：name 是功能名称。")]),t._v(" "),r("li",[r("code",[t._v("feature/product_version")]),t._v("：这也是团队常见的模式，当无法使用一个功能名称来描述时，可以使用后端版本号作为「功能」。")])])]),t._v(" "),r("li",[t._v("合并时机\n"),r("ul",[r("li",[t._v("当 "),r("code",[t._v("feature")]),t._v(" 分支迭代稳定，并通过测试后，合并到 "),r("code",[t._v("dev")]),t._v(" 分支。合并到 "),r("code",[t._v("dev")]),t._v(" 后，"),r("code",[t._v("feature")]),t._v(" 分支的生命周期就结束了。后续 bug 修复和功能优化直接在 "),r("code",[t._v("dev")]),t._v(" 开发。")]),t._v(" "),r("li",[t._v("当多个 "),r("code",[t._v("feature")]),t._v(" 分支需要合并对外发布临时版本时。合并到 "),r("code",[t._v("preview")]),t._v(" 分支。（⚠️这种情况不应该合并到 "),r("code",[t._v("dev")]),t._v(" 分支，因为 "),r("code",[t._v("feature")]),t._v(" 分支可能还不稳定或未完成，比如为了联调某些功能）")])])]),t._v(" "),r("li",[t._v("合并方式\n"),r("ul",[r("li",[t._v("为了能在分支图上查看到分支历史，不要使用 "),r("a",{attrs:{href:"https://www.cnblogs.com/mengff/p/15514944.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("fast-forward"),r("OutboundLink")],1),t._v("。")])])])]),t._v(" "),r("p",[r("strong",[t._v("preview 分支")]),t._v("：临时的预览分支，"),r("code",[t._v("preview")]),t._v(" 分支用于临时合并 "),r("code",[t._v("feature")]),t._v(" 分支，这其中可能会修复某些 bug 或者冲突。可以选择性地将这些提交 "),r("code",[t._v("cherry-pick")]),t._v(" 回 "),r("code",[t._v("feature")]),t._v(" 分支。当预览结束后就可以销毁 "),r("code",[t._v("preview")]),t._v(" 分支。")]),t._v(" "),r("p",[r("strong",[t._v("release 分支")]),t._v("："),r("code",[t._v("release")]),t._v(" 分支遵循 GitFlow 流程。")]),t._v(" "),r("ul",[r("li",[t._v("GitFlow 风格的 release：当前前端的稳定版本和 SQY（产品名）版本绑定。"),r("code",[t._v("release")]),t._v(" 分支不一定存在。一般情况下，只会在前端版本稳定后，将其合并到 "),r("code",[t._v("master")]),t._v("，并创建 tag 标记。而只有需要为指定的正式版本修复 bug 时才会创建 "),r("code",[t._v("release")]),t._v(" 分支。")]),t._v(" "),r("li",[t._v("场景：需要为某个正式版本修复 bug（hotfix）时，从 "),r("code",[t._v("master")]),t._v(" 的对应 tag 中 "),r("code",[t._v("checkout")]),t._v(" 出一个 "),r("code",[t._v("release")]),t._v(" 分支。")]),t._v(" "),r("li",[t._v("命名规范："),r("code",[t._v("release/{product_version}")]),t._v("，外部人员只会关注产品版本。")]),t._v(" "),r("li",[t._v("如何修复：\n"),r("ul",[r("li",[t._v("如果对应 bug 可以在 "),r("code",[t._v("dev")]),t._v(" 分支直接被修复，可以先提交到 "),r("code",[t._v("dev")]),t._v(" 分支（或者已经修复了），然后再 "),r("code",[t._v("cherry-pick")]),t._v(" 到 "),r("code",[t._v("release")]),t._v(" 分支。")]),t._v(" "),r("li",[t._v("如果 bug 在新版本无法复现，比如新版本升级了依赖，那么在 "),r("code",[t._v("release")]),t._v(" 分支直接修复即可。")])])]),t._v(" "),r("li",[r("code",[t._v("release")]),t._v(" 分支树：\n"),r("div",{staticStyle:{"text-align":"center"}},[r("svg",{attrs:{id:"SvgjsSvg1006",width:"309.5",height:"462",xmlns:"http://www.w3.org/2000/svg",version:"1.1","xmlns:xlink":"http://www.w3.org/1999/xlink","xmlns:svgjs":"http://svgjs.com/svgjs"}},[r("defs",{attrs:{id:"SvgjsDefs1007"}},[r("marker",{attrs:{id:"SvgjsMarker1036",markerWidth:"14",markerHeight:"10",refX:"10",refY:"5",viewBox:"0 0 14 10",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[r("path",{attrs:{id:"SvgjsPath1037",d:"M0,0 L14,5 L0,10 L0,0",fill:"#64b5f6",stroke:"#64b5f6","stroke-width":"1"}})]),r("marker",{attrs:{id:"SvgjsMarker1040",markerWidth:"14",markerHeight:"10",refX:"10",refY:"5",viewBox:"0 0 14 10",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[r("path",{attrs:{id:"SvgjsPath1041",d:"M0,0 L14,5 L0,10 L0,0",fill:"#64b5f6",stroke:"#64b5f6","stroke-width":"1"}})]),r("marker",{attrs:{id:"SvgjsMarker1044",markerWidth:"14",markerHeight:"10",refX:"10",refY:"5",viewBox:"0 0 14 10",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[r("path",{attrs:{id:"SvgjsPath1045",d:"M0,0 L14,5 L0,10 L0,0",fill:"#64b5f6",stroke:"#64b5f6","stroke-width":"1"}})]),r("marker",{attrs:{id:"SvgjsMarker1048",markerWidth:"14",markerHeight:"10",refX:"10",refY:"5",viewBox:"0 0 14 10",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[r("path",{attrs:{id:"SvgjsPath1049",d:"M0,0 L14,5 L0,10 L0,0",fill:"#64b5f6",stroke:"#64b5f6","stroke-width":"1"}})]),r("marker",{attrs:{id:"SvgjsMarker1076",markerWidth:"14",markerHeight:"10",refX:"10",refY:"5",viewBox:"0 0 14 10",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[r("path",{attrs:{id:"SvgjsPath1077",d:"M0,0 L14,5 L0,10 L0,0",fill:"#e57373",stroke:"#e57373","stroke-width":"1"}})]),r("marker",{attrs:{id:"SvgjsMarker1086",markerWidth:"14",markerHeight:"10",refX:"10",refY:"5",viewBox:"0 0 14 10",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[r("path",{attrs:{id:"SvgjsPath1087",d:"M0,0 L14,5 L0,10 L0,0",fill:"#e57373",stroke:"#e57373","stroke-width":"1"}})]),r("marker",{attrs:{id:"SvgjsMarker1090",markerWidth:"14",markerHeight:"10",refX:"10",refY:"5",viewBox:"0 0 14 10",orient:"auto",markerUnits:"userSpaceOnUse","stroke-dasharray":"0,0"}},[r("path",{attrs:{id:"SvgjsPath1091",d:"M0,0 L14,5 L0,10 L0,0",fill:"#64b5f6",stroke:"#64b5f6","stroke-width":"1"}})])]),r("g",{attrs:{id:"SvgjsG1008",transform:"translate(109.75,414)"}},[r("path",{attrs:{id:"SvgjsPath1009",d:"M 0 0L 71.5 0L 71.5 23L 0 23Z",stroke:"rgba(229,115,115,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffcdd2"}}),r("g",{attrs:{id:"SvgjsG1010"}},[r("text",{attrs:{id:"SvgjsText1011","font-family":"微软雅黑","text-anchor":"middle","font-size":"14px",width:"52px",fill:"#323232","font-weight":"700",align:"middle",lineHeight:"125%",anchor:"middle",family:"微软雅黑",size:"14px",weight:"700","font-style":"",opacity:"1",y:"0.75",transform:"rotate(0)"}},[r("tspan",{attrs:{id:"SvgjsTspan1012",dy:"17",x:"36"}},[r("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1013"}},[t._v("master")])])])])]),r("g",{attrs:{id:"SvgjsG1014",transform:"translate(135.5,353.5)"}},[r("path",{attrs:{id:"SvgjsPath1015",d:"M 0 11.5C 0 -3.8333333333333335 20 -3.8333333333333335 20 11.5C 20 26.833333333333332 0 26.833333333333332 0 11.5Z",stroke:"rgba(100,181,246,1)","stroke-width":"1","fill-opacity":"1",fill:"#bbdefb"}}),r("g",{attrs:{id:"SvgjsG1016"}},[r("text",{attrs:{id:"SvgjsText1017","font-family":"微软雅黑","text-anchor":"middle","font-size":"14px",width:"0px",fill:"#323232","font-weight":"400",align:"middle",lineHeight:"125%",anchor:"middle",family:"微软雅黑",size:"14px",weight:"400","font-style":"",opacity:"1",y:"0.75",transform:"rotate(0)"}})])]),r("g",{attrs:{id:"SvgjsG1018",transform:"translate(135.5,270.5)"}},[r("path",{attrs:{id:"SvgjsPath1019",d:"M 0 11.5C 0 -3.8333333333333335 20 -3.8333333333333335 20 11.5C 20 26.833333333333332 0 26.833333333333332 0 11.5Z",stroke:"rgba(100,181,246,1)","stroke-width":"1","fill-opacity":"1",fill:"#bbdefb"}}),r("g",{attrs:{id:"SvgjsG1020"}},[r("text",{attrs:{id:"SvgjsText1021","font-family":"微软雅黑","text-anchor":"middle","font-size":"14px",width:"0px",fill:"#323232","font-weight":"400",align:"middle",lineHeight:"125%",anchor:"middle",family:"微软雅黑",size:"14px",weight:"400","font-style":"",opacity:"1",y:"0.75",transform:"rotate(0)"}})])]),r("g",{attrs:{id:"SvgjsG1022",transform:"translate(135.5,136.5)"}},[r("path",{attrs:{id:"SvgjsPath1023",d:"M 0 11.5C 0 -3.8333333333333335 20 -3.8333333333333335 20 11.5C 20 26.833333333333332 0 26.833333333333332 0 11.5Z",stroke:"rgba(100,181,246,1)","stroke-width":"1","fill-opacity":"1",fill:"#bbdefb"}}),r("g",{attrs:{id:"SvgjsG1024"}},[r("text",{attrs:{id:"SvgjsText1025","font-family":"微软雅黑","text-anchor":"middle","font-size":"14px",width:"0px",fill:"#323232","font-weight":"400",align:"middle",lineHeight:"125%",anchor:"middle",family:"微软雅黑",size:"14px",weight:"400","font-style":"",opacity:"1",y:"0.75",transform:"rotate(0)"}})])]),r("g",{attrs:{id:"SvgjsG1026",transform:"translate(135.5,54.5)"}},[r("path",{attrs:{id:"SvgjsPath1027",d:"M 0 11.5C 0 -3.8333333333333335 20 -3.8333333333333335 20 11.5C 20 26.833333333333332 0 26.833333333333332 0 11.5Z",stroke:"rgba(100,181,246,1)","stroke-width":"1","fill-opacity":"1",fill:"#bbdefb"}}),r("g",{attrs:{id:"SvgjsG1028"}},[r("text",{attrs:{id:"SvgjsText1029","font-family":"微软雅黑","text-anchor":"middle","font-size":"14px",width:"0px",fill:"#323232","font-weight":"400",align:"middle",lineHeight:"125%",anchor:"middle",family:"微软雅黑",size:"14px",weight:"400","font-style":"",opacity:"1",y:"0.75",transform:"rotate(0)"}})])]),r("g",{attrs:{id:"SvgjsG1030",transform:"translate(213,234)"}},[r("path",{attrs:{id:"SvgjsPath1031",d:"M 0 11.5C 0 -3.8333333333333335 20 -3.8333333333333335 20 11.5C 20 26.833333333333332 0 26.833333333333332 0 11.5Z",stroke:"rgba(100,181,246,1)","stroke-width":"1","fill-opacity":"1",fill:"#bbdefb"}}),r("g",{attrs:{id:"SvgjsG1032"}},[r("text",{attrs:{id:"SvgjsText1033","font-family":"微软雅黑","text-anchor":"middle","font-size":"14px",width:"0px",fill:"#323232","font-weight":"400",align:"middle",lineHeight:"125%",anchor:"middle",family:"微软雅黑",size:"14px",weight:"400","font-style":"",opacity:"1",y:"0.75",transform:"rotate(0)"}})])]),r("g",{attrs:{id:"SvgjsG1034"}},[r("path",{attrs:{id:"SvgjsPath1035",d:"M145.5 413L145.5 394.5L145.5 394.5L145.5 379.6",stroke:"#64b5f6","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1036)"}})]),r("g",{attrs:{id:"SvgjsG1038"}},[r("path",{attrs:{id:"SvgjsPath1039",d:"M145.5 353L145.5 323.5L145.5 323.5L145.5 296.6",stroke:"#64b5f6","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1040)"}})]),r("g",{attrs:{id:"SvgjsG1042"}},[r("path",{attrs:{id:"SvgjsPath1043",d:"M145.5 270L145.5 215L145.5 215L145.5 162.6",stroke:"#64b5f6","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1044)"}})]),r("g",{attrs:{id:"SvgjsG1046"}},[r("path",{attrs:{id:"SvgjsPath1047",d:"M145.5 136L145.5 106L145.5 106L145.5 80.6",stroke:"#64b5f6","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1048)"}})]),r("g",{attrs:{id:"SvgjsG1050",transform:"translate(143.5,345)"}},[r("path",{attrs:{id:"SvgjsPath1051",d:"M 0 0L 120 0L 120 40L 0 40Z",stroke:"none",fill:"none"}}),r("g",{attrs:{id:"SvgjsG1052"}},[r("text",{attrs:{id:"SvgjsText1053","font-family":"微软雅黑","text-anchor":"middle","font-size":"14px",width:"120px",fill:"#323232","font-weight":"700",align:"middle",lineHeight:"125%",anchor:"middle",family:"微软雅黑",size:"14px",weight:"700","font-style":"",opacity:"1",y:"9.25",transform:"rotate(0)"}},[r("tspan",{attrs:{id:"SvgjsTspan1054",dy:"17",x:"60"}},[r("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1055"}},[t._v("v0.5.0@3.2")])])])])]),r("g",{attrs:{id:"SvgjsG1056",transform:"translate(25,262)"}},[r("path",{attrs:{id:"SvgjsPath1057",d:"M 0 0L 120 0L 120 40L 0 40Z",stroke:"none",fill:"none"}}),r("g",{attrs:{id:"SvgjsG1058"}},[r("text",{attrs:{id:"SvgjsText1059","font-family":"微软雅黑","text-anchor":"middle","font-size":"14px",width:"120px",fill:"#323232","font-weight":"700",align:"middle",lineHeight:"125%",anchor:"middle",family:"微软雅黑",size:"14px",weight:"700","font-style":"",opacity:"1",y:"9.25",transform:"rotate(0)"}},[r("tspan",{attrs:{id:"SvgjsTspan1060",dy:"17",x:"60"}},[r("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1061"}},[t._v("v1.0.0@3.3")])])])])]),r("g",{attrs:{id:"SvgjsG1062",transform:"translate(143.5,46)"}},[r("path",{attrs:{id:"SvgjsPath1063",d:"M 0 0L 120 0L 120 40L 0 40Z",stroke:"none",fill:"none"}}),r("g",{attrs:{id:"SvgjsG1064"}},[r("text",{attrs:{id:"SvgjsText1065","font-family":"微软雅黑","text-anchor":"middle","font-size":"14px",width:"120px",fill:"#323232","font-weight":"700",align:"middle",lineHeight:"125%",anchor:"middle",family:"微软雅黑",size:"14px",weight:"700","font-style":"",opacity:"1",y:"9.25",transform:"rotate(0)"}},[r("tspan",{attrs:{id:"SvgjsTspan1066",dy:"17",x:"60"}},[r("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1067"}},[t._v("v1.2.0@3.5")])])])])]),r("g",{attrs:{id:"SvgjsG1068",transform:"translate(143.5,128)"}},[r("path",{attrs:{id:"SvgjsPath1069",d:"M 0 0L 120 0L 120 40L 0 40Z",stroke:"none",fill:"none"}}),r("g",{attrs:{id:"SvgjsG1070"}},[r("text",{attrs:{id:"SvgjsText1071","font-family":"微软雅黑","text-anchor":"middle","font-size":"14px",width:"120px",fill:"#323232","font-weight":"700",align:"middle",lineHeight:"125%",anchor:"middle",family:"微软雅黑",size:"14px",weight:"700","font-style":"",opacity:"1",y:"9.25",transform:"rotate(0)"}},[r("tspan",{attrs:{id:"SvgjsTspan1072",dy:"17",x:"60"}},[r("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1073"}},[t._v("v1.1.0@3.4")])])])])]),r("g",{attrs:{id:"SvgjsG1074"}},[r("path",{attrs:{id:"SvgjsPath1075",d:"M155.9984707362022 282.03907588962545C 183.85493945180906 286.99974086170886 217.5 275 221.4350122678727 259.6759696183423",stroke:"#e57373","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1076)"}})]),r("g",{attrs:{id:"SvgjsG1078",transform:"translate(186.5,181)"}},[r("path",{attrs:{id:"SvgjsPath1079",d:"M 0 0L 98 0L 98 23L 0 23Z",stroke:"rgba(229,115,115,1)","stroke-width":"2","fill-opacity":"1",fill:"#ffcdd2"}}),r("g",{attrs:{id:"SvgjsG1080"}},[r("text",{attrs:{id:"SvgjsText1081","font-family":"微软雅黑","text-anchor":"middle","font-size":"14px",width:"78px",fill:"#323232","font-weight":"700",align:"middle",lineHeight:"125%",anchor:"middle",family:"微软雅黑",size:"14px",weight:"700","font-style":"",opacity:"1",y:"0.75",transform:"rotate(0)"}},[r("tspan",{attrs:{id:"SvgjsTspan1082",dy:"17",x:"49"}},[r("tspan",{staticStyle:{},attrs:{id:"SvgjsTspan1083"}},[t._v("release/3.3")])])])])]),r("g",{attrs:{id:"SvgjsG1084"}},[r("path",{attrs:{id:"SvgjsPath1085",d:"M223.0898770882842 233.50814421930653C 225.9561216427084 222.96760383605817 225.3804347826087 216.9670315068311 225.38437810353196 207.5999978403077",stroke:"#e57373","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1086)"}})]),r("g",{attrs:{id:"SvgjsG1088"}},[r("path",{attrs:{id:"SvgjsPath1089",d:"M144.5 56L144.5 40.5L144.5 40.5L144.5 25",stroke:"#64b5f6","stroke-width":"2",fill:"none","marker-end":"url(#SvgjsMarker1090)"}})])]),t._v(" "),r("p",{staticStyle:{"text-align":"center",color:"#888"}},[t._v("（浏览器可视区域的宽高）")])])])]),t._v(" "),r("h2",{attrs:{id:"总结"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),r("p",[t._v("Git 提供了丰富的分支策略和工作流方式，通过学习业界 Git 工作流，可以发现每种工作流都设计的非常好，似乎都能运用到团队实践。但在引入 Git 工作流规范开发时要留意：Git 工作流仅仅是整个研发流程中的一环。上游项目管理/缺陷追踪系统虎视眈眈，下游 CD (Continuous Delivery) 嗷嗷待哺，还得考虑团队规模、产品形态、发版方式等等因素。因此，在团队中落地 Git 工作流规范并不是一件能轻松决定的事。")]),t._v(" "),r("p",[t._v("选择的策略不同，研发效率也不同，没有最好的工作流策略，只有最适合团队的工作流策略，Git工作流中常见的三种分支策略及其优缺点在上面已经列出，可以根据团队具体情况，选择合适的分支策略进行开发。")]),t._v(" "),r("p",[t._v("（完）")])])}),[],!1,null,null,null);e.default=i.exports}}]);