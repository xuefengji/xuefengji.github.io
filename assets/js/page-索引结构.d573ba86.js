(window.webpackJsonp=window.webpackJsonp||[]).push([[317],{1140:function(v,t,_){"use strict";_.r(t);var s=_(1),a=Object(s.a)({},(function(){var v=this,t=v.$createElement,s=v._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[s("h1",{attrs:{id:"索引结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#索引结构"}},[v._v("#")]),v._v(" 索引结构")]),v._v(" "),s("p",[v._v("先来看个例子：")]),v._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[v._v("# 建表\ncreate table t_emp(id int primary key,name varchar(20),age int);\n\n# 插入数据\ninsert into t_emp values(5,'d',22);\ninsert into t_emp values(6,'d',23);\ninsert into t_emp values(4,'e',25);\ninsert into t_emp values(1,'a',24);\ninsert into t_emp values(2,'b',26);\ninsert into t_emp values(3,'f',22);\n\n# 查询数据\nselect * from t_emp\n")])]),v._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[v._v("1")]),s("br"),s("span",{staticClass:"line-number"},[v._v("2")]),s("br"),s("span",{staticClass:"line-number"},[v._v("3")]),s("br"),s("span",{staticClass:"line-number"},[v._v("4")]),s("br"),s("span",{staticClass:"line-number"},[v._v("5")]),s("br"),s("span",{staticClass:"line-number"},[v._v("6")]),s("br"),s("span",{staticClass:"line-number"},[v._v("7")]),s("br"),s("span",{staticClass:"line-number"},[v._v("8")]),s("br"),s("span",{staticClass:"line-number"},[v._v("9")]),s("br"),s("span",{staticClass:"line-number"},[v._v("10")]),s("br"),s("span",{staticClass:"line-number"},[v._v("11")]),s("br"),s("span",{staticClass:"line-number"},[v._v("12")]),s("br"),s("span",{staticClass:"line-number"},[v._v("13")]),s("br")])]),s("p",[v._v("查询结果中发现，数据根据主键索引排序了")]),v._v(" "),s("table",[s("thead",[s("tr",[s("th",[v._v("id")]),v._v(" "),s("th",[v._v("name")]),v._v(" "),s("th",[v._v("age")])])]),v._v(" "),s("tbody",[s("tr",[s("td",[v._v("1")]),v._v(" "),s("td",[v._v("a")]),v._v(" "),s("td",[v._v("24")])]),v._v(" "),s("tr",[s("td",[v._v("2")]),v._v(" "),s("td",[v._v("b")]),v._v(" "),s("td",[v._v("26")])]),v._v(" "),s("tr",[s("td",[v._v("3")]),v._v(" "),s("td",[v._v("f")]),v._v(" "),s("td",[v._v("22")])]),v._v(" "),s("tr",[s("td",[v._v("4")]),v._v(" "),s("td",[v._v("e")]),v._v(" "),s("td",[v._v("25")])]),v._v(" "),s("tr",[s("td",[v._v("5")]),v._v(" "),s("td",[v._v("d")]),v._v(" "),s("td",[v._v("22")])]),v._v(" "),s("tr",[s("td",[v._v("6")]),v._v(" "),s("td",[v._v("d")]),v._v(" "),s("td",[v._v("23")])])])]),v._v(" "),s("p",[s("strong",[v._v("排序的目的")]),v._v("：为了快速查询")]),v._v(" "),s("h2",{attrs:{id:"索引原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#索引原理"}},[v._v("#")]),v._v(" 索引原理")]),v._v(" "),s("p",[v._v("根据上面的例子，数据的存储结构图：")]),v._v(" "),s("p",[s("img",{attrs:{src:_(603),alt:"index"}})]),v._v(" "),s("p",[s("strong",[v._v("优点")]),v._v("：")]),v._v(" "),s("ul",[s("li",[v._v("每一块都含有 id、数据、指针(磁盘地址信息)")]),v._v(" "),s("li",[v._v("根据指针将数据按顺序链接起来")]),v._v(" "),s("li",[v._v("查询数据的时候就比较快")])]),v._v(" "),s("p",[s("strong",[v._v("缺点")]),v._v("：")]),v._v(" "),s("ul",[s("li",[v._v("如果在数据量特别大的时候，比如查询第 1w 条数据，那就要查询 1w 次")]),v._v(" "),s("li",[v._v("排序链表的时间复杂度(On)非常大")])]),v._v(" "),s("p",[v._v("针对上面的缺点，MySQL 进行了优化，基于"),s("strong",[v._v("页的管理")]),v._v("：")]),v._v(" "),s("p",[s("img",{attrs:{src:_(604),alt:"index"}})]),v._v(" "),s("ul",[s("li",[v._v("将链表进行分页管理，InnoDB 中默认每页存储 16KB")]),v._v(" "),s("li",[v._v("生成页目录管理")]),v._v(" "),s("li",[v._v("页目录中存储每一页的第一个 id 值和指针")]),v._v(" "),s("li",[v._v("页目录中的指针指向每一页的数据")]),v._v(" "),s("li",[v._v("进行数据匹配时，会先在页目录中匹配在哪页，然后去相应的页中匹配数据")]),v._v(" "),s("li",[v._v("页目录中也是页，每一页也是 16KB，如果数据太多，也可以分页向上在来一层")])]),v._v(" "),s("p",[v._v("这种多层级的由上而下的就是 "),s("strong",[v._v("B+树")])]),v._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[v._v("注意")]),v._v(" "),s("ul",[s("li",[v._v("一般 MySQL 的树 2~4 层")]),v._v(" "),s("li",[v._v("如果达到三层，就能存储 10亿 左右的数据")])])]),v._v(" "),s("p",[v._v("我们可以算下上面 t_emp 的数据量：")]),v._v(" "),s("p",[v._v("int 类型：4 个字节")]),v._v(" "),s("p",[v._v("vachar 类型：20 个字节")]),v._v(" "),s("p",[v._v("指针：4~8 个字节")]),v._v(" "),s("p",[v._v("一条数据的字节数：4+20+4+8=36")]),v._v(" "),s("p",[v._v("一页的数据条数：16KB * 1024 / 36 = 455")]),v._v(" "),s("p",[v._v("页目录中的一页的页数：16KB * 1024 / 12 = 1368")]),v._v(" "),s("p",[v._v("一页的数据量：1368 * 455 = 622440")]),v._v(" "),s("h2",{attrs:{id:"b-树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#b-树"}},[v._v("#")]),v._v(" B+树")]),v._v(" "),s("p",[s("strong",[v._v("B+树")]),v._v("：")]),v._v(" "),s("ul",[s("li",[v._v("B+树是在 B树的基础上的一种优化")]),v._v(" "),s("li",[v._v("只有叶子节点才存储数据，非叶子节点不存储数据，减少树的深度")])]),v._v(" "),s("p",[s("strong",[v._v("B树")]),v._v("：")]),v._v(" "),s("ul",[s("li",[v._v("无论是叶子还是非叶子节点都存储数据")]),v._v(" "),s("li",[v._v("页目录上存储数据后会使得页数变少，同样的数据量会使得树的深度更深")])]),v._v(" "),s("div",{staticClass:"custom-block danger"},[s("p",{staticClass:"custom-block-title"},[v._v("重点")]),v._v(" "),s("ul",[s("li",[v._v("MySQL 会将树根常驻内存，加快查询速度")]),v._v(" "),s("li",[v._v("查找某一键值的行记录时最多只需要 1~3 次 I/O 操作")]),v._v(" "),s("li",[v._v("非聚簇索引(非主键索引)在查询数据时，会先根据索引查相应数据的 id ，然后再根据主键索引查询\n"),s("ul",[s("li",[v._v("比如根据 name 索引查询数据，会先在 name 索引结构中查询到相应列在索引中的 id")]),v._v(" "),s("li",[v._v("根据 id 去主键索引中查询，相应的数据")])])]),v._v(" "),s("li",[v._v("主键索引使用 int 类型的原因就是 int 类型能排序")])])]),v._v(" "),s("h2",{attrs:{id:"参考文档"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[v._v("#")]),v._v(" 参考文档")]),v._v(" "),s("p",[s("a",{attrs:{href:"https://www.bilibili.com/video/BV19y4y127h4?p=2",target:"_blank",rel:"noopener noreferrer"}},[v._v("索引结构"),s("OutboundLink")],1),v._v(")")]),v._v(" "),s("p",[v._v("（完）")])])}),[],!1,null,null,null);t.default=a.exports},603:function(v,t,_){v.exports=_.p+"assets/img/index1.05754b31.png"},604:function(v,t,_){v.exports=_.p+"assets/img/index2.48c41a4b.png"}}]);