(window.webpackJsonp=window.webpackJsonp||[]).push([[187],{1244:function(t,s,a){"use strict";a.r(s);var e=a(1),r=Object(e.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"pytest-rerunfailures"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pytest-rerunfailures"}},[t._v("#")]),t._v(" pytest-rerunfailures")]),t._v(" "),a("p",[t._v("用于对失败用例进行重跑的插件")]),t._v(" "),a("h2",{attrs:{id:"环境要求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境要求"}},[t._v("#")]),t._v(" 环境要求")]),t._v(" "),a("ul",[a("li",[t._v("Python 3.5, 最高 3.8, or PyPy3")]),t._v(" "),a("li",[t._v("pytest 5.0 或更高版本")])]),t._v(" "),a("h2",{attrs:{id:"安装"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("pip install pytest"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("rerunfailures\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h2",{attrs:{id:"pytest-rerunfailures-使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pytest-rerunfailures-使用"}},[t._v("#")]),t._v(" pytest-rerunfailures 使用")]),t._v(" "),a("p",[t._v("有两种方式：")]),t._v(" "),a("ul",[a("li",[t._v("命令行模式")]),t._v(" "),a("li",[t._v("装饰器模式")])]),t._v(" "),a("h3",{attrs:{id:"命令行模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命令行模式"}},[t._v("#")]),t._v(" 命令行模式")]),t._v(" "),a("h4",{attrs:{id:"运行所有失败用例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#运行所有失败用例"}},[t._v("#")]),t._v(" 运行所有失败用例")]),t._v(" "),a("p",[t._v("使用 "),a("code",[t._v("--reruns")]),t._v(" 需要指定最大运行次数")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("pytest "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("reruns "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("s\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("运行失败的 fixture 或 "),a("code",[t._v("setup_class")]),t._v(" 也会重新执行")])]),t._v(" "),a("p",[t._v("要在两次之间增加延迟时间，使用 "),a("code",[t._v("--reruns-delay")]),t._v(" 其中包含了希望在下一次测试重新开始之前等待的时间")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[t._v("pytest "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("reruns "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("reruns"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("delay "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("s\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h3",{attrs:{id:"装饰器模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#装饰器模式"}},[t._v("#")]),t._v(" 装饰器模式")]),t._v(" "),a("h4",{attrs:{id:"重新运行指定的测试用例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#重新运行指定的测试用例"}},[t._v("#")]),t._v(" 重新运行指定的测试用例")]),t._v(" "),a("p",[t._v("要将单个测试用例添加 flaky 装饰器 "),a("code",[t._v("@pytest.mark.flaky(reruns=5)")]),t._v("，并在测试失败时自动重新运行，需要指定最大重新运行的次数")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" pytest\n"),a("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@pytest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mark"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flaky")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reruns"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_example")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" random\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" random"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("choice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("也可以指定重新运行的等待时间")]),t._v(" "),a("div",{staticClass:"language-python line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-python"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" pytest\n"),a("span",{pre:!0,attrs:{class:"token decorator annotation punctuation"}},[t._v("@pytest"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mark"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("flaky")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reruns"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" reruns_delay"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test_example")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" random\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("assert")]),t._v(" random"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("choice"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("True")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("False")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("如果使用装饰器形式指定了用例的重新运行次数，则在命令行添加 "),a("code",[t._v("--reruns")]),t._v(" 对这些用例是不会生效的")])]),t._v(" "),a("h2",{attrs:{id:"兼容性问题"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#兼容性问题"}},[t._v("#")]),t._v(" 兼容性问题")]),t._v(" "),a("ul",[a("li",[t._v("不可以与 fixture 装饰器一起使用："),a("code",[t._v("@pytest.fixture()")])]),t._v(" "),a("li",[t._v("该插件与 pytest-xdist 的 "),a("code",[t._v("--looponfail")]),t._v(" 标志不兼容")]),t._v(" "),a("li",[t._v("该插件在使用"),a("code",[t._v("--pdb")]),t._v("调试时候会有不兼容性")])]),t._v(" "),a("h2",{attrs:{id:"参考资料"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/pytest-dev/pytest-rerunfailures",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档:pytest-rerunfailures"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("（完）")])])}),[],!1,null,null,null);s.default=r.exports}}]);