(window.webpackJsonp=window.webpackJsonp||[]).push([[345],{1144:function(s,t,a){"use strict";a.r(t);var e=a(1),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"连接查询语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#连接查询语法"}},[s._v("#")]),s._v(" 连接查询语法")]),s._v(" "),a("p",[s._v("连接查询就是把各个表中的记录都取出来，组成新的更大的记录，这个组合后的结果集可以方便我们分析数据，就不用老是两个表对照着看了")]),s._v(" "),a("h2",{attrs:{id:"基本语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本语法"}},[s._v("#")]),s._v(" 基本语法")]),s._v(" "),a("blockquote",[a("p",[s._v("下面用 "),a("code",[s._v("t1")]),s._v(" 和 "),a("code",[s._v("t2")]),s._v(" 分别指代两张表的名字，"),a("code",[s._v("m")]),s._v(" 和 "),a("code",[s._v("n")]),s._v(" 指代表中的列名")])]),s._v(" "),a("p",[s._v("在 MySQL 中，连接查询的语法是在 "),a("code",[s._v("FROM")]),s._v(" 语句后边用多个用逗号 "),a("code",[s._v(",")]),s._v(" 隔开表名，就像这样：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" t2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("查询列表处的 "),a("code",[s._v("*")]),s._v(" 代表从 "),a("code",[s._v("FROM")]),s._v(" 语句后列出的表中选取每个列，也可以指定需要查询出来的列名：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("m1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" t2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("m2 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" t2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("或者查询某张表的全部列，另一张表的指定列：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" t2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("m2 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" t2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("携带过滤条件的连接查询：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" t2 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("m1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("m1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" t2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("m2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("AND")]),s._v(" t2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("n2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("'d'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("在上面这个两表连接查询中，假定把 "),a("code",[s._v("t1")]),s._v(" 表作为第一个需要查询的表，于是它称之为 "),a("code",[s._v("驱动表")]),s._v("，相应的 "),a("code",[s._v("t2")]),s._v(" 表称之为 "),a("code",[s._v("被驱动表")]),s._v("。在执行过程中，会先在 "),a("code",[s._v("t1")]),s._v(" 表中找出所有满足条件的记录，对于获取到的每一条记录，都需要到 "),a("code",[s._v("t2")]),s._v(" 表中查找匹配的记录")]),s._v(" "),a("p",[s._v("因此"),a("strong",[s._v("在两表连接查询中，驱动表只需要查询一次，被驱动表可能会被查询多次")])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("小贴士")]),s._v(" "),a("p",[s._v("上面这种连接查询有个特点，就是如果 "),a("code",[s._v("t1")]),s._v("（驱动表）中查出来的记录，在 "),a("code",[s._v("t2")]),s._v("（被驱动表）中没有对应的记录，就直接不显示到结果集了")]),s._v(" "),a("p",[s._v("那么如果换个需求：驱动表中的记录即使在被驱动表中没有匹配的记录，也仍然需要加入到结果集。为了解决这个问题，就有了内连接和外连接的概念")])]),s._v(" "),a("h2",{attrs:{id:"内连接和外连接"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内连接和外连接"}},[s._v("#")]),s._v(" 内连接和外连接")]),s._v(" "),a("h3",{attrs:{id:"区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#区别"}},[s._v("#")]),s._v(" 区别")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("对于内连接的两个表")]),s._v("，驱动表中的记录在被驱动表中找不到匹配的记录，该记录不会加入到最后的结果集，前面提到的连接都是所谓的内连接")]),s._v(" "),a("li",[a("strong",[s._v("对于外连接的两个表")]),s._v("，驱动表中的记录即使在被驱动表中没有匹配的记录，也仍然需要加入到结果集")])]),s._v(" "),a("p",[s._v("在 MySQL 中，根据选取驱动表的不同，外连接可以细分为 2 种：")]),s._v(" "),a("ul",[a("li",[s._v("左外连接：选取左侧的表为驱动表")]),s._v(" "),a("li",[s._v("右外连接：选取右侧的表为驱动表")])]),s._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[s._v("小贴士")]),s._v(" "),a("p",[s._v("左外连接和右外连接可以简称左连接和右连接")])]),s._v(" "),a("h3",{attrs:{id:"where-和-on-子句"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#where-和-on-子句"}},[s._v("#")]),s._v(" WHERE 和 ON 子句")]),s._v(" "),a("p",[s._v("即使对于外连接来说，有时候我们也并不想把驱动表的全部记录都加入到最后的结果集。于是过滤条件的写法除了 "),a("code",[s._v("WHERE")]),s._v(" 子句，又引入了 "),a("code",[s._v("ON")]),s._v(" 子句")]),s._v(" "),a("ul",[a("li",[a("p",[a("code",[s._v("WHERE")]),s._v(" 子句中的过滤条件")]),s._v(" "),a("p",[a("code",[s._v("WHERE")]),s._v(" 子句中的过滤条件就是我们平时见的那种，不论是内连接还是外连接，凡是不符合 "),a("code",[s._v("WHERE")]),s._v(" 子句中的过滤条件的记录都不会被加入最后的结果集")])]),s._v(" "),a("li",[a("p",[a("code",[s._v("ON")]),s._v(" 子句中的过滤条件")]),s._v(" "),a("p",[s._v("对于外连接的驱动表的记录来说，如果无法在被驱动表中找到匹配 "),a("code",[s._v("ON")]),s._v(" 子句中的过滤条件的记录，那么该记录仍然会被加入到结果集中，对应的被驱动表记录的各个字段使用 "),a("code",[s._v("NULL")]),s._v(" 值填充")])])]),s._v(" "),a("p",[s._v("需要注意的是，这个 "),a("code",[s._v("ON")]),s._v(" 子句是专门为外连接驱动表中的记录在被驱动表找不到匹配记录时应不应该把该记录加入结果集这个场景下提出的，所以如果把 "),a("code",[s._v("ON")]),s._v(" 子句放到内连接中，MySQL 会把它和 WHERE 子句一样对待，也就是说："),a("strong",[s._v("内连接中的 "),a("code",[s._v("WHERE")]),s._v(" 子句和 "),a("code",[s._v("ON")]),s._v(" 子句是等价的")])]),s._v(" "),a("p",[s._v("一般情况下，我们都把只涉及单表的过滤条件放到 "),a("code",[s._v("WHERE")]),s._v(" 子句中，把涉及两表的过滤条件都放到 "),a("code",[s._v("ON")]),s._v(" 子句中，我们也一般把放到 "),a("code",[s._v("ON")]),s._v(" 子句中的过滤条件也称之为"),a("strong",[s._v("连接条件")])]),s._v(" "),a("h3",{attrs:{id:"左-外-连接的语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#左-外-连接的语法"}},[s._v("#")]),s._v(" 左（外）连接的语法")]),s._v(" "),a("h4",{attrs:{id:"语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法"}},[s._v("#")]),s._v(" 语法：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" t1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LEFT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OUTER")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" t2 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" 连接条件 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" 普通过滤条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("中括号里的 "),a("code",[s._v("OUTER")]),s._v(" 单词是可以省略的")]),s._v(" "),a("li",[s._v("对于 "),a("code",[s._v("LEFT JOIN")]),s._v(" 类型的连接来说，放在左边的表称之为外表或者驱动表，右边的表称之为内表或者被驱动表")]),s._v(" "),a("li",[s._v("对于左连接和右连接来说，必须使用 "),a("code",[s._v("ON")]),s._v(" 子句来指出连接条件")])]),s._v(" "),a("h4",{attrs:{id:"示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例"}},[s._v("#")]),s._v(" 示例：")]),s._v(" "),a("p",[s._v("要求把所有的学生的成绩信息都查询出来，即使是缺考的考生也应该被放到结果集中（这里用到了"),a("RouterLink",{attrs:{to:"/basic-skills/mysql/data-insert-delete-update/"}},[s._v("数据的增删改")]),s._v("里插入的表和数据）")],1),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v("mysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" student_info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" major"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" subject"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" score "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" student_info "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LEFT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" student_score "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" student_info"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("number "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" student_score"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----------+-----------+--------------------------+--------------+-------+")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" number   "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" name      "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" major                    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" subject      "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" score "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----------+-----------+--------------------------+--------------+-------+")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20220101")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 张星星    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 计算机科学与工程         "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 大学英语     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("88")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20220101")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 张星星    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 计算机科学与工程         "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 高等数学     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("78")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20220102")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 王二狗    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 计算机科学与工程         "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 大学英语     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("98")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20220102")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 王二狗    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 计算机科学与工程         "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 高等数学     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("   "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20220103")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 陈珊珊    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 软件工程                 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 大学英语     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("61")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20220103")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 陈珊珊    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 软件工程                 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 高等数学     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("59")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20220104")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 李思思    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 软件工程                 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 大学英语     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("46")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20220104")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 李思思    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 软件工程                 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 高等数学     "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("    "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("55")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20220105")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 孙小武    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 飞行器设计               "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20220106")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 刘大彪    "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" 电子信息                 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v("         "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("  "),a("span",{pre:!0,attrs:{class:"token boolean"}},[s._v("NULL")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("----------+-----------+--------------------------+--------------+-------+")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("rows")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("in")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("set")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.00")]),s._v(" sec"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n\nmysql"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("p",[s._v("从结果集中可以看出来，虽然 "),a("code",[s._v("孙小武")]),s._v(" 和 "),a("code",[s._v("刘大彪")]),s._v(" 并没有对应的成绩记录，但是由于采用的是连接类型为左（外）连接，所以仍然把它放到了结果集中，只不过在对应的成绩记录的各列使用了 "),a("code",[s._v("NULL")]),s._v(" 值填充")]),s._v(" "),a("h3",{attrs:{id:"右-外-连接的语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#右-外-连接的语法"}},[s._v("#")]),s._v(" 右（外）连接的语法")]),s._v(" "),a("h4",{attrs:{id:"语法-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#语法-2"}},[s._v("#")]),s._v(" 语法：")]),s._v(" "),a("p",[s._v("右（外）连接和左（外）连接的原理是一样一样的，语法也只是把 "),a("code",[s._v("LEFT")]),s._v(" 换成 "),a("code",[s._v("RIGHT")]),s._v(" 而已")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" t1 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("RIGHT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("OUTER")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" t2 "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" 连接条件 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" 普通过滤条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("只不过驱动表是右边的表，被驱动表是左边的表，具体就不重复展开了")]),s._v(" "),a("h3",{attrs:{id:"内连接的语法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内连接的语法"}},[s._v("#")]),s._v(" 内连接的语法")]),s._v(" "),a("p",[s._v("内连接和外连接的根本区别就是在驱动表中的记录不符合 "),a("code",[s._v("ON")]),s._v(" 子句中的连接条件时不会把该记录加入到最后的结果集")]),s._v(" "),a("p",[s._v("本文一开始写的连接查询都是内连接，不过之前仅仅提到了一种最简单的内连接语法，就是直接把需要连接的多个表都放到 "),a("code",[s._v("FROM")]),s._v(" 子句后边")]),s._v(" "),a("p",[s._v("其实针对内连接，MySQL 提供了好多不同的语法，以 "),a("code",[s._v("t1")]),s._v(" 和 "),a("code",[s._v("t2")]),s._v(" 表为例：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" t1 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("INNER")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("CROSS")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("JOIN")]),s._v(" t2 "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ON")]),s._v(" 连接条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("WHERE")]),s._v(" 普通过滤条件"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("也就是说在 MySQL 中，下边这几种内连接的写法都是等价的：")]),s._v(" "),a("ul",[a("li",[a("code",[s._v("SELECT * FROM t1 JOIN t2;")])]),s._v(" "),a("li",[a("code",[s._v("SELECT * FROM t1 INNER JOIN t2;")])]),s._v(" "),a("li",[a("code",[s._v("SELECT * FROM t1 CROSS JOIN t2;")])])]),s._v(" "),a("p",[s._v("这些写法和直接把需要连接的表名放到 "),a("code",[s._v("FROM")]),s._v(" 语句之后，用逗号 "),a("code",[s._v(",")]),s._v(" 分隔开的写法也是等价的：")]),s._v(" "),a("div",{staticClass:"language-sql line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-sql"}},[a("code",[s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" t1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" t2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("虽然有多种内连接的书写方式，不过还是推荐 "),a("code",[s._v("INNER JOIN")]),s._v(" 的形式书写内连接（因为语义很明确，可以和 "),a("code",[s._v("LEFT JOIN")]),s._v(" 及 "),a("code",[s._v("RIGHT JOIN")]),s._v(" 很轻松地区分开）")]),s._v(" "),a("p",[s._v("由于在内连接中 "),a("code",[s._v("ON")]),s._v(" 子句和 "),a("code",[s._v("WHERE")]),s._v(" 子句是等价的，所以内连接中不强制要求写明 "),a("code",[s._v("ON")]),s._v(" 子句")]),s._v(" "),a("h2",{attrs:{id:"总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[s._v("#")]),s._v(" 总结")]),s._v(" "),a("p",[s._v("连接的本质就是把各个连接表中的记录都取出来，将依次匹配的组合加入结果集并返回给用户。不论哪个表作为驱动表，两表连接产生的结果集数量肯定是一样的")]),s._v(" "),a("p",[s._v("而对于内连接来说，由于凡是不符合 "),a("code",[s._v("ON")]),s._v(" 子句或 "),a("code",[s._v("WHERE")]),s._v(" 子句中的条件的记录都会被过滤掉，其实也就相当于从两表连接的结果集中把不符合过滤条件的记录给踢出去，所以对于内连接来说，驱动表和被驱动表是可以互换的，并不会影响最后的查询结果")]),s._v(" "),a("p",[s._v("但是对于外连接来说，由于驱动表中的记录即使在被驱动表中找不到符合 "),a("code",[s._v("ON")]),s._v(" 子句连接条件的记录也会被加入结果集，所以此时驱动表和被驱动表的关系就很重要了，也就是说左外连接和右外连接的驱动表和被驱动表不能轻易互换")]),s._v(" "),a("p",[s._v("（完）")])])}),[],!1,null,null,null);t.default=r.exports}}]);