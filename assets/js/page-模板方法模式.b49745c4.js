(window.webpackJsonp=window.webpackJsonp||[]).push([[177],{584:function(t,s,a){t.exports=a.p+"assets/img/make-drinks.822b995e.jpg"},585:function(t,s,a){t.exports=a.p+"assets/img/template-method-pattern.42a68e8e.jpg"},848:function(t,s,a){"use strict";a.r(s);var n=a(1),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"模板方法模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模板方法模式"}},[t._v("#")]),t._v(" 模板方法模式")]),t._v(" "),n("h2",{attrs:{id:"介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#介绍"}},[t._v("#")]),t._v(" 介绍")]),t._v(" "),n("p",[t._v("模板方法模式（Template Method Pattern）父类中定义一组操作算法骨架，而将一些实现步骤延迟到子类中，使得子类可以不改变父类的算法结构的同时，重新定义算法中的某些实现步骤。模板方法模式的关键是"),n("strong",[t._v("算法步骤的骨架和具体实现分离")]),t._v("。")]),t._v(" "),n("h2",{attrs:{id:"通俗的示例"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#通俗的示例"}},[t._v("#")]),t._v(" 通俗的示例")]),t._v(" "),n("p",[t._v("这里举个经典的咖啡厅例子，咖啡厅制作饮料的过程有一些类似的步骤：")]),t._v(" "),n("ol",[n("li",[t._v("先把水煮沸")]),t._v(" "),n("li",[t._v("冲泡饮料（咖啡、茶、牛奶）")]),t._v(" "),n("li",[t._v("倒进杯子中")]),t._v(" "),n("li",[t._v("最后加一些调味料（咖啡伴侣、枸杞、糖）")])]),t._v(" "),n("p",[t._v("无论冲饮的是咖啡、茶、牛奶，他们的制作过程都类似，可以被总结为这几个流程。也就是说这个流程是存在着类似的流程结构的，这就给我们留下了将操作流程抽象封装出来的余地。")]),t._v(" "),n("div",{staticStyle:{"text-align":"center"}},[n("img",{attrs:{src:a(584),alt:"制作饮料步骤图"}}),t._v(" "),n("p",{staticStyle:{"text-align":"center",color:"#888"}},[t._v("（制作饮料步骤图）")])]),t._v(" "),n("p",[t._v("再举个例子，做菜的过程也可以被总结为固定的几个步骤：")]),t._v(" "),n("ol",[n("li",[t._v("准备食材（肉、蔬菜、菌菇）")]),t._v(" "),n("li",[t._v("食材放到锅里")]),t._v(" "),n("li",[t._v("放调味料（糖、盐、油）")]),t._v(" "),n("li",[t._v("炒菜")]),t._v(" "),n("li",[t._v("倒到容器里（盘子、碗）")])]),t._v(" "),n("p",[t._v("在类似的场景中，这些例子都有这些特点：")]),t._v(" "),n("ul",[n("li",[t._v("有一个基本的操作流程，这个流程我们可以抽象出来，由具体实例的操作流程来实现，比如做咖啡的时候冲泡的就是咖啡，做茶的时候冲泡的就是茶。")]),t._v(" "),n("li",[t._v("一些共用的流程，就可以使用通用的公共步骤，比如把水煮沸，比如将食材放到锅里，这样的共用流程就可以共用一个具体方法就可以了。")])]),t._v(" "),n("h2",{attrs:{id:"模板方法模式的通用实现"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模板方法模式的通用实现"}},[t._v("#")]),t._v(" 模板方法模式的通用实现")]),t._v(" "),n("p",[t._v("根据上面的例子，我们可以提炼一下模板方法模式。饮料类可以被认为是父类（AbstractClass），父类中实现了模板方法（templateMethod），模板方法中抽象了操作的流程，共用的操作流程是普通方法，而非共用的可变方法是抽象方法，需要被子类（ConcreteClass）实现，或者说覆盖，子类在实例化后执行模板方法，就可以按照模板方法定义好的算法一步步执行。主要有下面几个概念：")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("AbstractClass")]),t._v("：抽象父类，把一些共用的方法提取出来，把可变的方法作为抽象类，最重要的是把算法骨架抽象出来为模板方法。")]),t._v(" "),n("li",[n("strong",[t._v("templateMethod")]),t._v("：模板方法，固定了希望执行的算法骨架。")]),t._v(" "),n("li",[n("strong",[t._v("ConcreteClass")]),t._v("：子类，实现抽象父类中定义的抽象方法，调用继承的模板方法时，将执行模板方法中定义的算法流程。")])]),t._v(" "),n("p",[t._v("结构如下：")]),t._v(" "),n("div",{staticStyle:{"text-align":"center"}},[n("img",{attrs:{src:a(585),alt:"模板方法模式结构图"}}),t._v(" "),n("p",{staticStyle:{"text-align":"center",color:"#888"}},[t._v("（模板方法模式结构图）")])]),t._v(" "),n("p",[t._v("代码如下：")]),t._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 抽象父类 */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbstractClass")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v(" AbstractClass"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'抽象类不能直接实例化!'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 共用方法 */")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("operate1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'operate1'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 抽象方法 */")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("operate2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Error")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'抽象方法不能调用!'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 模板方法 */")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("templateMethod")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("operate1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("operate2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 实例子类，继承抽象父类 */")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConcreteClass")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("AbstractClass")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("constructor")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* 覆盖抽象方法 operate2 */")]),t._v("\n  "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("operate2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" console"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'operate2'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" instance "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConcreteClass")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ninstance"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("templateMethod")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出：operate1")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 输出：operate2")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br"),n("span",{staticClass:"line-number"},[t._v("19")]),n("br"),n("span",{staticClass:"line-number"},[t._v("20")]),n("br"),n("span",{staticClass:"line-number"},[t._v("21")]),n("br"),n("span",{staticClass:"line-number"},[t._v("22")]),n("br"),n("span",{staticClass:"line-number"},[t._v("23")]),n("br"),n("span",{staticClass:"line-number"},[t._v("24")]),n("br"),n("span",{staticClass:"line-number"},[t._v("25")]),n("br"),n("span",{staticClass:"line-number"},[t._v("26")]),n("br"),n("span",{staticClass:"line-number"},[t._v("27")]),n("br"),n("span",{staticClass:"line-number"},[t._v("28")]),n("br"),n("span",{staticClass:"line-number"},[t._v("29")]),n("br"),n("span",{staticClass:"line-number"},[t._v("30")]),n("br"),n("span",{staticClass:"line-number"},[t._v("31")]),n("br"),n("span",{staticClass:"line-number"},[t._v("32")]),n("br"),n("span",{staticClass:"line-number"},[t._v("33")]),n("br"),n("span",{staticClass:"line-number"},[t._v("34")]),n("br")])]),n("h2",{attrs:{id:"模板方法模式的优缺点"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模板方法模式的优缺点"}},[t._v("#")]),t._v(" 模板方法模式的优缺点")]),t._v(" "),n("p",[t._v("优点：")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("封装了不变部分，扩展可变部分")]),t._v("，把算法中不变的部分封装到父类中直接实现，而可变的部分由子类继承后再具体实现。")]),t._v(" "),n("li",[n("strong",[t._v("提取了公共代码部分，易于维护")]),t._v("，因为公共的方法被提取到了父类，那么如果我们需要修改算法中不变的步骤时，不需要到每一个子类中去修改，只要改一下对应父类即可。")]),t._v(" "),n("li",[n("strong",[t._v("行为被父类的模板方法固定")]),t._v("，子类实例只负责执行模板方法，具备可扩展性，符合开闭原则。")])]),t._v(" "),n("p",[t._v("缺点：")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("增加了系统复杂度")]),t._v("，主要是增加了的抽象类和类间联系，需要做好文档工作。")])]),t._v(" "),n("h2",{attrs:{id:"模板方法模式的适用场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模板方法模式的适用场景"}},[t._v("#")]),t._v(" 模板方法模式的适用场景")]),t._v(" "),n("ul",[n("li",[t._v("如果知道一个算法所需的关键步骤，而且"),n("strong",[t._v("很明确这些步骤的执行顺序，但是具体的实现是未知的、灵活的")]),t._v("，那么这时候就可以使用模板方法模式来"),n("strong",[t._v("将算法步骤的框架抽象出来")]),t._v("。")]),t._v(" "),n("li",[t._v("重要而复杂的算法，可以"),n("strong",[t._v("把核心算法逻辑设计为模板方法")]),t._v("，周边相关细节功能由各个子类实现。")]),t._v(" "),n("li",[t._v("模板方法模式可以被用来将"),n("strong",[t._v("子类组件将自己的方法挂钩到高层组件中")]),t._v("，也就是钩子，子类组件中的方法交出控制权，高层组件在模板方法中决定何时回调子类组件中的方法，类似的用法场景还有发布-订阅模式、回调函数。")])]),t._v(" "),n("h2",{attrs:{id:"其他相关模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#其他相关模式"}},[t._v("#")]),t._v(" 其他相关模式")]),t._v(" "),n("h3",{attrs:{id:"模板方法模式与工厂模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模板方法模式与工厂模式"}},[t._v("#")]),t._v(" 模板方法模式与工厂模式")]),t._v(" "),n("p",[t._v("模板方法模式的实现可以使用工厂模式来获取所需的对象。")]),t._v(" "),n("p",[t._v("另外，模板方法模式和抽象工厂模式比较类似，都是使用抽象类来提取公共部分，不一样的是：")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("适配器模式")]),t._v("：主要用来解决接口之间不匹配的问题，通常是为所适配的对象提供一个不同的接口。")]),t._v(" "),n("li",[n("strong",[t._v("代理模式")]),t._v("：提供访问目标对象的间接访问，以及对目标对象功能的扩展，一般提供和目标对象一样的接口。")])]),t._v(" "),n("h3",{attrs:{id:"代理模式与装饰器模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#代理模式与装饰器模式"}},[t._v("#")]),t._v(" 代理模式与装饰器模式")]),t._v(" "),n("p",[t._v("装饰器模式实现上和代理模式类似，都是在访问目标对象之前或者之后执行一些逻辑，但是目的和功能不同：")]),t._v(" "),n("ul",[n("li",[n("strong",[t._v("抽象工厂模式")]),t._v(" 提取的是实例的功能结构。")]),t._v(" "),n("li",[n("strong",[t._v("模板方法模式")]),t._v(" 提取的是算法的骨架结构。")])]),t._v(" "),n("h3",{attrs:{id:"模板方法模式与策略模式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#模板方法模式与策略模式"}},[t._v("#")]),t._v(" 模板方法模式与策略模式")]),t._v(" "),n("p",[t._v("参见策略模式介绍。")]),t._v(" "),n("p",[t._v("（完）")])])}),[],!1,null,null,null);s.default=e.exports}}]);