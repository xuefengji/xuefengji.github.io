(window.webpackJsonp=window.webpackJsonp||[]).push([[234],{856:function(t,v,r){"use strict";r.r(v);var _=r(1),a=Object(_.a)({},(function(){var t=this,v=t.$createElement,r=t._self._c||v;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"设计模式简介"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#设计模式简介"}},[t._v("#")]),t._v(" 设计模式简介")]),t._v(" "),r("p",[t._v("一共有 23 种设计模式，它们分为三种类型。")]),t._v(" "),r("blockquote",[r("p",[t._v("对于前端开发来说，并不是所有设计模式都是适合 JavaScript 的，需要重点的是工厂模式、单例模式、观察者模式。")]),t._v(" "),r("p",[t._v("因此，对于一些不那么常用的模式，了解一下，知道其主要思想即可。下面加粗的是前端常用的设计模式，未加粗的是前端不常用的设计模式。")])]),t._v(" "),r("h2",{attrs:{id:"创建型模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式"}},[t._v("#")]),t._v(" 创建型模式")]),t._v(" "),r("p",[t._v("创建型模式关注"),r("strong",[t._v("如何创建对象")]),t._v("，主要特点是将对象的创建和使用分离。一般抽象了对象实例化的过程，用来帮助创建对象的实例。")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("工厂模式")]),t._v("（Factory Pattern）\n"),r("ul",[r("li",[t._v("工厂方法模式（Factory Method Pattern）：根据输入的不同返回不同类的实例，一般用来创建同一类对象。")]),t._v(" "),r("li",[t._v("抽象工厂模式（Abstract Factory Pattern）：通过对类的工厂抽象，使其业务用于对产品类簇的创建。")]),t._v(" "),r("li",[t._v("建造者模式（Builder Pattern）：分步构建一个复杂对象，使得同样的构建过程可以采用不同的表示。")])])]),t._v(" "),r("li",[r("strong",[t._v("单例模式")]),t._v("（Singleton Pattern）：保证一个类只有一个实例，并提供一个访问它的全局访问点。")]),t._v(" "),r("li",[t._v("原型模式（Prototype Pattern）：已经在 JavaScript 内建的一种模式。")])]),t._v(" "),r("h2",{attrs:{id:"结构型模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#结构型模式"}},[t._v("#")]),t._v(" 结构型模式")]),t._v(" "),r("p",[t._v("结构型模式关注如何"),r("strong",[t._v("将对象按某种布局组成更大的结构")]),t._v("。")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("适配器模式")]),t._v("（Adapter Pattern）： 解决两个软件实体间接口不兼容的问题。")]),t._v(" "),r("li",[r("strong",[t._v("装饰器模式")]),t._v("（Decorator Pattern）：向一个现有的对象添加新的功能，同时又不改变其结构。")]),t._v(" "),r("li",[r("strong",[t._v("代理模式")]),t._v("（Proxy pattern）：为目标对象创造一个代理对象，以控制对目标对象的访问。")]),t._v(" "),r("li",[r("strong",[t._v("外观模式")]),t._v("（Facade Pattern）：为多个复杂的子系统提供一个一致的接口，使这些子系统更加容易被访问。")]),t._v(" "),r("li",[t._v("桥接模式（Bridge Pattern）：将类的抽象部分与实现部分分离，使它们可以独立地变化。")]),t._v(" "),r("li",[t._v("组合模式（Composite Pattern）：用小的子对象构建更大的对象，使得对单个对象和组合对象具有一致的访问性。")]),t._v(" "),r("li",[t._v("享元模式（Flyweight Pattern）：运用共享技术来有效地支持大量细粒度对象的复用，减少创建的对象的数量。")])]),t._v(" "),r("h2",{attrs:{id:"行为型模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#行为型模式"}},[t._v("#")]),t._v(" 行为型模式")]),t._v(" "),r("p",[t._v("行为型模式关注"),r("strong",[t._v("对象之间的通信")]),t._v("，描述对象之间怎样相互协作，以及怎样分配职责。")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("观察者模式")]),t._v("（Observer Pattern）：多个对象间存在一对多关系，当一个对象发生改变时，把这种改变通知给其他多个对象，从而影响其他对象的行为。")]),t._v(" "),r("li",[r("strong",[t._v("迭代器模式")]),t._v("（Iterator Pattern）：提供一种方法来顺序访问聚合对象中的一系列数据，而不暴露聚合对象的内部表示。")]),t._v(" "),r("li",[r("strong",[t._v("状态模式")]),t._v("（State Pattern）：允许一个对象在其内部状态发生改变时改变其行为能力。")]),t._v(" "),r("li",[t._v("策略模式（Strategy Pattern）：定义了一系列算法，并将每个算法封装起来，使它们可以相互替换。")]),t._v(" "),r("li",[t._v("模板方法模式（Template Method Pattern）：定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。")]),t._v(" "),r("li",[t._v("职责链模式（Chain of Responsibility Pattern）：把请求从链中的一个对象传到下一个对象，直到请求被响应为止。")]),t._v(" "),r("li",[t._v("命令模式（Command Pattern）：将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。")]),t._v(" "),r("li",[t._v("备忘录模式（Memento Pattern）：用于随时记录一个对象的状态变化，随时可以恢复之前的某个状态（如撤销功能）。")]),t._v(" "),r("li",[t._v("中介者模式（Mediator Pattern）：定义一个中介对象来简化原有对象之间的复杂耦合关系。")]),t._v(" "),r("li",[t._v("访问者模式（Visitor Pattern）：用于将数据操作和数据结构进行分离。")]),t._v(" "),r("li",[t._v("解释器模式（Interpreter Pattern）：用于描述语言语法如何定义，如何解释和编译")])]),t._v(" "),r("p",[t._v("（完）")])])}),[],!1,null,null,null);v.default=a.exports}}]);