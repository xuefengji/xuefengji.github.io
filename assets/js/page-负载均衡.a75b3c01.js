(window.webpackJsonp=window.webpackJsonp||[]).push([[248],{727:function(t,a,e){"use strict";e.r(a);var r=e(1),v=Object(r.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"负载均衡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡"}},[t._v("#")]),t._v(" 负载均衡")]),t._v(" "),e("h2",{attrs:{id:"前言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),e("p",[t._v("当一台服务器的性能达到极限时，我们可以使用服务器集群来提高网站的整体性能。那么，在服务器集群中，需要有一台服务器充当调度者的角色，用户的所有请求都会首先由它接收，调度者再根据每台服务器的负载情况将请求分配给某一台后端服务器去处理。")]),t._v(" "),e("p",[t._v("那么在这个过程中，调度者如何合理分配任务，保证所有后端服务器都将性能充分发挥，从而保持服务器集群的整体性能最优，这就是负载均衡问题。")]),t._v(" "),e("p",[t._v("负载均衡的实现方式可以依托于多种调度算法，常见的有：")]),t._v(" "),e("ul",[e("li",[t._v("轮循（Round Robin）")]),t._v(" "),e("li",[t._v("加权轮循（Weighted Round Robin）")]),t._v(" "),e("li",[t._v("最少连接数（Least Connection）")]),t._v(" "),e("li",[t._v("最少连接数慢启动时间（Least Connection Slow Start Time）")]),t._v(" "),e("li",[t._v("加权最少连接（Weighted Least Connection）")]),t._v(" "),e("li",[t._v("基于代理的自适应负载均衡（Agent Based Adaptive Balancing）")]),t._v(" "),e("li",[t._v("固定权重（Fixed Weighted）")]),t._v(" "),e("li",[t._v("加权响应（Weighted Response）")]),t._v(" "),e("li",[t._v("源IP哈希（Source IP Hash）")])]),t._v(" "),e("h2",{attrs:{id:"轮询"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#轮询"}},[t._v("#")]),t._v(" 轮询")]),t._v(" "),e("p",[t._v("这种方法会将收到的请求循环分配到服务器集群中的每台机器，即有效服务器。如果使用这种方式，所有的标记进入虚拟服务的服务器应该有相近的资源容量以及负载形同的应用程序。如果所有的服务器有相同或者相近的性能那么选择这种方式会使服务器负载形同。基于这个前提，轮循调度是一个简单而有效的分配请求的方式。然而对于服务器不同的情况，选择这种方式就意味着能力比较弱的服务器也会在下一轮循环中接受轮循，即使这个服务器已经不能再处理当前这个请求了。这可能导致能力较弱的服务器超载。")]),t._v(" "),e("h2",{attrs:{id:"加权轮循"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#加权轮循"}},[t._v("#")]),t._v(" 加权轮循")]),t._v(" "),e("p",[t._v("这种算法解决了简单轮循调度算法的缺点：传入的请求按顺序被分配到集群中服务器，但是会考虑提前为每台服务器分配的权重。管理员只是简单的通过服务器的处理能力来定义各台服务器的权重。例如，能力最强的服务器A给的权重是100，同时能力最低的服务器给的权重是 50。这意味着在服务器 B 接收到第一个请求之前前，服务器 A 会连续的接受到 2 个请求，以此类推。")]),t._v(" "),e("h2",{attrs:{id:"最少连接数"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#最少连接数"}},[t._v("#")]),t._v(" 最少连接数")]),t._v(" "),e("p",[t._v("以上两种方法都没有考虑的是系统不能识别在给定的时间里保持了多少连接。因此可能发生，服务器 B 服务器收到的连接比服务器 A 少但是它已经超载，因为服务器 B 上的用户打开连接持续的时间更长。这就是说连接数即服务器的负载是累加的。这种潜在的问题可以通过「最少连接数」算法来避免：传入的请求是根据每台服务器当前所打开的连接数来分配的。即活跃连接数最少的服务器会自动接收下一个传入的请求。接本上和简单轮询的原则相同：所有拥有虚拟服务的服务器资源容量应该相近。值得注意的是，在流量率低的配置环境中，各服务器的流量并不是相同的，会优先考虑第一台服务器。这是因为，如果所有的服务器是相同的，那么第一个服务器优先，直到第一台服务器有连续的活跃流量，否则总是会优先选择第一台服务器。")]),t._v(" "),e("h2",{attrs:{id:"最少连接数慢启动时间"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#最少连接数慢启动时间"}},[t._v("#")]),t._v(" 最少连接数慢启动时间")]),t._v(" "),e("p",[t._v("对最少连接数和带权重的最小连接数调度方法来说，当一个服务器刚加入线上环境是，可以为其配置一个时间段，在这段时间内连接数是有限制的而且是缓慢增加的。这为服务器提供了一个「过渡时间」以保证这个服务器不会因为刚启动后因为分配的连接数过多而超载。这个值在 L7 配置界面设置。")]),t._v(" "),e("h2",{attrs:{id:"加权最少连接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#加权最少连接"}},[t._v("#")]),t._v(" 加权最少连接")]),t._v(" "),e("p",[t._v("如果服务器的资源容量各不相同，那么「加权最少连接」方法更合适：由管理员根据服务器情况定制的权重所决定的活跃连接数一般提供了一种对服务器非常平衡的利用，因为他它借鉴了最少连接和权重两者的优势。通常，这是一个非常公平的分配方式，因为它使用了连接数和服务器权重比例；集群中比例最低的服务器自动接收下一个请求。但是请注意，在低流量情况中使用这种方法时，请参考「最小连接数」方法中的注意事项。")]),t._v(" "),e("h2",{attrs:{id:"基于代理的自适应负载均衡"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#基于代理的自适应负载均衡"}},[t._v("#")]),t._v(" 基于代理的自适应负载均衡")]),t._v(" "),e("p",[t._v("除了上述方法之外，负载主机包含一个自适用逻辑用来定时监测服务器状态和该服务器的权重。对于非常强大的「基于代理的自适应负载均衡」方法来说，负载主机以这种方式来定时检测所有服务器负载情况：每台服务器都必须提供一个包含文件，这个文件包含一个 0~99 的数字用来标明改服务器的实际负载情况（0=空前，99=超载，101=失败，102=管理员禁用），而服务器同构 http get 方法来获取这个文件；同时对集群中服务器来说，以二进制文件形式提供自身负载情况也是该服务器工作之一，然而，并没有限制服务器如何计算自身的负载情况。根据服务器整体负载情况，有两种策略可以选择：在常规的操作中，调度算法通过收集的服务器负载值和分配给该服务器的连接数的比例计算出一个权重比例。因此，如果一个服务器负载过大，权重会通过系统透明的作重新调整。和加权轮循调度方法一样，不正确的分配可以被记录下来使得可以有效的为不同服务器分配不同的权重。然而，在流量非常低的环境下，服务器报上来的负载值将不能建立一个有代表性的样本；那么基于这些值来分配负载的话将导致失控以及指令震荡。因此，在这种情况下更合理的做法是基于静态的权重比来计算负载分配。当所有服务器的负载低于管理员定义的下限时，负载主机就会自动切换为加权轮循方式来分配请求；如果负载大于管理员定义的下限，那么负载主机又会切换回自适应方式。")]),t._v(" "),e("h2",{attrs:{id:"固定权重"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#固定权重"}},[t._v("#")]),t._v(" 固定权重")]),t._v(" "),e("p",[t._v("最高权重只有在其他服务器的权重值都很低时才使用。然而，如果最高权重的服务器下降，则下一个最高优先级的服务器将为客户端服务。这种方式中每个真实服务器的权重需要基于服务器优先级来配置。")]),t._v(" "),e("h2",{attrs:{id:"加权响应"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#加权响应"}},[t._v("#")]),t._v(" 加权响应")]),t._v(" "),e("p",[t._v("流量的调度是通过加权轮循方式。加权轮循中所使用的权重是根据服务器有效性检测的响应时间来计算。每个有效性检测都会被计时，用来标记它响应成功花了多长时间。但是需要注意的是，这种方式假定服务器心跳检测是基于机器的快慢，但是这种假设也许不总是能够成立。所有服务器在虚拟服务上的响应时间的总和加在一起，通过这个值来计算单个服务物理服务器的权重；这个权重值大约每 15 秒计算一次。")]),t._v(" "),e("h2",{attrs:{id:"源ip哈希"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#源ip哈希"}},[t._v("#")]),t._v(" 源IP哈希")]),t._v(" "),e("p",[t._v("这种方式通过生成请求源IP的哈希值，并通过这个哈希值来找到正确的真实服务器。这意味着对于同一主机来说他对应的服务器总是相同。使用这种方式，你不需要保存任何源IP。但是需要注意，这种方式可能导致服务器负载不平衡。")]),t._v(" "),e("h2",{attrs:{id:"参考资料"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://www.runoob.com/w3cnote/balanced-algorithm.html",title:"负载均衡调度算法大全",target:"_blank",rel:"noopener noreferrer"}},[t._v("负载均衡调度算法大全"),e("OutboundLink")],1),t._v("（转载）")])]),t._v(" "),e("p",[t._v("（完）")])])}),[],!1,null,null,null);a.default=v.exports}}]);