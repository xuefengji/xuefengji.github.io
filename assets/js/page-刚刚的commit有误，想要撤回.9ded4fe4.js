(window.webpackJsonp=window.webpackJsonp||[]).push([[72],{639:function(t,s,e){"use strict";e.r(s);var a=e(1),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"刚刚的-commit-有误-想要撤回"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#刚刚的-commit-有误-想要撤回"}},[t._v("#")]),t._v(" 刚刚的 commit 有误，想要撤回")]),t._v(" "),e("h2",{attrs:{id:"问题描述"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#问题描述"}},[t._v("#")]),t._v(" 问题描述")]),t._v(" "),e("p",[t._v("出于某种原因，发现刚才的一次 "),e("code",[t._v("commit")]),t._v(" 是错的，需要回退到上一个 "),e("code",[t._v("commit")]),t._v(" 版本，进行修复后再重新 "),e("code",[t._v("commit")]),t._v("。")]),t._v(" "),e("p",[t._v("这里可以用到的有两个命令："),e("code",[t._v("git reset")]),t._v(" 和 "),e("code",[t._v("git revert")]),t._v("，它们的区别还挺大的。")]),t._v(" "),e("h2",{attrs:{id:"解决方案"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#解决方案"}},[t._v("#")]),t._v(" 解决方案")]),t._v(" "),e("h3",{attrs:{id:"方案一-git-reset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方案一-git-reset"}},[t._v("#")]),t._v(" 方案一：git reset")]),t._v(" "),e("p",[t._v("直接删除指定的 commit。")]),t._v(" "),e("p",[t._v("代码回滚中这个命令用的很多，而且是 "),e("code",[t._v("--hard")]),t._v(" 用的比较多：")]),t._v(" "),e("p",[e("code",[t._v("--hard")]),t._v("：硬性回滚，简单粗暴，直接抛弃上次提交后的所有本次修改，回滚到之前的样子。"),e("br"),t._v(" "),e("code",[t._v("--soft")]),t._v("：软性回滚，可以理解为撤销指定的 commit 记录。")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改版本库, 保留暂存区, 保留工作区")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 软回退表示将本地版本库的头指针全部重置到指定版本, 且将这次提交之后的所有变更都移动到暂存区")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将版本库软回退一个版本")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --soft HEAD~1 "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 或 git reset --soft HEAD^")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将版本库软回退 N 个版本")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --soft HEAD~N\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 修改版本库, 修改暂存区, 修改工作区")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 不仅仅是将本地版本库的头指针全部重置到指定版本, 也会重置暂存区, 并且会将工作区代码也回退到这个版本")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将版本库回退一个版本")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard HEAD^\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将版本库回退两个版本")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard HEAD^^\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 将版本库回退到特定的 commit-id 版本, 可以通过 git log 查看每次 commit 对应的 ID")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" reset --hard "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("commit-id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" \n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br"),e("span",{staticClass:"line-number"},[t._v("9")]),e("br"),e("span",{staticClass:"line-number"},[t._v("10")]),e("br"),e("span",{staticClass:"line-number"},[t._v("11")]),e("br"),e("span",{staticClass:"line-number"},[t._v("12")]),e("br"),e("span",{staticClass:"line-number"},[t._v("13")]),e("br"),e("span",{staticClass:"line-number"},[t._v("14")]),e("br"),e("span",{staticClass:"line-number"},[t._v("15")]),e("br")])]),e("p",[t._v("如果需要撤销已经 "),e("code",[t._v("push")]),t._v(" 到远端的 "),e("code",[t._v("commit")]),t._v("，使远端的仓库也回退到相应的版本，需要在 "),e("code",[t._v("push")]),t._v(" 时加上参数 "),e("code",[t._v("--force")]),t._v("：")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push origin "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("branch-name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" --force\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br")])]),e("h3",{attrs:{id:"方案二-git-revert"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#方案二-git-revert"}},[t._v("#")]),t._v(" 方案二：git revert")]),t._v(" "),e("p",[t._v("撤销某次操作，此次操作之前和之后的 commit 和 history 都会保留，并且把这次撤销作为一次最新的提交。")]),t._v(" "),e("div",{staticClass:"language-bash line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-bash"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 撤销前一次 commit")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" revert HEAD\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#  撤销前前一次 commit")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" revert HEAD^\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 撤销指定的版本，撤销动作本身也会作为一次提交进行保存")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" revert "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("commit-id"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])]),t._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[t._v("1")]),e("br"),e("span",{staticClass:"line-number"},[t._v("2")]),e("br"),e("span",{staticClass:"line-number"},[t._v("3")]),e("br"),e("span",{staticClass:"line-number"},[t._v("4")]),e("br"),e("span",{staticClass:"line-number"},[t._v("5")]),e("br"),e("span",{staticClass:"line-number"},[t._v("6")]),e("br"),e("span",{staticClass:"line-number"},[t._v("7")]),e("br"),e("span",{staticClass:"line-number"},[t._v("8")]),e("br")])]),e("p",[e("code",[t._v("git revert")]),t._v(" 是提交一个新的版本，将需要 revert 的版本的内容作为一次新的 "),e("code",[t._v("commit")]),t._v(" 再反向修改回去，版本会递增，不影响之前提交的内容。")]),t._v(" "),e("h2",{attrs:{id:"区别-revert-和-reset"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#区别-revert-和-reset"}},[t._v("#")]),t._v(" 区别：revert 和 reset")]),t._v(" "),e("ul",[e("li",[e("code",[t._v("git revert")]),t._v(" 是用一次新的 commit 来回滚之前的 commit，"),e("code",[t._v("git reset")]),t._v(" 是直接删除指定的 commit。")]),t._v(" "),e("li",[t._v("在回滚这一操作上看，效果差不多。但是在日后继续 merge 以前的老版本时有区别。因为 "),e("code",[t._v("git revert")]),t._v(" 是用一次逆向的 commit「中和」之前的提交，因此日后合并老的 branch 时，导致这部分改变不会再次出现，但是 "),e("code",[t._v("git reset")]),t._v(" 是直接把某些 commit 在某个 branch 上删除，因而和老的 branch 再次 merge 时，这些被回滚的 commit 应该还会被引入。")]),t._v(" "),e("li",[e("code",[t._v("git reset")]),t._v(" 是把 HEAD 向后移动了一下，而 "),e("code",[t._v("git revert")]),t._v(" 是 HEAD 继续前进，只是新的 commit 的内容和要 revert 的内容正好相反，能够抵消要被 revert 的内容。")])]),t._v(" "),e("h2",{attrs:{id:"总结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),e("ul",[e("li",[t._v("使用 reset 回退版本后，需要其他所有人手动用远程 master 分支覆盖本地 master 分支。显然，这不是优雅的回退方法。")]),t._v(" "),e("li",[t._v("使用 revert 撤销某次提交后，它会产生一个新的提交，虽然代码回退了，但是版本依然是向前的。所以当你用这种方式回退之后，其他人 pull 完，他们的代码也自动的回退了。")])]),t._v(" "),e("p",[t._v("相对之下，"),e("code",[t._v("git revert")]),t._v(" 更加优雅。但是，要注意以下几点：")]),t._v(" "),e("ul",[e("li",[t._v("revert 是撤销一次提交，所以后面的 commit-id 是你想要抵达的版本的后一次提交。")]),t._v(" "),e("li",[t._v("使用 "),e("code",[t._v("revert HEAD")]),t._v(" 是撤销最近的一次提交，如果你最近一次提交是用 revert 命令产生的，那么你再执行一次，就相当于撤销了上次的撤销操作，换句话说，你连续执行两次 "),e("code",[t._v("revert HEAD")]),t._v(" 命令，就跟没执行是一样的。")]),t._v(" "),e("li",[t._v("使用 "),e("code",[t._v("revert HEAD~1")]),t._v(" 表示撤销最近 2 次提交，这个数字是从 0 开始的，如果你之前撤销过产生了 commit-id，那么也会计算在内的；")]),t._v(" "),e("li",[t._v("如果使用 revert 撤销的不是最近一次提交，那么一定会有代码冲突，需要你合并代码，合并代码只需要把当前的代码全部去掉，保留之前版本的代码就可以了。")])]),t._v(" "),e("p",[e("code",[t._v("git revert")]),t._v(" 命令的好处就是不会丢掉别人的提交，即使你撤销后覆盖了别人的提交，他更新代码后，可以在本地用 reset 向前回滚，找到自己的代码，然后拉一下分支，再回来合并上去就可以找回被你覆盖的提交了。")]),t._v(" "),e("p",[t._v("（完）")])])}),[],!1,null,null,null);s.default=r.exports}}]);