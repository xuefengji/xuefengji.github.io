(window.webpackJsonp=window.webpackJsonp||[]).push([[217],{847:function(t,a,r){"use strict";r.r(a);var e=r(1),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"访问者模式和解释器模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#访问者模式和解释器模式"}},[t._v("#")]),t._v(" 访问者模式和解释器模式")]),t._v(" "),r("h2",{attrs:{id:"访问者模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#访问者模式"}},[t._v("#")]),t._v(" 访问者模式")]),t._v(" "),r("p",[t._v("访问者模式（Visitor Pattern）的概念是将数据操作和数据结构进行分离，但不管是前端还是后端，使用场景都不多。")]),t._v(" "),r("h2",{attrs:{id:"解释器模式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#解释器模式"}},[t._v("#")]),t._v(" 解释器模式")]),t._v(" "),r("p",[t._v("解释器模式（Interpreter Pattern）用于描述语言语法如何定义，如何解释和编译。主要用在一些专业场景（比如 babel 解析 ES6 语法，SCSS、LESS 解析成 CSS 等），此外使用场景都不多。")]),t._v(" "),r("p",[t._v("（完）")])])}),[],!1,null,null,null);a.default=s.exports}}]);