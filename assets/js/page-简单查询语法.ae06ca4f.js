(window.webpackJsonp=window.webpackJsonp||[]).push([[311],{1150:function(s,a,t){"use strict";t.r(a);var e=t(1),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,t=s._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("h1",{attrs:{id:"简单查询语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#简单查询语法"}},[s._v("#")]),s._v(" 简单查询语法")]),s._v(" "),t("h2",{attrs:{id:"查询列的语句"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查询列的语句"}},[s._v("#")]),s._v(" 查询列的语句")]),s._v(" "),t("h3",{attrs:{id:"查询单个列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查询单个列"}},[s._v("#")]),s._v(" 查询单个列")]),s._v(" "),t("p",[s._v("查看某个表中的某一列的数据，语法格式如下：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" 列名 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" 表名"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("列名为星号（"),t("code",[s._v("*")]),s._v("）表示把记录中的所有列都查出来。有时候会很方便，但是查询不需要的列通常会降低性能，视情况而用吧")]),s._v(" "),t("h3",{attrs:{id:"列的别名"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#列的别名"}},[s._v("#")]),s._v(" 列的别名")]),s._v(" "),t("p",[s._v("可以为结果集中的列重新定义一个别名，语法格式如下：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" 列名 "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("AS")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" 列的别名 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" 表名"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这里的 "),t("code",[s._v("AS")]),s._v(" 加了个中括号，意思是这个指定别名的语法中，"),t("code",[s._v("AS")]),s._v(" 这个单词是可有可无的（不过我觉得加上这个单词可以增加可读性）")]),s._v(" "),t("p",[s._v("定义别名后，用 SELECT 语法查询出来的结果里，原列名就被别名替代了。不过别名只在本次查询得到的结果集中展示，并不会改变真实表中的列名。下一次查询中取其他的别名也可以")]),s._v(" "),t("h3",{attrs:{id:"查询多个列"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查询多个列"}},[s._v("#")]),s._v(" 查询多个列")]),s._v(" "),t("p",[s._v("如果想查询多个列的数据，可以在 "),t("code",[s._v("SELECT")]),s._v(" 后边写多个列名，用逗号 "),t("code",[s._v(",")]),s._v(" 分隔开就好：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" 列名"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 列名"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" 列名n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" 表名"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("查询语句中的列名可以按任意顺序摆放，结果集将按照我们指定的列名顺序显示")]),s._v(" "),t("h2",{attrs:{id:"查询结果去重"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#查询结果去重"}},[s._v("#")]),s._v(" 查询结果去重")]),s._v(" "),t("h3",{attrs:{id:"去除单列的重复结果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#去除单列的重复结果"}},[s._v("#")]),s._v(" 去除单列的重复结果")]),s._v(" "),t("p",[s._v("有的时候我们查询某个列的数据时会有一些重复的结果，比如我们查询 "),t("code",[s._v("student_info")]),s._v(" 表的学院信息，会有重复的学院名")]),s._v(" "),t("p",[s._v("如果想去除重复结果的话，可以将 "),t("code",[s._v("DISTINCT")]),s._v(" 放在被查询的列前面，语法格式如下：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DISTINCT")]),s._v(" 列名 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" 表名"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("这样的结果集里，就只剩下不重复的信息了，比如从学生表里查一下这个学校一共有哪些学院")]),s._v(" "),t("h3",{attrs:{id:"去除多列的重复结果"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#去除多列的重复结果"}},[s._v("#")]),s._v(" 去除多列的重复结果")]),s._v(" "),t("p",[s._v("对于查询多列的情况，两条结果重复的意思是：两条结果的每一个列中的值都相同。比如查询学院和专业信息，这两个列的值都相同（都是 "),t("code",[s._v("计算机学院")]),s._v(" 下面的 "),t("code",[s._v("软件工程")]),s._v(" 专业）")]),s._v(" "),t("p",[s._v("如果想对多列查询的结果去重的话，可以直接把 "),t("code",[s._v("DISTINCT")]),s._v(" 放在被查询的列的最前面：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DISTINCT")]),s._v(" 列名"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 列名"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v(" 列名n "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" 表名"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("h2",{attrs:{id:"限制查询结果条数"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#限制查询结果条数"}},[s._v("#")]),s._v(" 限制查询结果条数")]),s._v(" "),t("p",[s._v("在查询语句的末尾使用 "),t("code",[s._v("LIMIT")]),s._v(" 关键字可以限制结果集中的记录条数")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v(" 开始行"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 限制条数"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[t("code",[s._v("开始行")]),s._v(" 指的是我们想从第几行数据开始查询，从 "),t("code",[s._v("0")]),s._v(" 开始计数")]),s._v(" "),t("li",[t("code",[s._v("限制条数")]),s._v(" 是结果集中最多包含多少条记录")])]),s._v(" "),t("p",[t("code",[s._v("LIMIT")]),s._v(" 后面也可以只有一个参数，那这个参数就代表着"),t("strong",[s._v("限制行数")]),s._v("，此时默认的开始行就是第 "),t("code",[s._v("0")]),s._v(" 行")]),s._v(" "),t("h2",{attrs:{id:"对查询结果排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#对查询结果排序"}},[s._v("#")]),s._v(" 对查询结果排序")]),s._v(" "),t("p",[s._v("MySQL 默认会按照数据底层"),t("strong",[s._v("存储的顺序")]),s._v("来给我们返回数据，如果想让返回结果中的记录按照某种特定的规则排序，就必须显式地指定排序规则")]),s._v(" "),t("h3",{attrs:{id:"按照单个列的值进行排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#按照单个列的值进行排序"}},[s._v("#")]),s._v(" 按照单个列的值进行排序")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" 列名 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ASC")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("ul",[t("li",[t("code",[s._v("ASC")]),s._v(" 指按照指定列的值进行由小到大进行排序，也叫做升序")]),s._v(" "),t("li",[t("code",[s._v("DESC")]),s._v(" 指按照指定列的值进行由大到小进行排序，也叫做降序")]),s._v(" "),t("li",[s._v("省略排序方向时默认时升序，即 "),t("code",[s._v("ASC")])])]),s._v(" "),t("h3",{attrs:{id:"按照多个列的值进行排序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#按照多个列的值进行排序"}},[s._v("#")]),s._v(" 按照多个列的值进行排序")]),s._v(" "),t("p",[s._v("同时指定多个排序的列，多个排序列之间用逗号 "),t("code",[s._v(",")]),s._v(" 隔开")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" 列"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ASC")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" 列"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ASC")]),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("|")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("DESC")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("表示查询结果先按照 "),t("code",[s._v("列1")]),s._v(" 排序，再按照 "),t("code",[s._v("列2")]),s._v(" 排序")]),s._v(" "),t("h3",{attrs:{id:"order-by-结合-limit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#order-by-结合-limit"}},[s._v("#")]),s._v(" ORDER BY 结合 LIMIT")]),s._v(" "),t("p",[s._v("这两个语句结合使用时，"),t("code",[s._v("ORDER BY")]),s._v(" 语句必须放在 "),t("code",[s._v("LIMIT")]),s._v(" 语句前面：")]),s._v(" "),t("div",{staticClass:"language-sql line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-sql"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("SELECT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("FROM")]),s._v(" 表名 "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("ORDER")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("BY")]),s._v(" 列"),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("LIMIT")]),s._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br")])]),t("p",[s._v("比如这条语句可以找出 "),t("code",[s._v("列1")]),s._v(" 值最小的那条记录")]),s._v(" "),t("p",[s._v("（完）")])])}),[],!1,null,null,null);a.default=r.exports}}]);