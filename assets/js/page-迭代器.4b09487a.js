(window.webpackJsonp=window.webpackJsonp||[]).push([[346],{1190:function(n,s,t){"use strict";t.r(s);var e=t(1),a=Object(e.a)({},(function(){var n=this,s=n.$createElement,t=n._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"迭代器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#迭代器"}},[n._v("#")]),n._v(" 迭代器")]),n._v(" "),t("p",[n._v("**迭代：**通过 for 循环遍历对象的每一个元素的过程")]),n._v(" "),t("p",[n._v("**判断对象是否可迭代：**通过 collections 模块中的 iterable")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(">>> from collections import Iterable\n>>> isinstance('abc', Iterable)         # str是否可迭代\nTrue\n>>> isinstance([1,2,3], Iterable)       # list是否可迭代\nTrue\n>>> isinstance(123, Iterable)           # 整数是否可迭代\nFalse\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br")])]),t("p",[t("strong",[n._v("迭代器：")])]),n._v(" "),t("p",[n._v("​\t**定义：**一种可被遍历的对象，并且能作用于 next() 函数")]),n._v(" "),t("p",[n._v("​\t**特点：**从集合的第一个元素开始访问，只能往后遍历不能回溯")]),n._v(" "),t("p",[n._v("​\t"),t("strong",[n._v("基本方法：")])]),n._v(" "),t("ul",[t("li",[n._v("iter()")]),n._v(" "),t("li",[n._v("next()")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v('>>> lis=[1,2,3,4]\n>>> it = iter(lis)     # 使用Python内置的iter()方法创建迭代器对象\n>>> next(it)           # 使用next()方法获取迭代器的下一个元素\n1\n>>> next(it)\n2\n>>> next(it)\n3\n>>> next(it)\n4\n>>> next(it)            # 当后面没有元素可以next的时候，弹出错误\nTraceback (most recent call last):\n  File "<pyshell#6>", line 1, in <module>\n    next(it)\nStopIteration\n')])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br")])]),t("p",[n._v("类实现成为迭代器：实现 "),t("code",[n._v("__iter__()")]),n._v(" 和 "),t("code",[n._v("__next__()")]),n._v(" 方法")]),n._v(" "),t("p",[t("strong",[n._v("迭代器(Iterator)和可迭代(Iterable)的区别")]),n._v("：")]),n._v(" "),t("ul",[t("li",[n._v("凡是可作用于 for 循环的对象都是可迭代类型；")]),n._v(" "),t("li",[n._v("凡是可作用于 next() 函数的对象都是迭代器类型；")]),n._v(" "),t("li",[n._v("list、dict、str 等是可迭代的但不是迭代器，因为 next() 函数无法调用它们，可通过 iter() 函数将它们转换成迭代器。")]),n._v(" "),t("li",[n._v("Python的 for 循环本质上就是通过不断调用 next() 函数实现的")])]),n._v(" "),t("p",[t("strong",[n._v("总结：")])]),n._v(" "),t("ul",[t("li",[n._v("表示的是一个元素流，可以被 next() 函数调用并不断返回下一个元素")]),n._v(" "),t("li",[n._v("通过 next() 取值，节省内存和空间")])]),n._v(" "),t("p",[n._v("（完）")])])}),[],!1,null,null,null);s.default=a.exports}}]);