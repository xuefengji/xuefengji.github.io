(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{762:function(t,s,n){"use strict";n.r(s);var a=n(1),r=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"json-扩展"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#json-扩展"}},[t._v("#")]),t._v(" JSON 扩展")]),t._v(" "),n("h2",{attrs:{id:"json-superset"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#json-superset"}},[t._v("#")]),t._v(" JSON superset")]),t._v(" "),n("p",[t._v("JSON 超集，简而言之就是让 ECMAScript 兼容所有 JSON 支持的文本。ECMAScript 曾在标准 JSON.parse 部分阐明 JSON 确为其一个子集，但由于 JSON 内容可以正常包含 U+2028 行分隔符 与 U+2029 段分隔符，而 ECMAScript 却不行。")]),t._v(" "),n("h2",{attrs:{id:"json-stringify-增强能力"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#json-stringify-增强能力"}},[t._v("#")]),t._v(" JSON.stringify() 增强能力")]),t._v(" "),n("p",[t._v("JSON.stringify 在 ES10 修复了对于一些超出范围的 Unicode 展示 "),n("code",[t._v("\b")]),t._v(" 错误的问题。因为 JSON 都是被编码成 UTF-8，所以遇到 0xD800–0xDFFF 之内的字符会因为无法编码成 UTF-8 进而导致显示错误。在 ES10 它会用转义字符的方式来处理这部分字符而非编码的方式，这样就会正常显示了。")]),t._v(" "),n("div",{staticClass:"language-javascript line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-javascript"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// \\uD83D\\uDE0E  emoji 多字节的一个字符")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\uD83D\\uDE0E'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 笑脸")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果我们只取其中的一部分 \\uD83D 这其实是个无效的字符串")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 之前的版本, 这些字符将替换为特殊字符, 而现在将未配对的代码点表示为 JSON 转义序列")]),t._v("\nconsole"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token constant"}},[t._v("JSON")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("stringify")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'\\uD83D'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// "\\ud83d"')]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br")])]),n("h2",{attrs:{id:"参考资料"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://2ality.com/2019/01/well-formed-stringify.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Well-formed JSON.stringify"),n("OutboundLink")],1)])]),t._v(" "),n("p",[t._v("（完）")])])}),[],!1,null,null,null);s.default=r.exports}}]);