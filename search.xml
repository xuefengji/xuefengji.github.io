<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Notepad3关联鼠标右键菜单</title>
      <link href="/blogs/add-text-editors-to-rignt-menu-by-regedit-in-windows.html"/>
      <url>/blogs/add-text-editors-to-rignt-menu-by-regedit-in-windows.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">Notepad3关联鼠标右键菜单</div><blockquote><p>以Notepad3为例，通过注册表将各类文本编辑器添加到右键菜单，从而可以通过鼠标右键打开文本文件。</p></blockquote><p>　　我们一般会在Windows机器上安装一个第三方文本编辑器，从而弥补Windows自带文本编辑器的不足。<br>　　常用的文本编辑器有 <span style="color: #27ae60;">Notepad3</span>，<span style="color: #27ae60;">EverEdit</span>，<span style="color: #27ae60;">EditPlus</span>，<span style="color: #27ae60;">Notepad++</span>等。<br>　　<span style="font-size: 10px; color: #FF0000;">* </span><span style="font-size: 10px; color: #9e9e9e;">仅是文本编辑的话，其实它们和Sublime Text这类IDE不属于一类，文本编辑器要更“轻”</span></p><p>　　EverEdit是我经常使用的文本工具，安装完后就自动添加到右键菜单了，之后把鼠标放在目标文件上，右击就可以选择“<span style="color: #FF0000;">Edit With EverEdit</span>”，很方便。<br>　　大部分的此类软件也都可以在菜单中设置可以“<span style="color: #FF0000;">添加XXX到鼠标右键</span>”，但是最近在体验<span style="color: #27ae60;">Notepad3</span>时，却怎么都找不到Notepad3如何设置，只能通过直接写入注册表的方式完成，下面记录下步骤。<br>　　<span style="font-size: 10px; color: #FF0000;">* </span><span style="font-size: 10px; color: #9e9e9e;">我在安装Notepad3时，没有选择让它完全替代Windows自带文本编辑器。</span></p><p>　　这个方法是通用的，任何便携版（portable）软件或绿色单文件版都可以这么做。</p><p><br></p><p><span style="font-size: 27px;"><strong>实现方法</strong></span></p><p>　　1. 打开注册表编辑器（Windows键+R，输入<code>regedit</code>，回车），如下图所示：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/notepad3_to_right_menu_01.png" alt="打开注册表编辑器"></p><p>　　2. 在注册表编辑器中，<code>HKEY_CLASSES_ROOT</code> –&gt; <code>*</code> –&gt; <code>shell</code> 目录点击右键。<code>新建</code> –&gt; <code>项</code>，这里命名的 <code>项</code> 值就是鼠标右键列表里面显示的内容，这里起名为【Edit With Notepad3】。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/notepad3_to_right_menu_02.png" alt="创建Edit With Notepad3项"></p><p>　　3. 在右侧空白区域点击右键 【新建 –&gt; 字符串值】，分别创建如下图所示的两个字符串，名称为【Icon】值为<span style="color: #FF0000;">Notepad3的路径地址</span>，名称为【MultiSelectModel】值为 <code>Single</code>，这一步设置的意义是设置鼠标右键列表中的图标。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/notepad3_to_right_menu_03.png" alt="创建字符串值"></p><p>　　4. 在这里起名为【Edit With Notepad3】的目录下新建名为【Command】的项，编辑右侧默认项的值为Notepad3的路径，如下图所示，<span style="color: #FF0000;">需要用引号</span>并且后面追加 <code>“%1”</code>。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/notepad3_to_right_menu_04.png" alt="创建Command项"></p><p>　　5. 到此就大功告成，如下图所示：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/notepad3_to_right_menu_05.png" alt="鼠标右键打开Notepad3"></p>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一文详解主流CSS布局</title>
      <link href="/blogs/css-layout.html"/>
      <url>/blogs/css-layout.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">一文详解主流CSS布局</div><blockquote><p>介绍水平居中布局、垂直居中布局、居中布局、两列布局、三列布局、圣杯布局、双飞翼布局等主流css布局。</p></blockquote><h2 id="一、水平居中布局"><a href="#一、水平居中布局" class="headerlink" title="一、水平居中布局"></a>一、水平居中布局</h2><p>　　水平居中布局主要有三种实现方式：<br>　　●　inline-block + text-align 属性配合使用<br>　　●　table + margin 属性配合使用<br>　　●　absolute + transform 属性配合使用</p><h3 id="1-inline-block-text-align"><a href="#1-inline-block-text-align" class="headerlink" title="1. inline-block + text-align"></a><span style="font-size: 18px; color:#3498db;">1. inline-block + text-align</span></h3><p>　　<span style="color: #FF0000;">原理：</span><br>　　<strong>text-align属性</strong>：是为文本内容设置对齐方式<br>　　　　৹　left：左对齐<br>　　　　৹　center：居中对齐<br>　　　　৹　inline-block：右对齐<br>　　<strong>display属性</strong>：<br>　　　　৹　block：块级元素（width和height属性有效）<br>　　　　৹　inline：内联元素（text-align属性有效，width和height属性无效）<br>　　　　৹　inline-block：行内块级元素（块级+内联）</p><p>　　<span style="color: #FF0000;">代码实现：</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.child</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#c9394a</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>水平居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>　　<span style="color: #FF0000;">效果演示：</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/horizontal_center_first_solution.png" alt="水平居中第一种解决方案"></p><p>　　<span style="color: #FF0000;">优缺点：</span><br>　　●　优点<br>　　　　৹　浏览器兼容性比较好（IE6~9）<br>　　●　缺点<br>　　　　৹　text-align 属性具有继承性，导致子级元素的文本也是居中显示的（见上图中的文字“水平居中”四个字）</p><h3 id="2-table-margin"><a href="#2-table-margin" class="headerlink" title="2. table + margin"></a><span style="font-size: 18px; color:#3498db;">2. table + margin</span></h3><p>　　<span style="color: #FF0000;">原理：</span><br>　　<strong>display属性</strong>：<br>　　　　৹　table 和 block 都可以，div元素默认是block块级元素<br>　　<strong>margin属性（核心）</strong>：外边距<br>　　　　৹　auto 表示根据浏览器自动分配（等分左右外边距）</p><p>　　<span style="color: #FF0000;">代码实现：</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.child</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#c9394a</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>水平居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>　　<span style="color: #FF0000;">效果演示：</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/horizontal_center_second_solution.png" alt="水平居中第二种解决方案"></p><p>　　<span style="color: #FF0000;">优缺点：</span><br>　　●　优点<br>　　　　৹　只需要对子级元素进行设置就可以实现水平方向居中布局效果<br>　　●　缺点<br>　　　　৹　如果子级元素脱离文档流（float 或 absolute 或 fixed），会导致 margin 属性的值无效</p><h3 id="3-absolute-transform"><a href="#3-absolute-transform" class="headerlink" title="3. absolute + transform"></a><span style="font-size: 18px; color:#3498db;">3. absolute + transform</span></h3><p>　　这种方式比前两种要复杂些。<br>　　<span style="color: #FF0000;">原理：</span><br>　　<strong>position属性</strong>：<br>　　　　৹　absolute 绝对定位，如果父级元素没有开启定位的话，当前元素是相对于页面定位的；反之当前元素是相对于父级元素定位的<br>　　　　৹　relative、absolute、fixed 这三个值都是开启定位，position的默认值static表示不开启定位<br>　　　　৹　relative 是不脱离文档流的，absolute、fixed 都是脱离文档流的<br>　　<strong>left属性</strong>：<br>　　　　৹　50%，设置子级元素相对于父级元素左边50%<br>　　<strong>transform属性</strong>：<br>　　　　৹　子级元素往左（往左是负值）移动它宽度的一半</p><p>　　<span style="color: #FF0000;">代码实现：</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.child</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#c9394a</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span>-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>水平居中<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>　　<span style="color: #FF0000;">效果演示：</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/horizontal_center_third_solution.png" alt="水平居中第三种解决方案"></p><p>　　<span style="color: #FF0000;">优缺点：</span><br>　　●　优点<br>　　　　৹　无论父级元素是否脱离文档流，不影响子级元素水平居中效果（子级元素设置了绝对定位，父级元素开启了定位即已经脱离了文档流）<br>　　●　缺点<br>　　　　৹　transform属性是CSS3中新增属性，浏览器支持情况不好</p><h2 id="二、垂直居中布局"><a href="#二、垂直居中布局" class="headerlink" title="二、垂直居中布局"></a>二、垂直居中布局</h2><p>　　垂直居中布局主要有两种实现方式：<br>　　●　table-cell + vertical-align 属性配合使用<br>　　●　absolute + transform 属性配合使用</p><h3 id="1-table-cell-vertical-align"><a href="#1-table-cell-vertical-align" class="headerlink" title="1. table-cell + vertical-align"></a><span style="font-size: 18px; color:#3498db;">1. table-cell + vertical-align</span></h3><p>　　<span style="color: #FF0000;">原理：</span><br>　　<strong>display属性</strong>：<br>　　　　৹　table：设置当前元素为<code>&lt;table&gt;</code>元素（表格）<br>　　　　৹　table-cell：设置当前元素为<code>&lt;td&gt;</code>元素（单元格），单元格的内容可以有垂直和水平两种方向的对齐<br>　　<strong>vertical-align属性</strong>：用于设置文本内容的垂直方向对齐方式<br>　　　　৹　top：顶部对齐<br>　　　　৹　middle：居中对齐<br>　　　　৹　bottom：底部对齐</p><p>　　<span style="color: #FF0000;">代码实现：</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.child</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#c9394a</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  垂直居中  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>　　<span style="color: #FF0000;">效果演示：</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/vertical_center_first_solution.png" alt="垂直居中第一种解决方案"></p><p>　　<span style="color: #FF0000;">优缺点：</span><br>　　●　优点<br>　　　　৹　浏览器兼容性比较好（IE6~9）<br>　　●　缺点<br>　　　　৹　vertical-align 属性具有继承性，导致父级元素的文本也是居中显示的（见上图中的文字“垂直居中”四个字）</p><h3 id="2-absolute-transform"><a href="#2-absolute-transform" class="headerlink" title="2. absolute + transform"></a><span style="font-size: 18px; color:#3498db;">2. absolute + transform</span></h3><p>　　<span style="color: #FF0000;">原理：</span><br>　　<strong>position属性</strong>：<br>　　　　৹　absolute 绝对定位，如果父级元素没有开启定位的话，当前元素是相对于页面定位的；反之当前元素是相对于父级元素定位的<br>　　　　৹　relative、absolute、fixed 这三个值都是开启定位，position的默认值static表示不开启定位<br>　　　　৹　relative 是不脱离文档流的，absolute、fixed 都是脱离文档流的<br>　　<strong>top属性</strong>：<br>　　　　৹　50%，设置子级元素相对于父级元素上边50%<br>　　<strong>transform属性</strong>：<br>　　　　৹　子级元素往上（往上是负值）移动它宽度的一半</p><p>　　<span style="color: #FF0000;">代码实现：</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.child</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">50</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#c9394a</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  垂直居中  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>　　<span style="color: #FF0000;">效果演示：</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/vertical_center_second_solution.png" alt="垂直居中第二种解决方案"></p><p>　　<span style="color: #FF0000;">优缺点：</span><br>　　●　优点<br>　　　　৹　父级元素是否脱离文档流，不影响子级元素垂直居中效果<br>　　●　缺点<br>　　　　৹　transform 属性是CSS3中新增属性，浏览器支持情况不好</p><h2 id="三、居中布局"><a href="#三、居中布局" class="headerlink" title="三、居中布局"></a>三、居中布局</h2><p>　　居中布局实际上就是既要水平方向居中，也要垂直方向居中。</p><p>　　居中布局主要如下两种实现方式（整合水平居中和垂直居中的方案）：<br>　　●　table + margin 实现水平方向居中，table-cell + vertical-align实现垂直方向居中<br>　　●　absolute + transform 实现水平方向和垂直方向居中</p><h3 id="1-table-margin-amp-table-cell-vertical-align"><a href="#1-table-margin-amp-table-cell-vertical-align" class="headerlink" title="1. table + margin &amp; table-cell + vertical-align"></a><span style="font-size: 18px; color:#3498db;">1. table + margin &amp; table-cell + vertical-align</span></h3><p>　　<span style="color: #FF0000;">原理：</span><br>　　整合水平居中和垂直居中的方案。</p><p>　　<span style="color: #FF0000;">代码实现：</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.child</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#c9394a</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 按照前面介绍这边应该是table，但&lt;table>作为&lt;td>的子元素，与html语义化不符 */</span>    <span class="token comment" spellcheck="true">/* 使用block也能起到一样的效果 */</span>    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  居中  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>　　<span style="color: #FF0000;">效果演示：</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/center_layout_first_solution.png" alt="居中布局第一种解决方案"></p><p>　　<span style="color: #FF0000;">优缺点：</span><br>　　●　优点<br>　　　　৹　浏览器兼容性比较好（IE6~9）<br>　　●　缺点<br>　　　　৹　只需要设置子元素的居中效果，但却同时修改了父元素的属性，不够干净</p><h3 id="2-absolute-transform-1"><a href="#2-absolute-transform-1" class="headerlink" title="2. absolute + transform"></a><span style="font-size: 18px; color:#3498db;">2. absolute + transform</span></h3><p>　　<span style="color: #FF0000;">原理：</span><br>　　利用定位的方式来实现居中效果。</p><p>　　<span style="color: #FF0000;">代码实现：</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.child</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#c9394a</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">50%</span>, -<span class="token number">50%</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  居中  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>child<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>　　<span style="color: #FF0000;">效果演示：</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/center_layout_second_solution.png" alt="居中布局第二种解决方案"></p><p>　　<span style="color: #FF0000;">优缺点：</span><br>　　●　优点<br>　　　　৹　在不考虑浏览器兼容性的情况下，优于上一种解决方案（目前老版本浏览器的市场占有率越来越低）<br>　　●　缺点<br>　　　　৹　只需要设置子元素的居中效果，但却同时修改了父元素的属性，不够干净<br>　　　　৹　transform 属性是CSS3中新增属性，浏览器支持情况不好</p><h2 id="四、两列布局"><a href="#四、两列布局" class="headerlink" title="四、两列布局"></a>四、两列布局</h2><p>　　两列布局是多列布局的一种，一般情况下是指一列（左列）确定宽度，另一列（右列）自适应（自动填满剩余所有空间）。</p><p>　　两列布局主要有三种实现方式：<br>　　●　float + margin 属性配合使用<br>　　●　float + overflow 属性配合使用<br>　　●　display 属性的 table 相关值使用</p><h3 id="1-float-margin（不建议采用）"><a href="#1-float-margin（不建议采用）" class="headerlink" title="1. float + margin（不建议采用）"></a><span style="font-size: 18px; color:#3498db;">1. float + margin（不建议采用）</span></h3><p>　　<span style="color: #FF0000;">原理：</span><br>　　<strong>width属性</strong>：左列元素设置定宽，右列元素<code>div</code>默认是100%<br>　　<strong>height</strong>：需要设置高度，否则<code>div</code>元素默认高度是0<br>　　<strong>margin-left属性</strong>：右列元素是100%的宽度，左外边距需要和左列元素宽度相等</p><p>　　<span style="color: #FF0000;">代码实现：</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.left</span>, <span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#c9394a</span><span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>　　<span style="color: #FF0000;">效果演示：</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/two_column_layout_first_solution.png" alt="两列布局第一种解决方案"></p><p>　　<span style="color: #FF0000;">优缺点：</span><br>　　●　优点<br>　　　　৹　实现方式简单<br>　　●　缺点<br>　　　　৹　自适应元素 margin 属性值与定宽元素的 width 属性值保持一致（耦合性强）<br>　　　　৹　定宽元素浮动与自适应元素不浮动导致浏览器兼容性不好（老版本浏览器会在两个元素间有一个空白区）<br>　　　　৹　<span style="color: #FF0000;">如果在自适应那一列中存在子集元素，并且使用了 <code>clear: both;</code>清除浮动时，显示就会存在问题</span></p><h3 id="2-float-margin（优化版，但也不建议采用）"><a href="#2-float-margin（优化版，但也不建议采用）" class="headerlink" title="2. float + margin（优化版，但也不建议采用）"></a><span style="font-size: 18px; color:#3498db;">2. float + margin（优化版，但也不建议采用）</span></h3><p>　　<span style="color: #FF0000;">原理：</span><br>　　为自适应元素（右列）定义父级元素，<br>　　<strong>float属性</strong>：右列元素的父元素设置为浮动后，导致默认宽度为0，需要设置宽度为100%<br>　　<strong>margin-left属性</strong>：右列元素的父元素设置margin-left为负值（向左移动）<br>　　<strong>position属性</strong>：左列元素设置相对定位，让它的显示层级更高</p><p>　　<span style="color: #FF0000;">代码实现：</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.left</span>, <span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#c9394a</span><span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.right-fix</span> </span><span class="token punctuation">{</span>    <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right-fix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>　　<span style="color: #FF0000;">效果演示：</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/two_column_layout_first_solution_optimized_version.png" alt="两列布局第一种解决方案优化版"></p><p>　　<span style="color: #FF0000;">优缺点：</span><br>　　●　优点<br>　　　　৹　解决了上一种方案的第1和第3个缺点<br>　　●　缺点<br>　　　　৹　给右列元素多增加了一个父级容器，且为了解决相关问题，又设置了很多相关的css内容，解决方案很复杂<br>　　　　৹　上一种方案的第2个缺点没有解决</p><h3 id="3-float-overflow"><a href="#3-float-overflow" class="headerlink" title="3. float + overflow"></a><span style="font-size: 18px; color:#3498db;">3. float + overflow</span></h3><p>　　<span style="color: #FF0000;">原理：</span><br>　　为自适应元素（右列）定义父级元素，<br>　　<strong>overflow属性</strong>：右列元素设置为溢出值隐藏，开启BFC模式（当前元素的内部环境与外界完全隔离）</p><p>　　<span style="color: #FF0000;">代码实现：</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.left</span>, <span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#c9394a</span><span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>　　<span style="color: #FF0000;">效果演示：</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/two_column_layout_second_solution.png" alt="两列布局第二种解决方案"></p><p>　　<span style="color: #FF0000;">优缺点：</span><br>　　●　优点<br>　　　　৹　实现方式简单<br>　　　　৹　上面两种解决方案中的问题在此解决方案中都没有<br>　　●　缺点<br>　　　　৹　overflow 属性不仅解决了两列布局问题，同时设置了内容溢出的情况（实际使用中我们可能不要隐藏溢出内容）</p><h3 id="4-利用display属性的table相关值"><a href="#4-利用display属性的table相关值" class="headerlink" title="4. 利用display属性的table相关值"></a><span style="font-size: 18px; color:#3498db;">4. 利用display属性的table相关值</span></h3><p>　　<span style="color: #FF0000;">原理：</span><br>　　对左右两列的父级元素进行设置（如果没有父级元素，需要新增一个）<br>　　<strong>display属性</strong>：table值的特性：表格的单元格的宽度会自动分配（默认是50%等分，设置值后，另外的部分会自适应）<br>　　<strong>table-layout属性</strong>：设置为fixed，防止过长的内容撑破表格</p><p>　　<span style="color: #FF0000;">代码实现：</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>    <span class="token property">table-layout</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.left</span>, <span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#c9394a</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>　　<span style="color: #FF0000;">效果演示：</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/two_column_layout_third_solution.png" alt="两列布局第三种解决方案"></p><p>　　<span style="color: #FF0000;">优缺点：</span><br>　　●　优点<br>　　　　৹　浏览器兼容性比较好<br>　　●　缺点<br>　　　　৹　将所有元素的 display 属性设置为 table 相关值，受到相应制约</p><h2 id="五、三列布局"><a href="#五、三列布局" class="headerlink" title="五、三列布局"></a>五、三列布局</h2><p>　　三列布局是多列布局的一种，一般情况下是指三列中左边两列是确定的宽度，右边一列是自动填满剩余所有空间的一种布局效果。<br>　　三列布局比两列布局多了一列“定宽”，但实现起来并不比两列布局复杂多少。</p><p>　　三列布局主要有三种实现方式：<br>　　●　float + margin 属性配合使用<br>　　●　float + overflow 属性配合使用<br>　　●　display 属性的 table 相关值使用</p><p>　　<strong>可见，三列布局的实现方式和两列布局基本上是类似的，下面举一个例子来演示。</strong></p><h3 id="1-float-margin"><a href="#1-float-margin" class="headerlink" title="1. float + margin"></a><span style="font-size: 18px; color:#3498db;">1. float + margin</span></h3><p>　　<span style="color: #FF0000;">原理：</span><br>　　和两列布局的第一种解决方案类似。</p><p>　　<span style="color: #FF0000;">代码实现：</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.left</span>, <span class="token class">.center</span>, <span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#c9394a</span><span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.center</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#008000</span><span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>　　<span style="color: #FF0000;">效果演示：</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/three_column_layout_first_solution.png" alt="三列布局第一种解决方案"></p><h3 id="2-其他几种解决方案略"><a href="#2-其他几种解决方案略" class="headerlink" title="2. 其他几种解决方案略"></a><span style="font-size: 18px; color:#3498db;">2. 其他几种解决方案略</span></h3><p>　　其他几种解决方案略。<br>　　可以举一反三，四列、五列布局都可以采用相同的方式来实现。</p><h2 id="六、圣杯布局"><a href="#六、圣杯布局" class="headerlink" title="六、圣杯布局"></a>六、圣杯布局</h2><p>　　圣杯布局是一个完整页面的布局（一个较为复杂的页面可能会由各种布局方式组合而成，此处抽离出一个简单的模型），呈现一种三行三列的结构，一般“三列”多出现在第二行中，如下图所示：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/holy_grail_layout.png" alt="圣杯布局示例"><br>　　圣杯布局是来源于该布局效果类似圣杯而得名。简单来说，就是指三行三列布局。</p><p>　　圣杯布局的实现方式：<br>　　由于 <code>div</code> 元素本来就是垂直方向排列的，所以不用作任何的设置，三个 <code>div</code> 标签就可以实现三行的效果了；<br>　　因此圣杯布局的核心就是中间主体部分的 <span style="color: #FF0000;">左右定宽 + 中间自适应</span> 的布局效果；<br>　　中间主题部分实现后，只需要在首尾增加两个 <code>div</code> 标签，即可实现圣杯布局。</p><p>　　<span style="color: #FF0000;">原理：</span><br>　　●　思路<br>　　　　৹　parent（外面包裹一层）设置 <code>margin-left</code> 和 <code>margin-right</code> 预留出两个定宽位置；<br>　　　　৹　left和right部分通过两次移动，移动到理想位置。</p><p>　　●　Tips<br>　　　　৹　子级元素增加浮动，父级元素没有加浮动，父级元素会有高度坍塌的问题（高度为0），因此需要给父级元素设置 <code>height</code> 属性；<br>　　　　৹　<code>div</code> 元素默认宽度是父级元素的100%，但设置为 float 后，默认宽度变成了0；<br>　　　　৹　由于三个元素都是浮动的，因此可以通过水平方向的移动（<code>margin-left</code>）移动到上一行；<br>　　　　৹　除了 <code>margin-left</code> 可以移动元素，<code>left</code> 和 <code>right</code> 也可以，但需要开启定位，但为了避免脱离文档流的麻烦，使用 <code>relative</code> 相对定位。</p><p>　　●　详情见下面代码注释。</p><p>　　<span style="color: #FF0000;">代码实现：</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 对应的是left元素的宽度 */</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 对应的是right元素的宽度 */</span>    <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.left</span>, <span class="token class">.center</span>, <span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.left</span>, <span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#c9394a</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 将当前元素从当前行，移动到上一行同一个位置 */</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">100%</span><span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 将当前元素移动到理想位置 */</span>    <span class="token property">left</span><span class="token punctuation">:</span> -<span class="token number">300</span>px  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.center</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#008000</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 表示为父级元素宽度的100% */</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> -<span class="token number">300</span>px  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token comment" spellcheck="true">&lt;!-- SEO角度考虑，center放最前面 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>　　<span style="color: #FF0000;">效果演示：</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/holy_grail_layout_solution.png" alt="圣杯布局解决方案"></p><h2 id="七、双飞翼布局"><a href="#七、双飞翼布局" class="headerlink" title="七、双飞翼布局"></a>七、双飞翼布局</h2><p>　　双飞翼布局最早是淘宝团队提出，是针对圣杯布局的优化解决方案。主要是优化了圣杯布局中开启定位（即left和right两列）的问题。</p><p>　　双飞翼布局和圣杯布局本质上都是为了解决一个问题：三列的重合部分如何解决。下面看下双飞翼布局给出的解决方案。</p><p>　　<span style="color: #FF0000;">原理：</span><br>　　●　优化<br>　　　　৹　需要优化圣杯布局中 position 定位的问题</p><p>　　●　思路<br>　　　　৹　center（自适应那一列）中增加子级元素（本案例中为inner）；<br>　　　　৹　之后开发的内容写在 inner 元素里。</p><p>　　●　详情见下面代码注释。</p><p>　　<span style="color: #FF0000;">代码实现：</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.left</span>, <span class="token class">.center</span>, <span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> right<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.left</span>, <span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#c9394a</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 将当前元素从当前行，移动到上一行同一个位置 */</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.center</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#008000</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 表示为父级元素宽度的100% */</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.inner</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#FF69B4</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 对应的是left元素的宽度 */</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 对应的是right元素的宽度 */</span>    <span class="token property">margin-right</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>　　<span style="color: #FF0000;">效果演示：</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/double_wing_layout.png" alt="双飞翼布局解决方案"></p><h2 id="八、等分布局"><a href="#八、等分布局" class="headerlink" title="八、等分布局"></a>八、等分布局</h2><p>　　等分布局就是指一行被分为若干列，每一列的宽度是相同的值。</p><p>　　等分布局主要有两种实现方式：<br>　　●　float 属性实现等分布局效果<br>　　●　display 属性的 table 实现等分布局效果</p><p>　　需要兼顾的问题：<br>　　●　实现等分布局时，有可能需要每一列之间实现空白间隔区域<br>　　　　৹　通过在原有HTML页面源代码的基础上增加一个父级容器（本案例中为parent-fix）来实现</p><h3 id="1-float属性实现"><a href="#1-float属性实现" class="headerlink" title="1. float属性实现"></a><span style="font-size: 18px; color:#3498db;">1. float属性实现</span></h3><p>　　<span style="color: #FF0000;">代码实现：</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.parent-fix</span> </span><span class="token punctuation">{</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 整体向左移动10px，让最左边的间隙消失 */</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col1</span>, <span class="token class">.col2</span>, <span class="token class">.col3</span>, <span class="token class">.col4</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">25%</span><span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 增加空白间隙 */</span>    <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.inner</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col1</span> <span class="token class">.inner</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> hotpink<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col2</span> <span class="token class">.inner</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col3</span> <span class="token class">.inner</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col4</span> <span class="token class">.inner</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent-fix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>　　<span style="color: #FF0000;">效果演示：</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/equality_layout_first_solution.png" alt="等分布局第一种解决方案"></p><h3 id="2-table元素实现"><a href="#2-table元素实现" class="headerlink" title="2. table元素实现"></a><span style="font-size: 18px; color:#3498db;">2. table元素实现</span></h3><p>　　<span style="color: #FF0000;">代码实现：</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.parent-fix</span> </span><span class="token punctuation">{</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1444</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">1434</span>px<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* &lt;table> */</span>    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>    <span class="token property">margin-left</span><span class="token punctuation">:</span> -<span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col1</span>, <span class="token class">.col2</span>, <span class="token class">.col3</span>, <span class="token class">.col4</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* &lt;td> */</span>    <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>    <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>    <span class="token property">padding-left</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.inner</span> </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col1</span> <span class="token class">.inner</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> hotpink<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col2</span> <span class="token class">.inner</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col3</span> <span class="token class">.inner</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col4</span> <span class="token class">.inner</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent-fix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>inner<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>　　<span style="color: #FF0000;">效果演示：</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/equality_layout_first_solution.png" alt="等分布局第二种解决方案"></p><h2 id="九、等高布局"><a href="#九、等高布局" class="headerlink" title="九、等高布局"></a>九、等高布局</h2><p>　　等高布局就是指一行被分为若干列，每一列的高度是相同的值。</p><p>　　等高布局主要有两种实现方式：<br>　　●　display 属性的 table 实现等高布局效果<br>　　●　padding + margin 属性实现等高布局效果</p><h3 id="1-table元素实现"><a href="#1-table元素实现" class="headerlink" title="1. table元素实现"></a><span style="font-size: 18px; color:#3498db;">1. table元素实现</span></h3><p>　　<span style="color: #FF0000;">原理：</span><br>　　表格的单元格默认是等高的。</p><p>　　<span style="color: #FF0000;">代码实现：</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.left</span>, <span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#93394a</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是左列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是右列我是右列我是右列我是右列www.wenyuanblog.com我是右列我是右列我是右列我是右列www.wenyuanblog.com我是右列我是右列我是右列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>　　<span style="color: #FF0000;">效果演示：</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/same_height_layout_first_solution.png" alt="等高布局第一种解决方案"></p><p>　　<span style="color: #FF0000;">优缺点：</span><br>　　●　优点<br>　　　　৹　浏览器兼容性比较好</p><h3 id="2-padding-margin"><a href="#2-padding-margin" class="headerlink" title="2. padding + margin"></a><span style="font-size: 18px; color:#3498db;">2. padding + margin</span></h3><p>　　<span style="color: #FF0000;">原理：</span><br>　　padding-bottom 和 margin-bottom都设置为极大且相反值的时候，有一个对冲的效果，然后结合父元素的 overflow 属性，实现<span style="color: #FF0000;">伪等高布局</span>。</p><p>　　这种解决方案实现的并不是真正的等高布局，只是视觉上等高的伪等高布局。在实现页面布局中有句话叫做：眼见不一定为实，说的就是这种情况。</p><p>　　<span style="color: #FF0000;">代码实现：</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.left</span>, <span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    <span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span>    <span class="token property">padding-bottom</span><span class="token punctuation">:</span> <span class="token number">9999</span>px<span class="token punctuation">;</span>    <span class="token property">margin-bottom</span><span class="token punctuation">:</span> -<span class="token number">9999</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.left</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#93394a</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.right</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是左列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>我是右列我是右列我是右列我是右列www.wenyuanblog.com我是右列我是右列我是右列我是右列www.wenyuanblog.com我是右列我是右列我是右列<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>　　<span style="color: #FF0000;">效果演示：</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/same_height_layout_first_solution.png" alt="等高布局第二种解决方案"></p><h2 id="十、CSS3多列布局"><a href="#十、CSS3多列布局" class="headerlink" title="十、CSS3多列布局"></a>十、CSS3多列布局</h2><h3 id="1-columns属性"><a href="#1-columns属性" class="headerlink" title="1. columns属性"></a><span style="font-size: 18px; color:#3498db;">1. columns属性</span></h3><p>　　columns 属性：它是一个简写属性，可以分成以下两个属性<br>　　●　column-count 属性：定义列的数量<br>　　　　৹　auto：默认值，用于表示列的数量由其他CSS属性决定<br>　　　　৹　number：必须是正整数，用于表示定义列的数量<br>　　●　column-width 属性：定义列的宽度<br>　　　　৹　auto：默认值，用于表示列的宽度由其他CSS属性决定<br>　　　　৹　length：必须是正整数，用于表示定义列的宽度</p><p>　　<span style="color: #FF0000;">代码实现：</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>    <span class="token property">column-count</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token property">column-width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col1</span>, col2, col3, col4 </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col1</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> hotpink<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col2</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col3</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col4</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>　　<span style="color: #FF0000;">效果演示：</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/css3_multi_columns_columns_attr.png" alt="CSS3多列布局的columns属性"></p><h3 id="2-列的间距"><a href="#2-列的间距" class="headerlink" title="2. 列的间距"></a><span style="font-size: 18px; color:#3498db;">2. 列的间距</span></h3><p>　　上图中可以看到，列与列之间有空白的间隙，这个间隙不是由padding或者margin设置的，而是CSS3在多列布局时自动分配的。</p><p>　　在CSS3中，column-gap 属性用于设置列与列之间的间距，该属性主要为多列显示时的元素设置。</p><p>　　column-gap 属性有两个属性值：<br>　　●　normal：用于表示使用浏览器定义列的默认间距，默认值为1em<br>　　●　length：必须是正整数，用于表示定义列之间的间距</p><p>　　<span style="color: #FF0000;">代码实现：</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>    <span class="token property">columns</span><span class="token punctuation">:</span> <span class="token number">4</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    column-gap： <span class="token number">20</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col1</span>, col2, col3, col4 </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col1</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> hotpink<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col2</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col3</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col4</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>　　<span style="color: #FF0000;">效果演示：</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/css3_multi_columns_columns_column_gap.png" alt="CSS3多列布局列的间距"></p><h3 id="3-列的边框"><a href="#3-列的边框" class="headerlink" title="3. 列的边框"></a><span style="font-size: 18px; color:#3498db;">3. 列的边框</span></h3><p>　　在CSS3中，column-rule 属性用于定义列与列之间的边框，其中包括边框宽度、边框颜色以及边框样式。</p><p>　　column-rule 属性：它是一个简写属性，可以分成以下三个属性<br>　　●　column-rule-width 属性：用于表示列与列之间的边框宽度<br>　　●　column-rule-color 属性：用于表示列与列之间的边框颜色<br>　　●　column-rule-style 属性：用于表示列与列之间的边框样式</p><p>　　<span style="color: #FF0000;">代码实现：</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.parent</span> </span><span class="token punctuation">{</span>    <span class="token property">columns</span><span class="token punctuation">:</span> <span class="token number">4</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    column-gap： <span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">column-rule</span><span class="token punctuation">:</span> <span class="token number">5</span>px tomato double<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col1</span>, col2, col3, col4 </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col1</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> hotpink<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col2</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col3</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col4</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>　　<span style="color: #FF0000;">效果演示：</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/css3_multi_columns_columns_column_rule.png" alt="CSS3多列布局列的边框"></p><h3 id="4-横跨多列"><a href="#4-横跨多列" class="headerlink" title="4. 横跨多列"></a><span style="font-size: 18px; color:#3498db;">4. 横跨多列</span></h3><p>　　在CSS3中，column-gap 属性用于定义一个列元素是否跨列。</p><p>　　column-gap 属性有两个属性值：<br>　　●　none：用于表示元素不跨列<br>　　●　all：用于表示元素跨所有列</p><p>　　<span style="color: #FF0000;">代码实现：</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">  <span class="token selector"><span class="token class">.parent</span>, <span class="token class">.parent2</span> </span><span class="token punctuation">{</span>    <span class="token property">columns</span><span class="token punctuation">:</span> <span class="token number">4</span> <span class="token number">300</span>px<span class="token punctuation">;</span>    column-gap： <span class="token number">20</span>px<span class="token punctuation">;</span>    <span class="token property">column-rule</span><span class="token punctuation">:</span> <span class="token number">5</span>px tomato double<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col1</span>, col2, col3, col4, col5 </span><span class="token punctuation">{</span>    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col1</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> hotpink<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col2</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col3</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col4</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token selector"><span class="token class">.col5</span> </span><span class="token punctuation">{</span>    <span class="token property">background</span><span class="token punctuation">:</span> tomato<span class="token punctuation">;</span>    <span class="token property">column-span</span><span class="token punctuation">:</span> all<span class="token punctuation">;</span>  <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>parent2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col5<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><p>　　<span style="color: #FF0000;">效果演示：</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/css3_multi_columns_columns_across_columns.png" alt="CSS3多列布局横跨多列"></p><h3 id="5-列的填充"><a href="#5-列的填充" class="headerlink" title="5. 列的填充"></a><span style="font-size: 18px; color:#3498db;">5. 列的填充</span></h3><p>　　在CSS3中，column-fill 属性用于定义列的高度是由内容决定，还是统一高度。</p><p>　　column-fill 属性有两个属性值：<br>　　●　auto：默认值，用于表示列的高度由内容决定<br>　　●　balance：用于表示列的高度根据内容最多的一列高度为准</p><p>　　这个属性在Chrome浏览器中兼容不是很好，此处省略示例。</p><h2 id="十一、全屏布局"><a href="#十一、全屏布局" class="headerlink" title="十一、全屏布局"></a>十一、全屏布局</h2><p>　　全屏布局就是指HTML页面铺满整个浏览器窗口，并且没有滚动条。而且还可以跟随浏览器的大小变化而变化。</p><p>　　全屏布局示意图如下图所示：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/full_screen_layout.png" alt="全屏布局示意图"></p><h3 id="全屏布局的一种解决方案"><a href="#全屏布局的一种解决方案" class="headerlink" title="全屏布局的一种解决方案"></a><span style="font-size: 18px; color:#3498db;">全屏布局的一种解决方案</span></h3><p>　　<span style="color: #FF0000;">代码实现：</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token selector">html, body </span><span class="token punctuation">{</span>      <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">header </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>      <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> lightgray<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.content</span> </span><span class="token punctuation">{</span>      <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>      <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>      <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>      <span class="token property">overflow</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 解决内容溢出问题 */</span>      <span class="token property">background</span><span class="token punctuation">:</span> lightblue<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.content</span> <span class="token class">.left</span> </span><span class="token punctuation">{</span>      <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100%</span><span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>      <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">top</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>      <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> lightcoral<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector"><span class="token class">.content</span> <span class="token class">.right</span> </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">600</span>px<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* div是个块级元素，它的高度由后代元素的高度之和决定，故设置100%无效*/</span>      <span class="token property">margin-left</span><span class="token punctuation">:</span> <span class="token number">300</span>px<span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> greenyellow<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token selector">footer </span><span class="token punctuation">{</span>      <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>      <span class="token property">position</span><span class="token punctuation">:</span> fixed<span class="token punctuation">;</span>      <span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">right</span><span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token property">background</span><span class="token punctuation">:</span> lightslategray<span class="token punctuation">;</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>left<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>right<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><p>　　<span style="color: #FF0000;">效果演示：</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/full_screen_layout_solution.png" alt="全屏布局的一种解决方案"></p><h2 id="十二、总结"><a href="#十二、总结" class="headerlink" title="十二、总结"></a>十二、总结</h2><p>　　其它布局在网上已经有很多人总结过了，这里不再赘述，例如：<br>　　●　网格布局（响应式布局）<br>　　●　弹性盒子布局（flex布局）</p><p>　　最后需要注意，没有完美的解决方案，在实际开发中，要根据实际情况选择合适的布局方案。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> HTML5/CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《小狗钱钱》读书笔记</title>
      <link href="/blogs/reading-notes-xiao-gou-qian-qian.html"/>
      <url>/blogs/reading-notes-xiao-gou-qian-qian.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">《小狗钱钱》读书笔记</div><blockquote><p>《小狗钱钱》讲述的是一个童话故事，但无论是对小孩还是成年人，都是学习理财的入门经典书籍，它重在培养一个理财观念，强烈推荐阅读。</p></blockquote><p><span style="color: #159957;">状态：已读完</span></p><h2 id="一、钱不是万能，没有钱是万万不能"><a href="#一、钱不是万能，没有钱是万万不能" class="headerlink" title="一、钱不是万能，没有钱是万万不能"></a><span style="font-size: 18px;">一、钱不是万能，没有钱是万万不能</span></h2><p>　　“钱不是万能，没有钱是万万不能”相信这一点是无人否认的，本书强调的是理财之前，你要是真正想要富有的愿望。可能会说，不是废话吗，谁不是真的想要富有呢？<br>　　那么首先，写下你想要富有的10个原因。</p><h2 id="二、梦想视觉化"><a href="#二、梦想视觉化" class="headerlink" title="二、梦想视觉化"></a><span style="font-size: 18px;">二、梦想视觉化</span></h2><p>　　在你写下的10个原因中，选出最重要的3个，确立最重要的目标。　　</p><h2 id="三、找到自信"><a href="#三、找到自信" class="headerlink" title="三、找到自信"></a><span style="font-size: 18px;">三、找到自信</span></h2><ul><li>每当遇到事情就开始考虑什么是做不成的，这样是不会成功的。</li><li>首先，我们应该清楚，事情，肯定是不易实现的。</li><li>转变自己的思维，不去想什么方法是不行的，而是去思考什么方法是行的。</li><li>很多事情的决定因素都是我们的自信程度。</li><li>尝试为别人解决一个难题，那么你就能赚到钱。</li><li>把精力集中在你知道的、你会的和你拥有的事情上。</li></ul><h2 id="四、找到自信"><a href="#四、找到自信" class="headerlink" title="四、找到自信"></a><span style="font-size: 18px;">四、找到自信</span></h2><ul><li>想清楚喜欢什么，再考虑用它来挣钱。</li><li>遇到困难是必然的。</li><li>一份工作肯定是不够的，它的持续时间比你想象的要短。</li></ul><h2 id="五、还在行动吗"><a href="#五、还在行动吗" class="headerlink" title="五、还在行动吗"></a><span style="font-size: 18px;">五、还在行动吗</span></h2><ul><li>72小时规定：当你决定做一件事时，必须在72小时内完成，否则你很可能永远不会再做了。</li><li>没有钱的人，总有很多的紧急的事情要去做，却很少去关注重要的事情。</li><li>当你遇到困难时，仍然坚持自己的意愿，贯彻自己的决定。</li><li>情况顺利的时候人人都能挣到钱，逆境时，一切才能见分晓。</li><li>困难总是不断出现的，你要每天不间断的去做对你未来意义重大的事情，为此花费的时间不超过10分钟，大多数人停滞不前，就是因为他们没有拿出这10分钟。</li></ul><h2 id="六、债务"><a href="#六、债务" class="headerlink" title="六、债务"></a><span style="font-size: 18px;">六、债务</span></h2><ul><li>对工作的误解<ul><li>大多数人总认为工作肯定是一件艰苦而令人不愉快的事情。</li><li>做自己喜欢的事的人，才能真正获得成功。</li></ul></li><li>解决负债的4个原则<ul><li>负债的人应当毁掉所有信用卡。</li><li>支付可许可范围内最小的分期付款数目，否则现金流少，再次需要购置什么物件时，又会贷款。</li><li>扣除生活费之后富余的50%的钱再存起来，剩余50%支付消费贷款。<span style="color: #FF0000;">思维转变：一无所有不是我们的目标，不是等到还清债务才开始存钱，而是现在</span>。</li><li>借债前/买东西时问自己：这真的有必要吗？</li></ul></li></ul><h2 id="七、合理分配收入"><a href="#七、合理分配收入" class="headerlink" title="七、合理分配收入"></a><span style="font-size: 18px;">七、合理分配收入</span></h2><ul><li>思维方式<ul><li>为什么不能因为做了喜欢的事情而挣钱呢？（帮别人做了一件事，恰好是自己喜欢的，此时不用因为不好意思而拒绝报酬）</li><li>还会有各种各样的人取笑你，但也会有更多的人认可你。</li><li>想要花钱是正确的，因为这正是钱的用处，但是<span style="color: #FF0000;">如果想要更富有，你同时还要存钱</span>，这笔钱是你绝对不会花的。这笔钱的用处是，为了让你依靠它来生活。（所以不建议存在余额宝这种随时会用的地方）</li></ul></li><li>收入分配<ul><li>收入的一部分是不会花的，留着收利息。一部分是留在梦想储蓄罐中，一部分是用来花的。</li><li>钱的分配：<span style="color: #FF0000;">50%养鹅</span>（单独用张卡定期存款，进行理财投资），<span style="color: #FF0000;">40%梦想储蓄罐</span>（另外一张卡），<span style="color: #FF0000;">10%日常支配</span>（第三张卡）。仅是参考，具体根据自己的实际情况制定收入分配计划。</li></ul></li></ul><h2 id="八、不要杀死你的鹅"><a href="#八、不要杀死你的鹅" class="headerlink" title="八、不要杀死你的鹅"></a><span style="font-size: 18px;">八、不要杀死你的鹅</span></h2><h3 id="1-关于鹅的故事"><a href="#1-关于鹅的故事" class="headerlink" title="1. 关于鹅的故事"></a><span style="font-size: 18px;">1. 关于鹅的故事</span></h3><p>　　从前有个农家小伙子，他每天的愿望就是从鹅笼里捡一个蛋当作早饭，有一天，他竟然在鹅笼里发现了一只金蛋，一开始他当然不敢相信自己的眼睛。他把金蛋拿去让金匠辨认，金匠保证这个蛋完全是金子铸成的。于是，小伙就卖了这个金蛋，举行了盛大的庆祝会。<br>　　第二天清晨，赶到鹅笼里一看，又放着一个金蛋，这样连续好几天，可是这个小伙是一个贪婪的人，他抱怨自己的鹅，因为鹅没法向他解释怎么下的金蛋，否则也许他自己可以制造金蛋，气呼呼的想，这只懒惰的鹅每天至少应该下两只金蛋。他的怒火越来越大，终于，他忍不住把鹅从笼子里揪出来劈成两半。自此，他再也得不到金蛋了。</p><ul><li>讲这个故事，是为了告诉大家不要杀死自己的鹅。</li><li>鹅代表你的钱，如果你存钱，就会得到利息，利息就是你的金蛋。</li></ul><h3 id="2-鹅与梦想难以取舍"><a href="#2-鹅与梦想难以取舍" class="headerlink" title="2. 鹅与梦想难以取舍"></a><span style="font-size: 18px;">2. 鹅与梦想难以取舍</span></h3><p>　　比如，你现在有3000元，可以买自己的心仪已久的电脑或者你可以去某个城市旅游。但是这样也杀死了你的鹅。那是否鹅与梦想难以共存呢？<br>　　你可以总是等不及拿出你的钱，用在任何一个地方，但是这样也就杀死了你的鹅。你也可以选择将一部分钱存起来，那样，一段时间后，也许光靠他每年产生的利息你就可以去某个城市旅游了。</p><ul><li>思维方式：你不必放弃你的鹅或者你的梦想，两件事可以同时进行。比如你挣了1000元，那你可以分配一下这个钱，其中大部分存入银行，一部分存入梦想储蓄罐，剩下的零用。</li></ul><h2 id="九、贫穷更容易产生不幸"><a href="#九、贫穷更容易产生不幸" class="headerlink" title="九、贫穷更容易产生不幸"></a><span style="font-size: 18px;">九、贫穷更容易产生不幸</span></h2><p>　　有的人的观点是，我不需要大富大贵，富人也有很多烦恼，富人更容易变坏，但实际呢？</p><ul><li>我总是为了赚钱而工作，但是一旦有了属于自己的可以生利息的钱，我的钱就自动为我工作了。</li><li>幸运其实只是充分准备加上努力工作的结果。</li><li>你的活最多只占报酬的一般，另一半是因为你的想法和实施这个想法的勇气。</li><li>一个人想要过的更幸福、更满意的生活，就得对自身进行改变，这和钱无关，钱本身既不会使人幸福也不会给人带来不幸。金钱是中性的，只有当钱属于某个人时，他拿去做了好的或坏的事，才会对这个人产生好的或坏的影响。</li></ul><h2 id="十、珍贵的礼物"><a href="#十、珍贵的礼物" class="headerlink" title="十、珍贵的礼物"></a><span style="font-size: 18px;">十、珍贵的礼物</span></h2><ul><li>没有人能强迫你做什么事，只有你自己强迫自己。</li><li>最珍贵的礼物都是自己争取回来的，克服丢掉面子的恐惧，世界会向你敞开大门。</li><li>做喜欢做的事情时，就会抑制住心里的恐惧。</li></ul><h2 id="十一、金钱魔法师"><a href="#十一、金钱魔法师" class="headerlink" title="十一、金钱魔法师"></a><span style="font-size: 18px;">十一、金钱魔法师</span></h2><ul><li>五条咒语<ul><li>确定自己喜欢获得财务上的成功。</li><li>自信、有想法、做自己喜欢做的事。</li><li>把钱分为<span style="color: #FF0000;">日常开销</span>、<span style="color: #FF0000;">梦想目标</span>、<span style="color: #FF0000;">金额账户</span>三部分。</li><li>进行明智的投资。</li><li>享受生活。</li></ul></li><li>3点投资的基本注意事项<ul><li>应该把钱投资在安全的地方。</li><li>我的钱应该下很多蛋。什么地方利息最高：股票。</li><li>我们的投资应该简单明了，需要易于操作。</li></ul></li><li>认识股票<ul><li>看到公司的升值潜力，才会购买股票。</li><li>别人也是相信未来会以一个更高的价格卖出才会从你手上买进股票。</li><li><span style="color: #FF0000;">只有低价出售了股票的时候，才叫亏损。没有卖出，都不算。</span></li><li>红利，将公司利润分配给股东，由股东大会决定，少数服从多数。</li></ul></li></ul><h2 id="十二、投资行动"><a href="#十二、投资行动" class="headerlink" title="十二、投资行动"></a><span style="font-size: 18px;">十二、投资行动</span></h2><ul><li>思维方式<ul><li>学会把某些不擅长的事情交付给别人。</li></ul></li><li>基金<ul><li>专业人士打理。</li><li>分散风险。</li><li>打算投资基金，就是要准备把自己的钱放在里面5-10年。</li><li>如果能等5-10年，基本相当于0风险，因为大多数股票长时间里总能获得丰厚的利润。</li><li>基金完全符合投资的3点基本注意事项。</li></ul></li><li>挑选基金的注意事项<ul><li>基金应该至少有10年的历史，假如在这么长的时间内一直都有丰厚的盈利，那可以认为，未来也运作良好。</li><li>应该选择大型的跨国股票基金，这种基金在世界各地购买，以此分散风险，安全。</li><li>对基金的走势图进行比较，观察过去10年哪些基金的最终获利最好。 </li></ul></li><li>实际操作 <ul><li>基金名单、规模。</li><li>基金近10年和近3年的盈利情况。</li><li>基金购买的股票来自何处。</li><li><span style="color: #FF0000;">72公式算利率</span>：直接用72除以投资年收益率的百分比，得出的数字就是投资的钱翻一倍所需要的年数。<ul><li>72÷12=6，假如每年能得到12%的利润，6年后钱就会翻一倍。</li></ul></li><li><span style="color: #FF0000;">72公式也可以算通货膨胀</span>：它可以告诉我们，在一定通货膨胀率下，我们的钱在多长时间后会贬值一半。<ul><li>72÷3=24，按3%的通货膨胀率计算，得到24，就是说24年以后，你的钱只值现在的一半。</li></ul></li><li>分散投资，不能只买一只基金。</li><li>基金冬天时，也可以是再次买进的时机。</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 诗和远方 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs安装及npm全局设置</title>
      <link href="/blogs/nodejs-install-and-npm-global-config.html"/>
      <url>/blogs/nodejs-install-and-npm-global-config.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">nodejs安装及npm全局设置</div><blockquote><p>nodejs安装及npm镜像源、全局模块路径的设置。</p></blockquote><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a><span style="font-size: 18px;">1. 安装</span></h3><ul><li>Windows<br>　　到<a href="https://nodejs.org/en/" title="Node.js官网" rel="external nofollow noopener noreferrer" target="_blank">Node.js官网</a>下载 .msi 文件，安装好以后在cmd命令中可以使用node命令进入node环境，可使用js语法。<br>　　<code>npm -v</code> 查看npm版本。</li><li>Ubuntu<pre class=" language-bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> nodejsnode -v<span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">npm</span><span class="token function">npm</span> -v</code></pre></li></ul><h3 id="2-设置镜像源"><a href="#2-设置镜像源" class="headerlink" title="2. 设置镜像源"></a><span style="font-size: 18px;">2. 设置镜像源</span></h3><p>　　得到原本的镜像地址：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> get registry</code></pre><p>　　设成淘宝镜像源地址：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry http://registry.npm.taobao.org/</code></pre><p>　　换成原来的（官方地址）：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npmjs.org/</code></pre><h3 id="3-设置npm全局模块路径"><a href="#3-设置npm全局模块路径" class="headerlink" title="3. 设置npm全局模块路径"></a><span style="font-size: 18px;">3. 设置npm全局模块路径</span></h3><p>　　正常情况下，npm全局模块安装的存放路径是在你电脑 <code>C:\Users\你的电脑名称\AppData\Roaming\npm</code> 下的，以及cache路径是在你电脑的 <code>C:\Users\你的电脑名称\AppData\Roaming\npm-cache</code> 下的。</p><p>　　如果不喜欢放在C盘，我们可以调整一下，并把上面的全局模块存放路径和cache路径放到同一个大目录下。例如我希望将以上两个文件夹放在nodejs内。我们在 <code>D:\Program Files\nodejs\</code> 目录下新建两个文件夹：<code>node_global_modules</code> 和 <code>node_cache</code>。</p><p>　　① 启动cmd，输入下面两行命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> prefix <span class="token string">"D:\Program Files\nodejs\node_global_modules"</span><span class="token function">npm</span> config <span class="token keyword">set</span> cache <span class="token string">"D:\Program Files\nodejs\node_cache"</span></code></pre><p>　　② 输入以下命令，查看是否配置成功：（cache和prefix项）</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token function">ls</span></code></pre><p>　　③ 接下来，我们需要修改环境变量，不然全局安装的模块会报错。<br>　　首先在环境变量中，新建一个系统变量, 变量名：<code>NODE_HOME</code>, 变量值：<code>D:\Program Files\nodejs</code><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/node_global_config_system_variable.png" alt="node_global_config_system_variable.png"><br>　　在 <code>Path</code> 变量名中，新建变量值<br>　　<code>%NODE_HOME%</code><br>　　<code>%NOED_HOME%\node_modules</code><br>　　<code>%NODE_HOME%\node_global_modules\</code><br>　　保存<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/node_global_config_path.png" alt="node_global_config_path.png"></p><p>　　④ 现在，安装一个全局模块试试：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g @vue/cli</code></pre><h3 id="4-npm常用命令"><a href="#4-npm常用命令" class="headerlink" title="4. npm常用命令"></a><span style="font-size: 18px;">4. npm常用命令</span></h3><p>　　查看包信息</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> info 包名</code></pre><p>　　查看包的信息中的某个字段（例如查看该包在npm上提供了哪些版本可以下载）（常用）</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> info 包名 versions</code></pre><p>　　查看包的文档</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> docs 包名</code></pre><p>　　查看全局包的下载路径</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> root -g</code></pre><p>　　查看所有全局安装的模块，使用如下命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">ls</span> –g</code></pre><p>　　卸载全局安装模块：（卸载后可以使用 <code>npm ls -g</code> 查看之前安装过的全局模块是否还在）</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> uninstall -g</code></pre><p>　　查看全部npm默认设置</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token function">ls</span> –l</code></pre><p class="reference"><br>参考：npm官方文档<br></p>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《你没有退路，才有出路》读书笔记</title>
      <link href="/blogs/reading-notes-ni-mei-you-tui-lu-cai-you-chu-lu.html"/>
      <url>/blogs/reading-notes-ni-mei-you-tui-lu-cai-you-chu-lu.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">《你没有退路，才有出路》读书笔记</div><blockquote><p>本文是李尚龙《你没有退路，才有出路》一书的读书笔记，推荐这本书的原因是它不灌鸡汤，不打鸡血，不讲虚无的人生大道理，比较务实。</p></blockquote><p><span style="color: #159957;">状态：已读完</span></p><h2 id="一、重塑自我-走出人生迷茫的困局"><a href="#一、重塑自我-走出人生迷茫的困局" class="headerlink" title="一、重塑自我|走出人生迷茫的困局"></a><span style="font-size: 18px;">一、重塑自我|走出人生迷茫的困局</span></h2><h3 id="1-利用好自己的碎片化时间"><a href="#1-利用好自己的碎片化时间" class="headerlink" title="1. 利用好自己的碎片化时间"></a><span style="font-size: 18px; color: #1da7da;">1. 利用好自己的碎片化时间</span></h3><div class="excerpt"><br>　　你要去主动支配自己的碎片化时间，分享几个有效的方法：<br>　　第一，关闭没必要的手机推送、桌面广告。<br>　　第二，在产生心流时拒绝第一时间接电话和回微信。（和父母、朋友解释清楚，久而久之，他们也就习惯了）<br>　　第三，寻找一个不被打扰的地方。<br>　　第四，提前计划碎片化时间的用途。<br>　　第五，把相似的事情放在一起做。<br></div><br><div class="excerpt"><br>　　搜索式学习比彩蛋式学习效果要好得多，带着目的学习效率自然会高，不信你想想，还记得你昨天在抖音刷的第二个视频是什么吗？<br></div><br><div class="excerpt"><br>　　争夺注意力是一切商业活动最底层的逻辑。<br>　　换句话说，无论你做的是什么产品，抢夺注意力都是底层逻辑，而这个时代，抢夺注意力就是抢夺观众的碎片化时间。<br>　　抖音、微博短视频、微信公众号文章，都要求在一分钟之内达到高潮，吸引读者，然后结束。因为你要抢夺的不是被人的整块时间，而是碎片化时间。<br><br>　　<strong>点评：</strong> 如何抢夺人们碎片化时间的注意力：让他们在很短的时间内获得“快感”。如果是综艺节目，要让观众在任何时候打开都能看到爆点。<br></div><br><div class="excerpt"><br>　　碎片化信息增加的是只是的广度，深度没有变。想要提高知识深度，我们需要的是长时间泡在一个环境里，系统地学习。<br><br>　　<strong>点评：</strong> 在写一篇小说之前，可以先把市面上相关类型的小说都买回来，之后三四天把它们看个遍，然后就可以动笔写，这样会对某个话题研究得更有深度。<br></div><br><div class="excerpt"><br>　　我们平时听听碎片付费课程，看看碎片文章，是用来拓宽知识广度的。<br>　　学习了碎片知识，还要在生活里活学活用。<br>　　比如，你知道金鱼的记忆只有七秒。有什么用处呢？<br>　　当遇到健忘的学生，我就可以调侃他：你是金鱼吗，只有七秒的记忆？<br>　　这样灵活运用，你学习的碎片知识就活了，这点很重要，因为你只学死知识是非常可怕的，一知半解的人比无知的人更可怕。<br></div><br><div class="excerpt"><br>　　生活中，你总需要有一段时间可以没什么目的地去做一些事情。比如去吃一顿没吃过的大餐，去一个没去过的地方，见一个许久没见的朋友。这些都是特别美好的事情，之所以美好，是因为都不在你的计划范围内。<br></div><h3 id="2-不想被时代抛弃，培养跨界学习能力"><a href="#2-不想被时代抛弃，培养跨界学习能力" class="headerlink" title="2. 不想被时代抛弃，培养跨界学习能力"></a><span style="font-size: 18px; color:#1da7da;">2. 不想被时代抛弃，培养跨界学习能力</span></h3><div class="excerpt"><br>　　如果一个人你看不出他是从哪儿来的，交往一段时间也不知道他是学什么专业的，这可能是个很厉害的人。<br>　　所谓专业，是指一个人在大学四年被别人安排在某个领域。当你开始解决特定问题的时候，需要的能力肯定不是一个专业的知识能解决得了的。一个人解决的问题越多，他跨越自己专业边界的次数就越多，久而久之，你根本看不出来他是哪个专业的，他就成了一个高手。<br></div><br><div class="excerpt"><br>　　这个时代的高手，一定是具备跨界学习能力的人。换句话说，其实大学四年，你学什么专业不重要，重要的是你要有发现问题和解决问题的能力。<br>　　所以，这个时代需要年轻人做两件事：<br>　　第一：学会跨界，多掌握几门技能，为更好的跳槽做准备。<br>　　第二：学会把这几门技能运用到各自的领域，成为复合型人才。<br></div><br><div class="excerpt"><br>　　当你有了一定的知识储备，就只需要通过不同的方式表达出来，说出来就是演讲家，写出来就是作者，拍出来就是导演，其实方式不重要，重要的是你要有知识储备。这是核心，其他的只是表达方式。<br></div><br><div class="excerpt"><br>　　【二八定律】一个行业，你只有冲到前百分之二十，在职场上才是不可替代的。想要成为这百分之二十非常难。但是，一个人跨两个行业，干成前百分之五十，并不难。<br>　　斜杠不仅能让你到达一个高度，还是对自己的一种保护，在你的职业和所在行业出现问题时，它就是非常好的自保方式。<br></div><br><div class="excerpt"><br>　　跨界的前提有两个：<br>　　第一，要全力以赴，到了尽头再转换，不要干两个月就跑去换其他职业，那才不是斜杠，那是诈和。<br>　　第二，要有知识迁移的能力，步子不能迈得太大。<br><br>　　<strong>点评：</strong> 在自己的本职领域做好，再考虑成为斜杠青年。<br></div><h3 id="3-注意力是可以被训练出来的"><a href="#3-注意力是可以被训练出来的" class="headerlink" title="3. 注意力是可以被训练出来的"></a><span style="font-size: 18px; color:#1da7da;">3. 注意力是可以被训练出来的</span></h3><div class="excerpt"><br>　　根据研究，当你做一件事收到干扰之后，你需要花费整整25分钟才可以重新专注于手上的任务。<br><br>　　有时候抵制诱惑的方式并不是超强的意志力，而是从根源抵制它。这样注意力转移了，人也就控制住诱惑了。<br></div><br><div class="excerpt"><br>　　这一生，我们最有限的是时间，最稀缺的是注意力，最难忘的是青春，最宝贵的是现在。<br></div><h3 id="4-核心竞争力，决定你在职场的价值"><a href="#4-核心竞争力，决定你在职场的价值" class="headerlink" title="4. 核心竞争力，决定你在职场的价值"></a><span style="font-size: 18px; color:#1da7da;">4. 核心竞争力，决定你在职场的价值</span></h3><div class="excerpt"><br>　　<strong>职场讲究价值，你的工资是反映你价值的侧面标准，而一技之长就是你立足职场的价值</strong>，不可替代性就是你在职场的灵魂。<br></div><br><div class="excerpt"><br>　　一个点的价值往往不是由点本身决定的，而是由点所在的坐标系决定的。<br><br>　　传统的职业价值坐标系是这样的：行业 × 企业 × 职业。<br>　　新的职业价值坐标系是这样的：圈子 × 能力 × 特色。<br><br>　　可见，原来的坐标系发生了变化，在互联网时代，个体逐渐从组织里面慢慢解放出来，以自己为中心建立了一个新的职业坐标系。<br></div><br><div class="excerpt"><br>　　所以我建议，如果你还希望做一些不一样的事情，成为一个更好的自己，第一份工作，建议你去找一个没那么体制化的工作，至少去不会因为领导一句话决定你生死的活力型企业。<br></div><br><div class="excerpt"><br>　　按照圈子、能力与特色这个法则，给各位推荐三个方法：<br>　　第一个，持续放大自己的影响力，到更好的圈子里去。<br>　　第二个，持续提高自己的能力与专长，变成一个大神。<br>　　第三个，持续宣扬自己讨人喜欢的人设。<br></div><br><div class="excerpt"><br>　　关于圈子：<br>　　<strong>第一，要走出去，发展自己的圈子，同行圈子甚至是不同的圈子。</strong><br>　　定期跟自己“弱关系圈”（不常见面的朋友）的人见面，互相交流，资源共享，互动会让关系更近。人要有自己的圈子，也要扩大自己的圈子。<br>　　<strong>第二，持续提高自己的能力。</strong><br>　　当我们进入一个圈子，不妨问自己三个问题：<br>　　（1）有什么事，是我在这个圈子里能力占优势的？<br>　　（2）有什么事，是我在这个圈子里面不可替代的？<br>　　（3）有什么事，是我真正感兴趣的？<br>　　如果你能找到这三者的交集，就一定要去做，并且做到极致。<br>　　<strong>第三，放大你的特色。</strong><br>　　进入职场后，要思考属于自己的人设；但在生活里，最好抛弃人设，因为你是有血有肉的人。<br></div><h3 id="5-寻找知识的源头，提高认知效率"><a href="#5-寻找知识的源头，提高认知效率" class="headerlink" title="5. 寻找知识的源头，提高认知效率"></a><span style="font-size: 18px; color:#1da7da;">5. 寻找知识的源头，提高认知效率</span></h3><div class="excerpt"><br>　　要养成一个好习惯：要么证实，要么证伪，要么存疑。<br>　　这是个重要的思考逻辑，但凡一个人向你阐述某个结论，你要么证实；你证明不了，就去证伪，发现也不太好证，可以存疑，等你有了充分的证据再相信。<br>　　了解了一个东西再相信叫信仰，不了解就盲从叫迷信。<br></div><br><div class="excerpt"><br>　　有一个现象，读书越多的人越觉得自己什么都不懂，不读书的人反而觉得别人什么都不懂，这是很可笑的。<br><br></div><br><div class="excerpt"><br>　　习惯的三种分类。（见下图）<br></div><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/three_categories_of_habits.jpg" alt="习惯的三种分类" width="500" hegiht="300" align="center"><br><div class="excerpt"><br>　　有一个现象，读书越多的人越觉得自己什么都不懂，不读书的人反而觉得别人什么都不懂，这是很可笑的。<br></div><h2 id="二、提高情商-做一个高段位沟通者"><a href="#二、提高情商-做一个高段位沟通者" class="headerlink" title="二、提高情商|做一个高段位沟通者"></a><span style="font-size: 18px;">二、提高情商|做一个高段位沟通者</span></h2><h3 id="1-做一个有趣的人，没有那么难"><a href="#1-做一个有趣的人，没有那么难" class="headerlink" title="1. 做一个有趣的人，没有那么难"></a><span style="font-size: 18px; color:#1da7da;">1. 做一个有趣的人，没有那么难</span></h3><div class="excerpt"><br>　　无论科技如何改变，社交软件怎么更新，要抓住“让对方舒服”这个原则。<br></div><br><div class="excerpt"><br>　　直面冷场：“我是不是冷场了？”“不好笑吗？”<br>　　偷换概念：“A：你有《时间简史》吗？B：有，我也不捡那玩意儿。”<br>　　押韵：“怀才和怀孕一样，时间久了才能被发现。”<br></div><h3 id="2-如何正确地和异性相处"><a href="#2-如何正确地和异性相处" class="headerlink" title="2. 如何正确地和异性相处"></a><span style="font-size: 18px; color:#1da7da;">2. 如何正确地和异性相处</span></h3><div class="excerpt"><br>　　五种爱语：<br>　　肯定的言辞：夸奖人的本质是认同，所以夸奖一定要从细节入手，要观察别人，夸奖他期待被人看见的地方。<br>　　精心的时刻：指两个人专注地做一件事，比如干家务，你帮我扶梯子，我来换灯泡，两人产生了“心流”。<br>　　接受礼物：我回到家给你送了一束花等等，这样的方式同样适合对待你的父母。<br>　　服务的行动：做另一半让你做的事情，通过服务，表达你的爱。比如对方一直希望你早起锻炼，为了对方，后来都做到了。<br>　　身体的接触：牵手、拥抱等等。<br></div><br><div class="excerpt"><br>　　女人的话，要听背后的情绪，而不是听表面的意思。<br>　　比如女人说“我们成天宅在家里，都要发霉了！”，这个时候不要反驳说上周刚出去过，她的真实意思是“我想和你出去转一转。”<br></div><br><div class="excerpt"><br>　　男人只要明白，女人说话是种情绪表达，不要只是从字面上去理解，就能避免争吵。<br></div><br><div class="excerpt"><br>　　要记住，和女人说话，千万不要大声，因为你会勾起她的情绪，到时候，一场战斗就来临了。<br></div><h3 id="3-如何与父母进行有效沟通"><a href="#3-如何与父母进行有效沟通" class="headerlink" title="3. 如何与父母进行有效沟通"></a><span style="font-size: 18px; color:#1da7da;">3. 如何与父母进行有效沟通</span></h3><div class="excerpt"><br>　　要多把你看到的、听到的，分享给父母。<br>　　要多问父母一些问题，哪怕你已经有了答案。<br>　　千万不要不耐烦。<br>　　沟通才能减少误会。<br></div><h3 id="4-在职场如何跟领导和同事沟通"><a href="#4-在职场如何跟领导和同事沟通" class="headerlink" title="4. 在职场如何跟领导和同事沟通"></a><span style="font-size: 18px; color:#1da7da;">4. 在职场如何跟领导和同事沟通</span></h3><div class="excerpt"><br>　　沟通的第一法则：让别人舒服。<br></div><br><div class="excerpt"><br>　　大多数的同事，都是最熟悉的陌生人。<br></div><br><div class="excerpt"><br>　　和同事交流的原则：<br>　　第一，有限暴露。不要什么都说，你可以交换的是你的人生观、价值观、世界观。除此之外，不要交换其他的个人信息。<br>　　第二，聊些无关紧要的话题。不要八卦别人的感情，不要谈论谁和谁的关系，更不要背后说别人坏话。要相信，用火烧别人的人，注定会烧到自己。<br></div><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/topic_of_conversation_with_colleagues.jpg" alt="推荐和同事交谈的话题" width="500" hegiht="300" align="center"><br><div class="excerpt"><br>　　分享两招接话的万能语：<br>　　“瞧您说的。”<br>　　“可不是嘛！”<br></div><br><div class="excerpt"><br>　　群居学闭嘴，独处学坚强。<br></div><br><div class="excerpt"><br>　　群居学闭嘴，独处学坚强。<br></div><h3 id="5-朋友之间相处要懂得分寸感"><a href="#5-朋友之间相处要懂得分寸感" class="headerlink" title="5. 朋友之间相处要懂得分寸感"></a><span style="font-size: 18px; color:#1da7da;">5. 朋友之间相处要懂得分寸感</span></h3><div class="excerpt"><br>　　在你失落的时候，陪在你身边；在你得意的时候，提醒你保有平常心。就算许久不联系，见面也不会觉得尴尬，这就是朋友。<br></div><br><div class="excerpt"><br>　　直白不等于低情商。再好的朋友，也经不起你过分直白。伤害了别人的直白，就是自私。<br></div><br><div class="excerpt"><br>　　可以先说优点，然后说有一个不足的地方是什么，最后再加一句：但总体特别好。<br></div><br><div class="excerpt"><br>　　朋友之间不仅要讲道理，还要讲情，如果不是原则性问题，不要总是一副教育别人的样子。<br></div><br><div class="excerpt"><br>　　一位同学被老师批评了，很生气，跟你吐槽，你这个时候应该怎么说？<br>　　A.跟同学分析老师为什么批评他，并告诉他，他这样不对。<br>　　B.跟朋友一起吐槽老师，顺便聊聊以后该怎么办。<br>　　正确答案是B。两种沟通方式最后的效果是一样的，但B叫沟通的艺术，A叫过于直白。<br></div><br><div class="excerpt"><br>　　不要绕开朋友去求朋友的朋友。<br></div><br><div class="excerpt"><br>　　长久的友情一定是要有界限的：朋友让你知道的东西，你可以知道；不让你知道的东西，你不能知道。<br></div><h2 id="三、不甘平庸-越优秀的人生活越自律"><a href="#三、不甘平庸-越优秀的人生活越自律" class="headerlink" title="三、不甘平庸|越优秀的人生活越自律"></a><span style="font-size: 18px;">三、不甘平庸|越优秀的人生活越自律</span></h2><h3 id="1-自律的人，才能获得真正的自由"><a href="#1-自律的人，才能获得真正的自由" class="headerlink" title="1. 自律的人，才能获得真正的自由"></a><span style="font-size: 18px; color:#1da7da;">1. 自律的人，才能获得真正的自由</span></h3><div class="excerpt"><br>　　决定你收入的，不是你的年薪、月薪，而是你的时薪。你的时薪是由你的不可替代性和市场需求决定的。<br></div><br><div class="excerpt"><br>　　当你进入职场初期，啥也别想，埋头苦干，让自己的能力越来越强，让自己的不可替代性越来越高，升职加薪是必然的。<br></div><h3 id="2-真正厉害的人，都是控制情绪的高手"><a href="#2-真正厉害的人，都是控制情绪的高手" class="headerlink" title="2. 真正厉害的人，都是控制情绪的高手"></a><span style="font-size: 18px; color:#1da7da;">2. 真正厉害的人，都是控制情绪的高手</span></h3><div class="excerpt"><br>　　强者是逆着基因生长的。比如我们的基因是容易发怒型的，但我们克制情绪；比如我们的基因让我们很懒，但我们每天早起；基因让我们很馋，但我们锻炼身体。<br></div><h3 id="3-如何正确地使用社交软件"><a href="#3-如何正确地使用社交软件" class="headerlink" title="3. 如何正确地使用社交软件"></a><span style="font-size: 18px; color:#1da7da;">3. 如何正确地使用社交软件</span></h3><div class="excerpt"><br>　　人之所以要见面沟通，是因为见面时表情和语调更丰富，也更能凸显出人和人细腻的交流方式。<br>　　微信只适合打招呼、大概地聊点儿事；选择表情时要斟酌；开口不要问“在吗”，能用文字的，尽量不用语音。<br></div><br><div class="excerpt"><br>　　简单来说，微信群有三个作用：<br>　　1. 收集信息<br>　　2. 结实好朋友<br>　　3. 放大提升个人的影响力，传播名声<br></div><h3 id="4-面对杠精，我们该如何应对"><a href="#4-面对杠精，我们该如何应对" class="headerlink" title="4. 面对杠精，我们该如何应对"></a><span style="font-size: 18px; color:#1da7da;">4. 面对杠精，我们该如何应对</span></h3><div class="excerpt"><br>　　杠精的第一种形式：抓住你的小错误放大，否定你的全部，从而提高自己的优越感。<br>　　杠精的第二种形式：总跟你唱反调；<br>　　杠精的第三种形式：各种人身攻击。<br></div><br><div class="excerpt"><br>　　当你不了解完整情形的时候，不评价就是一种美德。直到今天，除非是调查取证，否则我不会随意去评价别人。<br></div><br><div class="excerpt"><br>　　情绪和事实是两个维度，高手追求的是事实，菜鸟爆发的是情绪。<br></div><br><div class="excerpt"><br>　　一个普通的人，加上匿名性，再拥有了观众，就可能变成混蛋。<br></div><br><div class="excerpt"><br>　　两个怼杠精的方法：<br>　　1. 尽量别搭理他<br>　　2. 以柔克刚，以爱换恨<br></div><h3 id="5-有效扩大自己的交际圈"><a href="#5-有效扩大自己的交际圈" class="headerlink" title="5. 有效扩大自己的交际圈"></a><span style="font-size: 18px; color:#1da7da;">5. 有效扩大自己的交际圈</span></h3><div class="excerpt"><br>　　你发现你进入了高端社交圈，却茫然无措，不知如何使用这些资源。这是因为此时你的层级还不属于这个圈子，你现在的社交或许就是无效社交。<br></div><br><div class="excerpt"><br>　　一个饭局超过了六个人，除非有人会穿针引线，要不然基本上就是无效的沟通了。<br></div><br><div class="excerpt"><br>　　在职场上有一个社交法则：等价交换。等价交换，才能换来等价感情。所有，在你还不够强大的时候，提高自己的能力就显得十分必要。<br></div><br><div class="excerpt"><br>　　提前帮助未来会帮助你的人。<br></div><br><div class="excerpt"><br>　　倾听比表达更重要。<br></div><style type="text/css">    .excerpt {      color:#888;      background-color: #f8f8f8;      padding: 1em 1.5em 1em 1.5em;      position: relative;      font-family: 'Roboto', sans-serif;      line-height: 150%;      text-indent: 35px;    }    .excerpt:before {      color: #1da7da;      content: "\201C";      font-size: 5em;      position:absolute;      left:-55px;      top: 40px;      line-height: 0.1em;    }    .excerpt:after {      color: #1da7da;      content: "\201D";      font-size: 5em;      position:absolute;      right: -15px;      bottom: 0em;      line-height: 0.1em;    }</style>]]></content>
      
      
      <categories>
          
          <category> 诗和远方 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue踩坑：父子组件传值问题</title>
      <link href="/blogs/vue-pit-child-component-value-changes-affect-the-parent-component-value.html"/>
      <url>/blogs/vue-pit-child-component-value-changes-affect-the-parent-component-value.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">Vue踩坑：父子组件传值问题</div><blockquote><p>在用Vue的父子组件传值时遇到一个冷门的问题，子组件改变值后父组件的值也随之改变了，特此记录下原因和解决方式。<br>再系统梳理下JavaScript的深拷贝与浅拷贝相关知识点。</p></blockquote><h3 id="1-问题描述"><a href="#1-问题描述" class="headerlink" title="1. 问题描述"></a><span style="font-size: 18px; color: #19B5FE;">1. 问题描述</span></h3><p>　　父组件传值给子组件，子组件改变传过来的值后，父组件的值也会跟着改变。<br>　　这个问题比较冷门，平时如果对组件通信使用得比较简单，一般不会遇到。</p><h3 id="2-原因剖析"><a href="#2-原因剖析" class="headerlink" title="2. 原因剖析"></a><span style="font-size: 18px; color: #19B5FE;">2. 原因剖析</span></h3><p>　　●　<strong>核心：双向绑定</strong><br>　　　　父子组件传值的时候涉及双向绑定，当传值为 <code>object</code> 类型时，传值之后数据源会被改变。<br>　　●　<strong>深拷贝与浅拷贝</strong><br>　　　　下文详细讲。</p><h3 id="3-解决方案"><a href="#3-解决方案" class="headerlink" title="3. 解决方案"></a><span style="font-size: 18px; color: #19B5FE;">3. 解决方案</span></h3><p>　　我目前采用的解决办法是：<br>　　传值的时候不要直接传数据源，而是通过拷贝或者定义新变量等方式传值。</p><p>　　简单处理就 <code>JSON.parse(JSON.stringify(obj))</code>，但是这种简单粗暴的方法有其局限性。当值为 <code>undefined</code>、<code>function</code>、<code>symbol</code> 会在转换过程中被忽略。所以，对象值有这三种的话用这种方法会导致属性丢失。<br>　　剩下的就是自写深拷贝的工具函数，或者直接借助第三方的库函数，下面展开讲。</p><h3 id="4-深拷贝和浅拷贝"><a href="#4-深拷贝和浅拷贝" class="headerlink" title="4. 深拷贝和浅拷贝"></a><span style="font-size: 18px; color: #19B5FE;">4. 深拷贝和浅拷贝</span></h3><p>　　JavaScript中的浅拷贝与深拷贝，只是针对复杂数据类型（<code>Object</code>，<code>Array</code>）的复制问题。浅拷贝与深拷贝都可以实现在已有对象上再生出一份的作用。但是对象的实例是存储在堆内存中然后通过一个引用值去操作对象，由此拷贝的时候就存在两种情况了：<span style="color: #FF0000;">拷贝引用</span>和<span style="color: #FF0000;">拷贝实例</span>，这也是浅拷贝和深拷贝的区别。<br>　　下图为JavaScript复杂数据类型的浅拷贝示意图：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/javascript_shallow_copy.png" alt="javascript浅拷贝"></p><p>　　●　<strong>浅拷贝</strong><br>　　　　浅拷贝是拷贝引用，拷贝后的引用都是指向同一个对象的实例，彼此之间的操作会互相影响。<br>　　　　值得注意的是：<code>Object.assgin()</code> 是浅拷贝，它只能深拷贝第一层，深层的还是浅拷贝。因为 <code>Object.assign()</code> 拷贝的是属性值。假如源对象的属性值是一个对象的引用，那么它也只指向那个引用。（摘选自MDN）<br>　　　　MDN讲述 <code>assign</code> 的时候，就有一个典型的例子，这里是<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" title="Object.assign()" rel="external nofollow noopener noreferrer" target="_blank">文章链接</a>。</p><p>　　　　下面列举<span style="color: #FF0000;">第一类浅拷贝 - 拷贝原对象的引用</span>：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 对象的浅拷贝 */</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span><span class="token string">'winyuan'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> obj1<span class="token punctuation">;</span>obj2<span class="token punctuation">[</span><span class="token string">'job'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'coder'</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Object {name: "winyuan", age: 22, job: "coder"}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Object {name: "winyuan", age: 0, job: "coder"}</span><span class="token comment" spellcheck="true">/* ------------------------- 华丽的分割线 ------------------------- */</span><span class="token comment" spellcheck="true">/** * 数组的浅拷贝 */</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">;</span>arr2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"test"</span><span class="token punctuation">;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, "test", 3, "4"]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// [1, "test", 3, "4"]</span></code></pre><p>　　　　接下来看<span style="color: #FF0000;">第二类浅拷贝 - 源对象拷贝实例，其属性对象拷贝引用</span>：<br>　　　　这种情况，外层源对象是拷贝实例，如果其属性元素为复杂数据类型（<code>Object</code>、<code>Array</code>）时，内层元素拷贝引用。<br>　　　　对源对象直接操作，不影响另外一个对象，但是对其属性操作时候，会改变另外一个对象的属性的值。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 对象的浅拷贝 * jQuery的 $.extend(a,b) 或 $.extend({},a,b) */</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span><span class="token string">'winyuan'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span>  social<span class="token punctuation">:</span> <span class="token punctuation">{</span>    blog<span class="token punctuation">:</span> <span class="token string">'www.wenyuanblog.com'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  skills<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'js'</span><span class="token punctuation">,</span> <span class="token string">'html'</span><span class="token punctuation">,</span> <span class="token string">'css'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1 <span class="token operator">===</span> obj2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出false，说明外层数组拷贝的是实例</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>social <span class="token operator">===</span> obj2<span class="token punctuation">.</span>social<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出true，说明对于Object类型的属性是拷贝引用</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>skills <span class="token operator">===</span> obj2<span class="token punctuation">.</span>skills<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出true，说明对于Array类型的属性是拷贝引用</span><span class="token comment" spellcheck="true">/** * 对象的浅拷贝 * ES6的 Object.assign() 和 对象扩展运算符... */</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span><span class="token string">'winyuan'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span>  social<span class="token punctuation">:</span> <span class="token punctuation">{</span>    blog<span class="token punctuation">:</span> <span class="token string">'www.wenyuanblog.com'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  skills<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'js'</span><span class="token punctuation">,</span> <span class="token string">'html'</span><span class="token punctuation">,</span> <span class="token string">'css'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1 <span class="token operator">===</span> obj2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出false，说明外层数组拷贝的是实例</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>social <span class="token operator">===</span> obj2<span class="token punctuation">.</span>social<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出true，说明对于Object类型的属性是拷贝引用</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>skills <span class="token operator">===</span> obj2<span class="token punctuation">.</span>skills<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出true，说明对于Array类型的属性是拷贝引用</span><span class="token keyword">var</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>obj1<span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1 <span class="token operator">===</span> obj3<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出false，说明外层数组拷贝的是实例</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>skills <span class="token operator">===</span> obj3<span class="token punctuation">.</span>skills<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出true，说明对于Array类型的属性是拷贝引用</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>skills <span class="token operator">===</span> obj3<span class="token punctuation">.</span>skills<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出true，说明对于Array类型的属性是拷贝引用</span><span class="token comment" spellcheck="true">/* ------------------------- 华丽的分割线 ------------------------- */</span><span class="token comment" spellcheck="true">/** * 数组的浅拷贝 * Array.prototype.slice() */</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"winyuan"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"Evan You"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1 <span class="token operator">===</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出false，说明外层数组拷贝的是实例</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出true，说明其元素拷贝的是引用</span><span class="token comment" spellcheck="true">/** * 数组的浅拷贝 * Array.prototype.concat() */</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"winyuan"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"Evan You"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> arr1<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1 <span class="token operator">===</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出false，说明外层数组拷贝的是实例</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出true，说明其元素拷贝的是引用</span><span class="token comment" spellcheck="true">/** * 数组的浅拷贝 * ES6的 Object.assign() 和 对象扩展运算符... * 由于数组是特殊的对象，所以ES6中的这种方式也可以用于数组 */</span><span class="token keyword">var</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"winyuan"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"Evan You"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">var</span> arr2 <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr1<span class="token punctuation">)</span><span class="token keyword">var</span> arr3 <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>arr1 <span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1 <span class="token operator">===</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出false，说明外层数组拷贝的是实例</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1 <span class="token operator">===</span> arr3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出false，说明外层数组拷贝的是实例</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出true，说明其元素拷贝的是引用</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> arr3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 输出true，说明其元素拷贝的是引用</span></code></pre><p>　　●　<strong>深拷贝</strong><br>　　　　在堆中重新分配内存，并且把源对象所有属性都进行新建拷贝，以保证深拷贝的对象的引用图不包含任何原有对象或对象图上的任何对象，拷贝后的对象与原来的对象是完全隔离，互不影响。<br>　　　　下面列举一些<span style="color: #FF0000;">深拷贝</span>的例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 对象的深拷贝 * JSON.stringify()和JSON.parse() * 这种深拷贝最简单，但有其局限性，上文已经提到过了 */</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span><span class="token string">'winyuan'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span>  social<span class="token punctuation">:</span> <span class="token punctuation">{</span>    blog<span class="token punctuation">:</span> <span class="token string">'www.wenyuanblog.com'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  skills<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'js'</span><span class="token punctuation">,</span> <span class="token string">'html'</span><span class="token punctuation">,</span> <span class="token string">'css'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1 <span class="token operator">===</span> obj2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出false，说明外层数组拷贝的是实例</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>social <span class="token operator">===</span> obj2<span class="token punctuation">.</span>social<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出false，说明对于Object类型的属性也是拷贝实例</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>skills <span class="token operator">===</span> obj2<span class="token punctuation">.</span>skills<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出false，说明对于Array类型的属性也是拷贝实例</span><span class="token comment" spellcheck="true">/** * 对象的深拷贝 * jQuery的 $.extend(true,a,b) */</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span><span class="token string">'winyuan'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span>  social<span class="token punctuation">:</span> <span class="token punctuation">{</span>    blog<span class="token punctuation">:</span> <span class="token string">'www.wenyuanblog.com'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  skills<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'js'</span><span class="token punctuation">,</span> <span class="token string">'html'</span><span class="token punctuation">,</span> <span class="token string">'css'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1 <span class="token operator">===</span> obj2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出false，说明外层数组拷贝的是实例</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>social <span class="token operator">===</span> obj2<span class="token punctuation">.</span>social<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出false，说明对于Object类型的属性也是拷贝实例</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>skills <span class="token operator">===</span> obj2<span class="token punctuation">.</span>skills<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出false，说明对于Array类型的属性也是拷贝实例</span><span class="token comment" spellcheck="true">/** * 对象的深拷贝 * 也可以自己写一个函数实现，用递归+判断，注意别进入死循环就好 * 这里不举例了，以前我整理过一篇常用工具类函数的博客，里面包含了深拷贝函数 */</span><span class="token comment" spellcheck="true">/** * 对象的深拷贝 * lodash的_.cloneDeep */</span><span class="token keyword">var</span> obj1 <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span><span class="token string">'winyuan'</span><span class="token punctuation">,</span>  age<span class="token punctuation">:</span> <span class="token number">22</span><span class="token punctuation">,</span>  social<span class="token punctuation">:</span> <span class="token punctuation">{</span>    blog<span class="token punctuation">:</span> <span class="token string">'www.wenyuanblog.com'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  skills<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'js'</span><span class="token punctuation">,</span> <span class="token string">'html'</span><span class="token punctuation">,</span> <span class="token string">'css'</span><span class="token punctuation">,</span> <span class="token string">'python'</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token keyword">var</span> obj2 <span class="token operator">=</span> _<span class="token punctuation">.</span><span class="token function">cloneDeep</span><span class="token punctuation">(</span>obj1<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1 <span class="token operator">===</span> obj2<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出false，说明外层数组拷贝的是实例</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>social <span class="token operator">===</span> obj2<span class="token punctuation">.</span>social<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出false，说明对于Object类型的属性也是拷贝实例</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj1<span class="token punctuation">.</span>skills <span class="token operator">===</span> obj2<span class="token punctuation">.</span>skills<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 输出false，说明对于Array类型的属性也是拷贝实例</span></code></pre><p>　　以上就是JavaScript中的浅拷贝与深拷贝的知识点，以代码的形式记录下来，方便回顾。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在JS文件中获取Vue组件实例</title>
      <link href="/blogs/vue-get-the-component-instance-in-javascript-file.html"/>
      <url>/blogs/vue-get-the-component-instance-in-javascript-file.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">在JS文件中获取Vue组件实例</div><blockquote><p>在被vue组件引用的javascript文件里获取组件实例this。</p></blockquote><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a><span style="font-size: 18px; color: #19B5FE;">1. 背景</span></h3><p>　　最近在写项目时候遇到这样一个需求：</p><p>　　●　我封装了一个js文件 <code>utils.js</code>，然后在组件 <code>my-component.vue</code> 中引用了该js文件。<br>　　●　在 <code>utils.js</code> 文件中有一些函数，需要操作 <code>my-component.vue</code> 中的 <code>data</code> 和 <code>methods</code>。</p><p>　　为了方便理解，上述js文件和组件名非实际工程中的名字，仅是示例。</p><h3 id="2-思路"><a href="#2-思路" class="headerlink" title="2. 思路"></a><span style="font-size: 18px; color: #19B5FE;">2. 思路</span></h3><p>　　通过调用函数把 <strong>组件实例this</strong>  传递到 <strong>被应用的js文件</strong> 里。</p><h3 id="3-目录结构"><a href="#3-目录结构" class="headerlink" title="3. 目录结构"></a><span style="font-size: 18px; color: #19B5FE;">3. 目录结构</span></h3><pre class=" language-bash"><code class="language-bash">src/├── App.vue├── assets├── main.js├── components└── views    └── demo        ├── my-component.vue        └── utils.js</code></pre><h3 id="4-代码实现"><a href="#4-代码实现" class="headerlink" title="4. 代码实现"></a><span style="font-size: 18px; color: #19B5FE;">4. 代码实现</span></h3><p>　　在 <code>utils.js</code> 中定义一个变量和一个函数，该变量用于存放组件实例 <code>this</code>，该函数用于接收组件实例 <code>this</code>。<br><span style="color: #FF6827;">utils.js</span></p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 用来存放调用此js的vue组件实例（this）</span><span class="token keyword">let</span> vm <span class="token operator">=</span> <span class="token keyword">null</span><span class="token keyword">const</span> sendThis <span class="token operator">=</span> <span class="token punctuation">(</span> _this <span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    vm <span class="token operator">=</span> _this<span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>    sendThis<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 暴露函数</span>    description<span class="token punctuation">:</span> <span class="token string">'我是一个工具类方法'</span><span class="token punctuation">,</span>    <span class="token function">getData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 打印拿到的组件实例</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>vm<span class="token punctuation">.</span>userProfile<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 打印组件中的data</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">callMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      vm<span class="token punctuation">.</span><span class="token function">clearForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 调用组件中的methods</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　在 <code>my-component.vue</code> 中引入 <code>utils.js</code>，然后在钩子函数中调用 <code>utils.js</code> 的 <code>sendThis</code> 方法，把 <code>this</code> 传过去即可。<br><span style="color: #FF6827;">my-component.vue</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-component<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> utils <span class="token keyword">from</span> <span class="token string">'./utils'</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'MyComponent'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      userProfile<span class="token punctuation">:</span> <span class="token string">''</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 发送this 到 js 文件里</span>    utils<span class="token punctuation">.</span><span class="token function">sendThis</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 这个函数会在 utils.js 文件中被调用</span>    <span class="token function">clearForm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 执行一些操作</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 打印 utils.js 中的 description</span>    <span class="token function">showMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>utils<span class="token punctuation">.</span>description<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="5-其它思路"><a href="#5-其它思路" class="headerlink" title="5. 其它思路"></a><span style="font-size: 18px; color: #19B5FE;">5. 其它思路</span></h3><p>　　还有一种思路：</p><p>　　把一些属性和方法挂载到vue实例原型上，自然也就可以在某个js文件中拿到vue实例了。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue监听值改变事件与函数去抖</title>
      <link href="/blogs/vue-on-change-event-and-debounce.html"/>
      <url>/blogs/vue-on-change-event-and-debounce.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">Vue监听值改变事件与函数去抖</div><blockquote><p>在做监听事件时，往往会由于事件频繁被触发，因而频繁执行一些操作，导致页面卡顿甚至浏览器崩溃。</p></blockquote><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a><span style="font-size: 18px; color: #19B5FE;">1. 背景</span></h3><p>　　在做搜索功能时，常常会有这样的需求：用户输入字符，程序向后台请求数据，从而在用户的输入框下拉菜单中提示推荐词。</p><p>　　但这么设计的话会有一些问题：<br>　　●　用户每输入一个字符，就发送一次请求，极大地增加了服务器的负担。<br>　　●　有可能会发生请求返回顺序问题，即当输入速度很快时，连续发请求，服务器可能先返回后面的请求结果，再返回输入第一个字符时的请求结果。这显然不是我们想要的。</p><h3 id="2-思路"><a href="#2-思路" class="headerlink" title="2. 思路"></a><span style="font-size: 18px; color: #19B5FE;">2. 思路</span></h3><p>　　●　vue中实时监听input值的变化，停止输入一定时间（可以是300ms）后才去请求，而不是时时请求数据。<br>　　　　৹　自然而然想到了定时器：在指定间隔内没有输入时，才会执行函数；如果停止输入但是在指定间隔内又输入，会重新触发计时。<br>　　　　৹　这就是 <strong>函数去抖</strong>（debounce）。</p><p>　　●　解决异步请求可能发生先请求后返回问题，导致结果列表不是预料展示的效果。<br>　　　　৹　在请求里做判断，当请求返回结果时，判断<strong>请求的携带的参数</strong>和<strong>当前输入框的值</strong>是否相等，从而进行相关操作。</p><h3 id="3-代码实现-函数去抖"><a href="#3-代码实现-函数去抖" class="headerlink" title="3. 代码实现 - 函数去抖"></a><span style="font-size: 18px; color: #19B5FE;">3. 代码实现 - 函数去抖</span></h3><p><span style="color: #FF6827;">my-component.vue</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>my-component<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>searchKeyword<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>keyword<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>搜索关键字<span class="token punctuation">"</span></span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'MyComponent'</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      keyword<span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>      timeout<span class="token punctuation">:</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  watch<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">keyword</span><span class="token punctuation">(</span>newVal<span class="token punctuation">,</span> oldVal<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 防止input连续输入时，频繁发请求</span>      <span class="token function">clearTimeout</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>timeout<span class="token punctuation">)</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>timeout <span class="token operator">=</span> <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 异步请求</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getMembersData</span><span class="token punctuation">(</span>newVal<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="4-代码实现-返回顺序判断"><a href="#4-代码实现-返回顺序判断" class="headerlink" title="4. 代码实现 - 返回顺序判断"></a><span style="font-size: 18px; color: #19B5FE;">4. 代码实现 - 返回顺序判断</span></h3><p>　　上面的代码中，我们通过 300ms 的延迟来实现函数去抖，但服务器还是可能存在<strong>先请求后返回，后请求先返回</strong>的问题</p><p>　　为了避免这种返回顺序的问题，我们可以在请求里做判断。当请求返回结果时，判断请求的参数<code>keyword</code> 和当前输入框的值 <code>this.keyword</code> 是否相等，如果相等才进行下一步操作。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 关键代码：避免先请求后返回问题，确保返回的结果是以当前输入的值为参数的</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>keyword <span class="token operator">===</span> keyword<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 执行一些操作</span><span class="token punctuation">}</span></code></pre><h3 id="5-一些文章"><a href="#5-一些文章" class="headerlink" title="5. 一些文章"></a><span style="font-size: 18px; color: #19B5FE;">5. 一些文章</span></h3><p>　　<span class="series"><a href="https://blog.csdn.net/duola8789/article/details/78871789" rel="external nofollow noopener noreferrer" target="_blank">《函数去抖（debounce）和函数节流（throttle）》</a></span><br>　　<span class="series"><a href="https://cn.vuejs.org/v2/guide/migration.html#带有-debounce-的-v-model移除" rel="external nofollow noopener noreferrer" target="_blank">《Vue官网：带有 debounce 的 v-model》</a></span></p><style type="text/css">    .series a {        color: #27ae60;        text-decoration:none !important;    }</style>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue项目打包编译优化</title>
      <link href="/blogs/vue-project-compiling-optimization.html"/>
      <url>/blogs/vue-project-compiling-optimization.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">Vue项目打包编译优化</div><blockquote><p>当一个较复杂的vue项目打包后，文件会非常大，而且访问时资源加载速度很慢，所以采取了几种措施来优化。</p></blockquote><h3 id="1-不生成-map文件"><a href="#1-不生成-map文件" class="headerlink" title="1. 不生成.map文件"></a><span style="font-size: 18px; color: #19B5FE;">1. 不生成.map文件</span></h3><p>　　默认情况下，当我们执行 <code>npm run build</code> 命令打包完一个项目后，会得到一个dist目录，里面有一个js目录，存放了该项目编译后的所有js文件。<br>　　我们发现每个js文件都有一个相应的 .map 文件，它们仅是用来调试代码的，可以加快打包速度，但会增大打包体积，线上我们是不需要这个代码的。这里我们需要<span style="color: #FF6827;">配置不生成map文件</span>。</p><p>　　<strong>vue-cli2</strong><br>　　config/index.js文件中，找到 <code>productionSourceMap: true</code> 这一行，将 true 改为 false。</p><p>　　<strong>vue-cli3</strong><br>　　在 vue.config.js 中编写以下内容：</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  productionSourceMap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span></code></pre><h3 id="2-按需引入第三方包"><a href="#2-按需引入第三方包" class="headerlink" title="2. 按需引入第三方包"></a><span style="font-size: 18px; color: #19B5FE;">2. 按需引入第三方包</span></h3><p>　　默认情况下，在打包完后的js文件中，vendor.xxx.js 这个文件是非常大的，它主要是我们用到的第三方包（vue、vue-router、vuex、axios、element-ui等等）。这里面的大部分是我们要用到的功能，而像 element-ui 这种，明显可以按块来分，我们只是用到了里面的个别组件，完全可以把它按需取出，没必要全部打包。</p><p>　　在 element-ui 的官网，介绍了<a href="https://element.eleme.cn/#/zh-CN/component/quickstart" title="按需引入" rel="external nofollow noopener noreferrer" target="_blank">按需引入</a>的方法，借助 babel-plugin-component，我们可以只引入需要的组件，以达到减小项目体积的目的。</p><h3 id="3-路由懒加载"><a href="#3-路由懒加载" class="headerlink" title="3. 路由懒加载"></a><span style="font-size: 18px; color: #19B5FE;">3. 路由懒加载</span></h3><p>　　默认情况下，在打包完后的js文件中，app.xxx.js 这个文件是非常大的，它主要是我们编写的一些组件。那么无法避免的问题就是：当用户访问网页的时候，第一次的请求要加载整个 app.xxx.js，当我们的项目比较复杂的时候，这个文件也是相当大的。</p><p>　　接下来我们要做的，就是路由懒加载。也就是当访问一个页面的时候，只加载当前组件相关的js资源，访问其它页面的时候，再加载相应的组件代码。</p><p>　　通过vue提供的路由懒加载功能，我们能将原来的一个 app.xxx.js 文件，分块分成多个。</p><p>　　① 首先根据官网的说明，我们需要安装一个插件</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> --save-dev @babel/plugin-syntax-dynamic-import</code></pre><p>　　② 然后在 <span style="color: #FF6827;">babel.config.js</span> 中配置如下内容（网上说的是 .babelrc 文件，这是以前的配置格式）：</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"@vue/app"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">"@babel/plugin-syntax-dynamic-import"</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>　　③ 接下来修改路由加载组件部分的代码。<br>　　这是我们原来的路由写法：<br><span style="color: #FF6827;">router.js</span></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Home <span class="token keyword">from</span> <span class="token string">"./views/Home.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> About <span class="token keyword">from</span> <span class="token string">"./views/About.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Form <span class="token keyword">from</span> <span class="token string">"./views/Form.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Table <span class="token keyword">from</span> <span class="token string">"./views/Table.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> NavMenu <span class="token keyword">from</span> <span class="token string">"./views/NavMenu.vue"</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">"history"</span><span class="token punctuation">,</span>  base<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>BASE_URL<span class="token punctuation">,</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">"home"</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Home    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">"/about"</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> About    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">"/form"</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">"myForm"</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Form    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">"/table"</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">"myTable"</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Table    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">"/nav_menu"</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">"myNavMenu"</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> NavMenu    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　这是我们修改完的路由写法：<br><span style="color: #FF6827;">router.js</span></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">"vue-router"</span><span class="token punctuation">;</span><span class="token keyword">const</span> Home <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./views/Home.vue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> About <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./views/About.vue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Form <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./views/Form.vue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Table <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./views/Table.vue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> NavMenu <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">"./views/NavMenu.vue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  mode<span class="token punctuation">:</span> <span class="token string">"history"</span><span class="token punctuation">,</span>  base<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>BASE_URL<span class="token punctuation">,</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">"home"</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Home    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">"/about"</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">"about"</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> About    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">"/form"</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">"myForm"</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Form    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">"/table"</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">"myTable"</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> Table    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">"/nav_menu"</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">"myNavMenu"</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> NavMenu    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　更细节的内容<a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html" title="路由懒加载" rel="external nofollow noopener noreferrer" target="_blank">参见官方文档</a></p><p class="reference"><br>参考<br><a href="https://router.vuejs.org/zh/guide/advanced/lazy-loading.html" rel="external nofollow noopener noreferrer" target="_blank">https://router.vuejs.org/zh/guide/advanced/lazy-loading.html</a><br></p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex冷门知识点和踩坑记录</title>
      <link href="/blogs/vue-vuex-matters-need-attention.html"/>
      <url>/blogs/vue-vuex-matters-need-attention.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">Vuex冷门知识点和踩坑记录</div><blockquote><p>vuex在使用过程中的一些注意点，以及实际项目中踩过的坑。</p></blockquote><h3 id="1-踩坑-业务添加state属性"><a href="#1-踩坑-业务添加state属性" class="headerlink" title="1. 踩坑 - 业务添加state属性"></a><span style="font-size: 18px; color: #19B5FE;">1. 踩坑 - 业务添加state属性</span></h3><p>　　<span style="color: #FF6827;">需求：</span><br>　　在组件中调用一个异步请求，不改变已有的state中的属性，而是在添加一个新的属性（该属性未在state中声明过）。<br><span style="color: #FF6827;">Home.vue</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    {{ getName }}  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> mapGetters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"home"</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span>      <span class="token string">"getName"</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 新添加一个属性</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">"addProps"</span><span class="token punctuation">,</span> <span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>　　<span style="color: #FF6827;">代码编写：</span><br><span style="color: #FF6827;">store.js</span></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>    num<span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">getName</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">addProps</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 添加属性</span>    <span class="token function">addProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span> commit <span class="token punctuation">}</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"addProps"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span></code></pre><p>　　<span style="color: #FF6827;">现象：</span><br>　　通过Chrome插件Vue Devtools可以看到state中确实添加了name属性，并且有值，但是<span style="color: #FF6827;">页面中不显示</span>。</p><p>　　<span style="color: #FF6827;">代码修改：</span><br>　　如果要添加一个当前state中没有的属性，vue要将某一个属性作为响应式的处理，必须要通过 Object.defineProperty 的操作。<br>　　这样的行为其实在一开始state里面已经做了，在最开始拿到state对象后，vue就做了已定义的属性的监视。<br>　　下面修改 <span style="color: #FF6827;">mutations</span> 里的代码：<br><span style="color: #FF6827;">store.js</span></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token punctuation">;</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>    num<span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">getName</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">addProps</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Object.defineProperty 实现响应式（双向数据绑定）</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>state<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实例对象用 .$xxx</span>        <span class="token comment" spellcheck="true">// 构造函数用 .xxx</span>        <span class="token comment" spellcheck="true">// 引入Vue这个构造函数对象</span>        Vue<span class="token punctuation">.</span><span class="token keyword">set</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        state<span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 添加属性</span>    <span class="token function">addProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span> commit <span class="token punctuation">}</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"addProps"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span></code></pre><h3 id="2-细节-模块化后的模块层级"><a href="#2-细节-模块化后的模块层级" class="headerlink" title="2. 细节 - 模块化后的模块层级"></a><span style="font-size: 18px; color: #19B5FE;">2. 细节 - 模块化后的模块层级</span></h3><p>　　<span style="color: #FF6827;">背景：</span><br>　　Vuex 强调使用单一状态树，即在一个项目里只有一个 store，这个 store 集中管理了项目中所有的数据以及对数据的操作行为。但是这样带来的问题是 store 可能会非常臃肿庞大不易维护，所以就需要对状态树进行模块化的拆分。<br>　　所谓模块化，就是除了根 store 以外，还通过 module 将各组件的 store 分开管理，下面我们来看一下代码。</p><p>　　基本的组件化规则：你可以根据项目组件的划分来拆分 store，每个模块里管理着当前组件的状态以及行为，最后将这些模块在根 store 进行组合。<br><span style="color: #FF6827;">store.js</span></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>    state<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    getters<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token punctuation">{</span>    state<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    getters<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    actions<span class="token punctuation">:</span> <span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> moduleA<span class="token punctuation">,</span>        b<span class="token punctuation">:</span> moduleB    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// moduleA 的 state</span></code></pre><p>　　<span style="color: #FF6827;">注意事项：</span><br>　　接下来看 Vuex 核心在模块化后的使用注意事项。</p><p>　　<strong>State</strong><br>　　在 Vuex 模块化中，state 是唯一会根据组合时模块的别名来添加层级的，后面的 getters、mutations 以及 actions 都是直接合并在 store 下。<br>　　例如，访问模块 a 中的 state，要通过 store.state.a，访问根 store 上申明的 state，依然是通过 store.state.xxx 直接访问。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>    state<span class="token punctuation">:</span> <span class="token punctuation">{</span>        maState<span class="token punctuation">:</span> <span class="token string">'A'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token punctuation">{</span>    state<span class="token punctuation">:</span> <span class="token punctuation">{</span>        mbState<span class="token punctuation">:</span> <span class="token string">'B'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> moduleA<span class="token punctuation">,</span>        b<span class="token punctuation">:</span> moduleB    <span class="token punctuation">}</span><span class="token punctuation">,</span>    state<span class="token punctuation">:</span> <span class="token punctuation">{</span>        rtState<span class="token punctuation">:</span> <span class="token string">'Root'</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>a<span class="token punctuation">.</span>maState<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// A</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>b<span class="token punctuation">.</span>mbState<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// B</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>rtState<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Root</span></code></pre><p>　　<strong>Getters</strong><br>　　与 state 不同的是，不同模块的 getters 会直接合并在 store.getters 下。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>    state<span class="token punctuation">:</span> <span class="token punctuation">{</span>        count<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">maGetter</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> getters<span class="token punctuation">,</span> rootState<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> state<span class="token punctuation">.</span>count <span class="token operator">+</span> rootState<span class="token punctuation">.</span>b<span class="token punctuation">.</span>count<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token punctuation">{</span>    state<span class="token punctuation">:</span> <span class="token punctuation">{</span>        count<span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">mbGetter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token string">'Hello Vuex'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token punctuation">{</span>    modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> moduleA<span class="token punctuation">,</span>        b<span class="token punctuation">:</span> moduleB    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>maGetter<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>getters<span class="token punctuation">.</span>mbGetter<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Hello Vuex</span></code></pre><p>　　我们知道 getters 的回调函数所接收的前两个参数分别为 state 和 其他getter，模块化后需要用到第三个参数：rootState。<br>　　（参数：1. state，模块中的 state 仅为模块自身中的 state；2. getters，等同于 store.getters；3. rootState，全局 state）<br>　　通过 rootState，模块中的 getters 就可以引用别的模块中的 state 了，十分方便。<br>　　注意：由于 getters 不区分模块，所以不同模块中的 getters 如果重名，Vuex 会报出 ‘duplicate getter key: [重复的getter名]‘ 错误。</p><p>　　<strong>Mutations</strong><br>　　mutations 与 getters 类似，不同模块的 mutation 均可以通过 store.commit 直接触发。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>    state<span class="token punctuation">:</span> <span class="token punctuation">{</span>        count<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">sayCountA</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Module A count: '</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token punctuation">{</span>    state<span class="token punctuation">:</span> <span class="token punctuation">{</span>        count<span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">sayCountB</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Module B count: '</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token punctuation">{</span>    modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> moduleA<span class="token punctuation">,</span>        b<span class="token punctuation">:</span> moduleB    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'sayCountA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Module A count: 1</span>store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'sayCountB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Module B count: 2 </span></code></pre><p>　　mutation 的回调函数中只接收唯一的参数——当前模块的 state。如果不同模块中有同名的 mutation，Vuex 不会报错，通过 store.commit 调用，会依次触发所有同名 mutation。</p><p>　　<strong>Actions</strong><br>　　与 mutations 类似，不同模块的 actions 均可以通过 store.dispatch 直接触发。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> moduleA <span class="token operator">=</span> <span class="token punctuation">{</span>    state<span class="token punctuation">:</span> <span class="token punctuation">{</span>        count<span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">sayCountA</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Module A count: '</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">maAction</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token punctuation">{</span>            context<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'mbAction'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> moduleB <span class="token operator">=</span> <span class="token punctuation">{</span>    state<span class="token punctuation">:</span> <span class="token punctuation">{</span>        count<span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">sayCountB</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Module B count: '</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span>count<span class="token operator">+</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    action<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token function">mbAction</span><span class="token punctuation">(</span><span class="token punctuation">{</span> commit<span class="token punctuation">,</span> rootState <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'sayCountA'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'sayCountB'</span><span class="token punctuation">,</span> rootState<span class="token punctuation">.</span>a<span class="token punctuation">.</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token punctuation">{</span>    modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>        a<span class="token punctuation">:</span> moduleA<span class="token punctuation">,</span>        b<span class="token punctuation">:</span> moduleB    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'maAction'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Module A count: 1、Module B count: 3</span></code></pre><p>　　从上例可以看出，action 的回调函数接收一个 context 上下文参数，<br>　　context 包含：1. state、2. rootState、3. getters、4. mutations、5. actions 五个属性，为了简便可以在参数中解构。<br>　　在 action 中可以通过 context.commit 跨模块调用 mutation，同时一个模块的 action 也可以调用其他模块的 action。<br>　　同样的，当不同模块中有同名 action 时，通过 store.dispatch 调用，会依次触发所有同名 actions。<br>　　最后有一点要注意的是，将 store 中的 state 绑定到 Vue 组件中的 computed 计算属性后，对 state 进行更改需要通过 mutation 或者 action，在 Vue 组件中直接进行赋值 (this.myState = ‘ABC’) 是不会生效的。</p><h3 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a><span style="font-size: 18px; color: #19B5FE;">未完待续…</span></h3><p>　　后期如果踩过其他有意思的坑或者发现较为冷门的知识点，再更新这篇文章。</p><p class="reference"><br>参考<br><a href="https://juejin.im/post/5c23a440e51d457054162479" rel="external nofollow noopener noreferrer" target="_blank">https://juejin.im/post/5c23a440e51d457054162479</a><br></p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vuex业务模块划分项目实例</title>
      <link href="/blogs/vue-vuex-module-division-in-real-project.html"/>
      <url>/blogs/vue-vuex-module-division-in-real-project.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">Vuex业务模块划分项目实例</div><blockquote><p>在一个多人协作的vue项目中使用vuex，如果能合理的封装module，将业务模块化，将提高开发效率、降低维护成本。这其中就包括封装module、目录层次划分等。<br>（PS：本文代码在vue-cli3构建的基础vue项目之上进行编写：<code>vue create my-project</code>）</p></blockquote><h2 id="一、回顾Vuex基础"><a href="#一、回顾Vuex基础" class="headerlink" title="一、回顾Vuex基础"></a>一、回顾Vuex基础</h2><p>　　首先回顾下Vuex的基础知识。</p><h3 id="1-应用场景"><a href="#1-应用场景" class="headerlink" title="1. 应用场景"></a><span style="font-size: 18px; color: #159957;">1. 应用场景</span></h3><p>　　假设有这样的两个页面，数据一样，就是页面布局不一样。同一份数据，我们在两个页面里面操作两次感觉还行，如果有10个，20个甚至更多的此类页面，那么这就是一个让人奔溃的事情，而且数据的同步刷新也很痛苦。所以就需要Vuex了。<br>　　Vuex是一个专为Vue.js应用程序开发的<span style="color: #FF6827;">状态管理模式</span>。</p><p>　　当然了，虽然Vuex可以帮助我们管理共享状态，但也附带了更多的概念和框架。比如你没有或者只有很少的数据需要在组件间共享，那么使用Vuex是繁琐冗余的，<span style="color: #FF6827;">你也许并不需要Vuex</span>，完全可以采用 cookie，sessionStorage，localstorage 或者 EventBus 等多种实现方式。<br>　　如果你是在构建一个中大型单页应用，有多种状态需要管理，您很可能会考虑如何更好地在组件外部管理状态，或者你需要考虑到系统后续的可扩展性，希望早期就使用这种更成熟的解决方案，那么 <span style="color: #FF6827;">Vuex将是你很好的选择</span>。<br>　　总之根据实际情况，<span style="color: #FF6827;">不要为了使用而使用Vuex</span>。</p><h3 id="2-使用方式"><a href="#2-使用方式" class="headerlink" title="2. 使用方式"></a><span style="font-size: 18px; color: #159957;">2. 使用方式</span></h3><p>　　首先安装vuex（<code>npm install vuex --save</code>），如果是用vue-cli3搭建的vue项目，那么在项目的创建过程中就可以选择预安装了。<br>　　安装完后在 <span style="color: #FF6827;">src目录</span> 下就有了一个文件 <span style="color: #FF6827;">store.js</span>。<br>　　<a href="https://github.com/vuejs/vuex/blob/dev/examples/counter/store.js" title="demo" rel="external nofollow noopener noreferrer" target="_blank">官网demo</a>中示范了store.js中的一般性内容，我们现在写一个如下所示：<br><span style="color: #FF6827;">store.js</span></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1. 引入Vuex对象</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2. 安装插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3.创建store对象并导出</span><span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 配置 module:{state,getter,mutation,action}</span>  state<span class="token punctuation">:</span> <span class="token punctuation">{</span>    num<span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 获取器距离state很近，可以直接拿到state</span>  getters<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">getNum</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> state<span class="token punctuation">.</span>num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 更改也和state很近，</span>  <span class="token comment" spellcheck="true">// 最多可以接收两个参数，第一个参数就是state，第二个参数是传入的数据data</span>  mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">addNumByOne</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>num<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">addNumByNum</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>      state<span class="token punctuation">.</span>num <span class="token operator">+</span><span class="token operator">=</span> num<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// mutations对state的操作只能是同步的，否则会丢失记录</span>  <span class="token comment" spellcheck="true">// 异步处理需要调用action</span>  <span class="token comment" spellcheck="true">// 最多可以接收两个参数，第一个参数是store（整个的store对象），第二个参数是传入的数据</span>  actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">addNumByAction</span><span class="token punctuation">(</span><span class="token punctuation">{</span> commit <span class="token punctuation">}</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 异步操作</span>      <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 调用mutations里的方法来修改state</span>        <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"addNumByNum"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span></code></pre><h3 id="3-注意事项"><a href="#3-注意事项" class="headerlink" title="3. 注意事项"></a><span style="font-size: 18px; color: #159957;">3. 注意事项</span></h3><p>　　vuex有五大核心：State，Getters，Mutations，Actions，Modules。在使用时，前四个如果使用不当，很容易引发问题，例如在mutation执行异步行为，会导致本次改动数据的<span style="color: #FF6827;">记录丢失</span>（通过Chrome插件Vue Devtools可以看到vuex数据快照状态）。<br>　　因此，最<span style="color: #FF6827;">防止出现bug的方式</span>就是：</p><p>　　① <span style="color: #FF6827;">dispatch去调用action</span> → <span style="color: #FF6827;">action去调用mutation</span> → <span style="color: #FF6827;">mutation去更改state</span>，从而改变视图。</p><p>　　② 同时还建议<span style="color: #FF6827;">通过getters去获取数据</span>，以上面的代码为例，不推荐通过<code>$store.state.num</code>方式去直接访问store对象。<br>　　getters一般不直接通过<code>$store.getters.getNum</code>方式来使用，而是<span style="color: #FF6827;">结合组件的computed使用</span>，监视里面属性的更改，从而得到通知。</p><p>　　下面我们来看一个完整的获取/更改store数值的例子，<span style="color: #FF6827;">演示推荐的用法并论证</span>上面的结论。<br><span style="color: #FF6827;">Home.vue</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    获取state数据：    {{ $store.state.num }}      <span class="token comment" spellcheck="true">&lt;!-- 可以这么用，但不推荐 --></span>    {{ $store.getters.getNum }} <span class="token comment" spellcheck="true">&lt;!-- 可以这么用，但不推荐 --></span>    {{ getNum }}                <span class="token comment" spellcheck="true">&lt;!-- 结合computed使用，推荐 --></span>    更改state数据：    <span class="token comment" spellcheck="true">&lt;!--    通过下面三个按钮，分别对应三个方法，论证为什么推荐用：    dispatch去调用action → action去调用mutation → mutation去更改state，从而改变视图。    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addByOne<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>自增1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>              <span class="token comment" spellcheck="true">&lt;!-- 不传递参数 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addByNum<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>增加指定数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!-- 传递参数 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addByAction<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>异步增加指定数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token comment" spellcheck="true">&lt;!-- 异步操作 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> mapGetters <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"home"</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// getters结合computed使用</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token punctuation">[</span>      <span class="token string">"getNum"</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">addByOne</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 不建议直接这么做，会有异步的问题</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"addNumByOne"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">addByNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 不建议直接这么做，会有异步的问题</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"addNumByNum"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">addByAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 推荐：dispatch去调用action → action去调用mutation → mutation去更改state，从而改变视图。</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">"addNumByAction"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="二、单一模块项目-分割文件"><a href="#二、单一模块项目-分割文件" class="headerlink" title="二、单一模块项目 - 分割文件"></a>二、单一模块项目 - 分割文件</h2><h3 id="1-分割标准"><a href="#1-分割标准" class="headerlink" title="1. 分割标准"></a><span style="font-size: 18px; color: #159957;">1. 分割标准</span></h3><p>　　只有一个module（或不分module）时，如果你的 <span style="color: #FF6827;">store.js</span> 文件太大，可以将 state、getter、action、和 mutation 分割到单独的文件，放置于 <span style="color: #FF6827;">store目录</span> 下，然后在该目录下创建  <span style="color: #FF6827;">index.js</span> 来引入这几个文件并导出。<br>　　在main.js中引入store文件夹后，就会默认寻找index文件，接下来的内部逻辑和前面不分割的时候都一样。</p><p>　　看下此时的<span style="color: #FF6827;">src目录下项目结构</span>示例：</p><pre class=" language-bash"><code class="language-bash">├── main.js├── App.vue├── components│   ├── HelloWorld.vue│   └── <span class="token punctuation">..</span>.├── views│   ├── Home.vue│   └── <span class="token punctuation">..</span>.└── store    ├── index.js          <span class="token comment" spellcheck="true"># 引入四个文件并导出store的地方</span>    ├── state.js          <span class="token comment" spellcheck="true"># 存放所有变量</span>    ├── getters.js        <span class="token comment" spellcheck="true"># 获取变量的方法</span>    ├── mutations.js      <span class="token comment" spellcheck="true"># 存放同步读取/修改state的方法</span>    └── actions.js        <span class="token comment" spellcheck="true"># 存放异步读取/修改state的的方法</span></code></pre><h3 id="2-代码演示"><a href="#2-代码演示" class="headerlink" title="2. 代码演示"></a><span style="font-size: 18px; color: #159957;">2. 代码演示</span></h3><p>　　演示此时 <span style="color: #FF6827;">store目录</span> 中的各文件代码内容：<br><span style="color: #FF6827;">index.js</span></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1. 引入Vuex对象</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2. 引入分割出去的四个部分</span><span class="token keyword">import</span> state <span class="token keyword">from</span> <span class="token string">"./state"</span><span class="token punctuation">;</span><span class="token keyword">import</span> getters <span class="token keyword">from</span> <span class="token string">"./getters"</span><span class="token punctuation">;</span><span class="token keyword">import</span> mutations <span class="token keyword">from</span> <span class="token string">"./mutations"</span><span class="token punctuation">;</span><span class="token keyword">import</span> actions <span class="token keyword">from</span> <span class="token string">"./actions"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3. 安装插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 4.创建store对象并导出</span><span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  namespaced<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  state<span class="token punctuation">,</span>  getters<span class="token punctuation">,</span>  mutations<span class="token punctuation">,</span>  actions<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span></code></pre><p><span style="color: #FF6827;">state.js</span></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>  num<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> state<span class="token punctuation">;</span></code></pre><p><span style="color: #FF6827;">getters.js</span></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">getNum</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> state<span class="token punctuation">.</span>num<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">getDoubleNum</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> state<span class="token punctuation">.</span>num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> getters<span class="token punctuation">;</span></code></pre><p><span style="color: #FF6827;">mutations.js</span></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">addNumByOne</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    state<span class="token punctuation">.</span>num<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">addNumByNum</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    state<span class="token punctuation">.</span>num <span class="token operator">+</span><span class="token operator">=</span> num<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> mutations<span class="token punctuation">;</span></code></pre><p><span style="color: #FF6827;">actions.js</span></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">addNumByAction</span><span class="token punctuation">(</span><span class="token punctuation">{</span> commit <span class="token punctuation">}</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 异步操作</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 调用mutations里的方法来修改state</span>      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"addNumByNum"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> actions<span class="token punctuation">;</span></code></pre><h3 id="3-引用方法"><a href="#3-引用方法" class="headerlink" title="3. 引用方法"></a><span style="font-size: 18px; color: #159957;">3. 引用方法</span></h3><p>　　在 <span style="color: #FF6827;">main.js</span> 中引用方法这一步不用修改，和默认的一样就行。<br>　　只需两行：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">"./router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">"./store"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引入store文件</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  router<span class="token punctuation">,</span>  store<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 将store挂载到Vue实例</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　前面也说到过，在main.js中引入store文件夹后，就会默认寻找index文件，接下来的内部逻辑和前面不分割的时候都一样。</p><h2 id="三、多个模块项目-分割模块"><a href="#三、多个模块项目-分割模块" class="headerlink" title="三、多个模块项目 - 分割模块"></a>三、多个模块项目 - 分割模块</h2><h3 id="1-分割标准-1"><a href="#1-分割标准-1" class="headerlink" title="1. 分割标准"></a><span style="font-size: 18px; color: #159957;">1. 分割标准</span></h3><p>　　对于中大型应用，我们会希望把 Vuex 相关代码分割到模块中。<br>　　<a href="https://github.com/vuejs/vuex/tree/dev/examples/shopping-cart/store" title="官网demo" rel="external nofollow noopener noreferrer" target="_blank">官网demo</a>中示范了这种分割方式，我们仿照它写一个如下所示：<br>　　看下此时的<span style="color: #FF6827;">src目录下项目结构</span>示例：</p><pre class=" language-bash"><code class="language-bash">├── main.js├── App.vue├── components│   ├── HelloWorld.vue│   └── <span class="token punctuation">..</span>.├── views│   ├── Home.vue│   └── <span class="token punctuation">..</span>.└── store    ├── index.js          <span class="token comment" spellcheck="true"># 组装模块并导出store的地方</span>    └── modules           <span class="token comment" spellcheck="true"># 拆分出来的各个模块目录</span>        └── num.js        <span class="token comment" spellcheck="true"># num模块对象，包含state，getters，mutations，actions</span>        └── <span class="token punctuation">..</span>.           <span class="token comment" spellcheck="true"># 其它模块对象</span></code></pre><h3 id="2-代码演示-1"><a href="#2-代码演示-1" class="headerlink" title="2. 代码演示"></a><span style="font-size: 18px; color: #159957;">2. 代码演示</span></h3><p>　　演示此时 <span style="color: #FF6827;">store目录</span> 中的各文件代码内容：<br><span style="color: #FF6827;">index.js</span></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1. 引入Vuex对象</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2. 引入模块</span><span class="token keyword">import</span> num <span class="token keyword">from</span> <span class="token string">"./modules/num"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3. 安装插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 4.创建store对象并导出</span><span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 出现同名函数或变量的时候，为了保护其不被覆盖，</span>  <span class="token comment" spellcheck="true">// 在官方文档中还有个命名空间的概念</span>  modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>    num<span class="token punctuation">:</span> num  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span></code></pre><p><span style="color: #FF6827;">num.js</span></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>  num<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">getNum</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> state<span class="token punctuation">.</span>num<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">getDoubleNum</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> state<span class="token punctuation">.</span>num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">addNumByOne</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    state<span class="token punctuation">.</span>num<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">addNumByNum</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    state<span class="token punctuation">.</span>num <span class="token operator">+</span><span class="token operator">=</span> num<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">addNumByAction</span><span class="token punctuation">(</span><span class="token punctuation">{</span> commit <span class="token punctuation">}</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">"addNumByNum"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  namespaced<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  state<span class="token punctuation">,</span>  getters<span class="token punctuation">,</span>  mutations<span class="token punctuation">,</span>  actions<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="3-引用方法-1"><a href="#3-引用方法-1" class="headerlink" title="3. 引用方法"></a><span style="font-size: 18px; color: #159957;">3. 引用方法</span></h3><p>　　（同上，重复内容。为了阅读方便直接复制过来了）<br>　　在 <span style="color: #FF6827;">main.js</span> 中引用方法这一步不用修改，和默认的一样就行。<br>　　只需两行：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">"./router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">"./store"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引入store文件</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  router<span class="token punctuation">,</span>  store<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 将store挂载到Vue实例</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　前面也说到过，在main.js中引入store文件夹后，就会默认寻找index文件，接下来的内部逻辑和前面不分割的时候都一样。</p><h2 id="四、中大型项目-分割模块和文件"><a href="#四、中大型项目-分割模块和文件" class="headerlink" title="四、中大型项目 - 分割模块和文件"></a>四、中大型项目 - 分割模块和文件</h2><h3 id="1-分割标准-2"><a href="#1-分割标准-2" class="headerlink" title="1. 分割标准"></a><span style="font-size: 18px; color: #159957;">1. 分割标准</span></h3><p>　　在一个中大型项目中，我们需要做进一步的分割（同时分割模块和文件）。<br>　　参考我们公司的一个项目，我大致总结了下并稍加演变，下面是项目结构示例：</p><pre class=" language-bash"><code class="language-bash">├── main.js├── App.vue├── components│   ├── HelloWorld.vue│   └── <span class="token punctuation">..</span>.├── views│   ├── Home.vue│   └── <span class="token punctuation">..</span>.└── store    ├── index.js                    <span class="token comment" spellcheck="true"># 组装模块并导出store的地方</span>    └── modules                     <span class="token comment" spellcheck="true"># 拆分出来的各个模块目录</span>        └── module-a                <span class="token comment" spellcheck="true"># 模块a，里面对每一个对象进一步拆分</span>            ├── index.js            <span class="token comment" spellcheck="true"># 引入模块a对象拆分出来的文件，并导出store</span>            ├── state.js            <span class="token comment" spellcheck="true"># 存放所有变量</span>            ├── getters.js          <span class="token comment" spellcheck="true"># 获取变量的方法</span>            ├── mutation-types.js   <span class="token comment" spellcheck="true"># 对mutations的统一管理</span>            ├── mutations.js        <span class="token comment" spellcheck="true"># 存放同步读取/修改state的方法</span>            └── actions.js          <span class="token comment" spellcheck="true"># 存放异步读取/修改state的方法</span>        ├── module-b                <span class="token comment" spellcheck="true"># 模块b</span>        └── <span class="token punctuation">..</span>.                     <span class="token comment" spellcheck="true"># 其它模块</span></code></pre><p>　　细心的你可能发现，我们这里多了一个 <span style="color: #FF6827;">mutation-types.js</span> 文件，我看过一些项目，有的人也喜欢命名成 <span style="color: #FF6827;">types.js</span>。它的作用是什么呢？<br>　　<span style="color: #FF6827;">mutation-types.js</span> 是对mutations的统一管理，将所有函数用常量保存，它里面写的内容一般如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> ADD_NUM_BY_ONE <span class="token operator">=</span> <span class="token string">"addNumByOne"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> ADD_NUM_BY_NUM <span class="token operator">=</span> <span class="token string">"addNumByNum"</span><span class="token punctuation">;</span></code></pre><p>　　这样的好处是：<br>　　●　<strong>多人开发时，对mutations统一管理</strong><br>　　　　将方法（函数）名统一保存后，找函数很直观，维护起来比较方便。<br>　　●　<strong>用常量来引用，可维护性更高</strong><br>　　　　当你想修改一个方法名时，只需在这个文件里修改一次变量的值，而在项目的其它地方引用的都是该变量，不需要逐个去查找和修改。<br>　　●　<strong>可以根据模块分类来给mutation type命名，名字多长都可以，常量名简短就好了</strong><br>　　　　比如：<code>export const RESET_USER_INFO = &quot;user/reset_user_info&quot;;</code>。</p><p>　　注意：<br>　　• <a href="https://vuex.vuejs.org/zh/guide/mutations.html#使用常量替代-mutation-事件类型" title="使用常量替代 Mutation 事件类型" rel="external nofollow noopener noreferrer" target="_blank">使用常量替代 Mutation 事件类型</a>在Vuex的文档中有提及<br>　　• 在[]中放入表达式，计算结果可以当做属性名。这种写法是出自 ES6风格的<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/Object_initializer#计算属性名" title="计算属性命名" rel="external nofollow noopener noreferrer" target="_blank">计算属性命名</a>，待会在 <span style="color: #FF6827;">mutations.js</span> 文件中我们会用到。<br>　　• 如果个人小项目，就没必要特地拆分出 <span style="color: #FF6827;">mutation-types.js</span> 了，转来转去麻烦。</p><h3 id="2-代码演示-2"><a href="#2-代码演示-2" class="headerlink" title="2. 代码演示"></a><span style="font-size: 18px; color: #159957;">2. 代码演示</span></h3><p>　　演示此时 <span style="color: #FF6827;">store目录</span> 中的各文件代码内容：<br><span style="color: #FF6827;">index.js</span></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 1. 引入Vuex对象</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 2. 引入模块</span><span class="token keyword">import</span> moduleA <span class="token keyword">from</span> <span class="token string">"./modules/module-a"</span><span class="token punctuation">;</span><span class="token keyword">import</span> moduleB <span class="token keyword">from</span> <span class="token string">"./modules/module-b"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 3. 安装插件</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 4.创建store对象并导出</span><span class="token keyword">let</span> store <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 出现同名函数或变量的时候，为了保护其不被覆盖，</span>  <span class="token comment" spellcheck="true">// 在官方文档中还有个命名空间的概念</span>  modules<span class="token punctuation">:</span> <span class="token punctuation">{</span>    moduleA<span class="token punctuation">:</span> moduleA<span class="token punctuation">,</span>    moduleB<span class="token punctuation">:</span> moduleB  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> store<span class="token punctuation">;</span></code></pre><p><span style="color: #FF6827;">module-a/index.js</span></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> state <span class="token keyword">from</span> <span class="token string">"./state"</span><span class="token punctuation">;</span><span class="token keyword">import</span> getters <span class="token keyword">from</span> <span class="token string">"./getters"</span><span class="token punctuation">;</span><span class="token keyword">import</span> mutations <span class="token keyword">from</span> <span class="token string">"./mutations"</span><span class="token punctuation">;</span><span class="token keyword">import</span> actions <span class="token keyword">from</span> <span class="token string">"./actions"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>   namespaced<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  state<span class="token punctuation">,</span>  getters<span class="token punctuation">,</span>  mutations<span class="token punctuation">,</span>  actions<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><span style="color: #FF6827;">module-a/state.js</span></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span>  num<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> state<span class="token punctuation">;</span></code></pre><p><span style="color: #FF6827;">module-a/getters.js</span></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">getNum</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> state<span class="token punctuation">.</span>num<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">getDoubleNum</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> state<span class="token punctuation">.</span>num <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> getters<span class="token punctuation">;</span></code></pre><p><span style="color: #FF6827;">module-a/mutation-types.js</span></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token keyword">const</span> ADD_NUM_BY_ONE <span class="token operator">=</span> <span class="token string">"addNumByOne"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">const</span> ADD_NUM_BY_NUM <span class="token operator">=</span> <span class="token string">"addNumByNum"</span><span class="token punctuation">;</span></code></pre><p><span style="color: #FF6827;">module-a/mutations.js</span></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> types <span class="token keyword">from</span> <span class="token string">"./mutation-types"</span><span class="token punctuation">;</span><span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token punctuation">[</span>types<span class="token punctuation">.</span>ADD_NUM_BY_ONE<span class="token punctuation">]</span><span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    state<span class="token punctuation">.</span>num<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span>types<span class="token punctuation">.</span>ADD_NUM_BY_NUM<span class="token punctuation">]</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    state<span class="token punctuation">.</span>num <span class="token operator">+</span><span class="token operator">=</span> num<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> mutations<span class="token punctuation">;</span></code></pre><p><span style="color: #FF6827;">module-a/actions.js</span></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> types <span class="token keyword">from</span> <span class="token string">"./mutation-types"</span><span class="token punctuation">;</span><span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token function">addNumByAction</span><span class="token punctuation">(</span><span class="token punctuation">{</span> commit <span class="token punctuation">}</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 异步操作</span>    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 调用mutations里的方法来修改state</span>      <span class="token function">commit</span><span class="token punctuation">(</span>types<span class="token punctuation">.</span>ADD_NUM_BY_NUM<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> actions<span class="token punctuation">;</span></code></pre><h3 id="3-引用方法-2"><a href="#3-引用方法-2" class="headerlink" title="3. 引用方法"></a><span style="font-size: 18px; color: #159957;">3. 引用方法</span></h3><p>　　（同上，重复内容。为了阅读方便直接复制过来了）<br>　　在 <span style="color: #FF6827;">main.js</span> 中引用方法这一步不用修改，和默认的一样就行。<br>　　只需两行：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">"./router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">"./store"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引入store文件</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  router<span class="token punctuation">,</span>  store<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 将store挂载到Vue实例</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　前面也说到过，在main.js中引入store文件夹后，就会默认寻找index文件，接下来的内部逻辑和前面不分割的时候都一样。</p><h3 id="4-模块中使用"><a href="#4-模块中使用" class="headerlink" title="4. 模块中使用"></a><span style="font-size: 18px; color: #159957;">4. 模块中使用</span></h3><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    获取state数据：    获取state值：{{ myNum }}                     <span class="token comment" spellcheck="true">&lt;!-- 获取state值 --></span>    <span class="token entity" title="&#8195;">&amp;#8195;</span>    通过getters获取值：{{ getNum }}              <span class="token comment" spellcheck="true">&lt;!-- 通过getters获取值 --></span>    <span class="token entity" title="&#8195;">&amp;#8195;</span>    通过getters获取*2后的值：{{ getDoubleNum }}   <span class="token comment" spellcheck="true">&lt;!-- 通过getters获取处理过后的值 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>    更改state数据：    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addNumByOne<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>自增1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                    <span class="token comment" spellcheck="true">&lt;!-- 不传递参数 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addNumByNum(10)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>增加指定数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>           <span class="token comment" spellcheck="true">&lt;!-- 传递参数 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addNumByAction(20)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>异步增加指定数<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>     <span class="token comment" spellcheck="true">&lt;!-- 异步操作 --></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> mapState<span class="token punctuation">,</span> mapGetters<span class="token punctuation">,</span> mapMutations<span class="token punctuation">,</span> mapActions <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"vuex"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"home"</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 模块名（嵌套层级要用模块的别名写清楚）例如：moduleA</span>    <span class="token comment" spellcheck="true">// 获取state值</span>    <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token string">"moduleA"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>      myNum<span class="token punctuation">:</span> state <span class="token operator">=</span><span class="token operator">></span> state<span class="token punctuation">.</span>num    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 通过getters获取值</span>    <span class="token operator">...</span><span class="token function">mapGetters</span><span class="token punctuation">(</span><span class="token string">"moduleA"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>      <span class="token string">"getNum"</span><span class="token punctuation">,</span>      <span class="token string">"getDoubleNum"</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token operator">...</span><span class="token function">mapMutations</span><span class="token punctuation">(</span><span class="token string">"moduleA"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>      <span class="token string">"addNumByOne"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 将 `this.addNumByOne()` 映射为 `this.$store.commit("addNumByOne")`</span>      <span class="token string">"addNumByNum"</span> <span class="token comment" spellcheck="true">// 使用了扩展函数之后，直接在调用的地方传入参数，会自动传递的。；例如`@click(addNumByNum(10))`</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token string">"moduleA"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>      <span class="token string">"addNumByAction"</span> <span class="token comment" spellcheck="true">// 将 `this.addByAction()` 映射为 `this.$store.dispatch("addNumByAction", 20)`，同上，调用的地方传入参数</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>　　以上就是在实际项目中对Vuex的设计与封装，根据我在学习和实际项目中的经验，总结了三类。但这仅是提供思路和简单的实现方法，落实到具体的开发人员和具体的项目，需要具体分析，是否要用Vuex，采用怎样的划分形式，那就是大家为自己项目定制的东西了。</p><p>　　好了，以上就是整篇博客的所有内容，希望对大家有所帮助。如果文中有错误的地方还请大家及时指出。</p><p class="reference"><br>参考<br><a href="https://vuex.vuejs.org/zh/guide/structure.html" rel="external nofollow noopener noreferrer" target="_blank">https://vuex.vuejs.org/zh/guide/structure.html</a><br></p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue开发时配置使用mock数据</title>
      <link href="/blogs/vue-use-mock-data-when-developing.html"/>
      <url>/blogs/vue-use-mock-data-when-developing.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">Vue开发时配置使用mock数据</div><blockquote><p>使用vue-cli3构建vue项目，并配置使用本地开发时的mock数据。请求本地静态文件或使用json-server搭建一台json服务器。<br>（PS：本文代码在vue-cli3构建的基础vue项目之上进行编写：<code>vue create my-project</code>）</p></blockquote><p>　　在日常前后端分离的开发模式中，前端开发者时常需要等待后台接口的确定和完成，这样会处于一个被动的状态，工作效率也不高。</p><p>　　因此，我们一般采用模拟数据（mock）的方式去开发项目，这样会使我们的前后端同时进行，提高团队开发效率。同时，如果有了自主mock的能力，我们甚至可以拿着自己推测的数据结构，找后台同学对接，最起码，这个时候，我们有主动推进的资本，而不是完全被动等待。</p><p>　　下面我整理几种自己在vue中常用的mock方式，根据自己情况选择其中的一种即可。<br>　　当然在最之前，我们需要安装axios，使用命令 <code>npm install axios --save</code> 即可。</p><p>　　PS：这篇博客我使用的是 <span style="color: #FF6827;">vue-cli3</span> 构建的vue项目，使用 vue-cli2 的网上有很多人整理了，需要的话Google一下即可。</p><h2 id="一、请求本地静态mock数据"><a href="#一、请求本地静态mock数据" class="headerlink" title="一、请求本地静态mock数据"></a>一、请求本地静态mock数据</h2><h3 id="1-构造数据"><a href="#1-构造数据" class="headerlink" title="1. 构造数据"></a><span style="font-size: 18px; color: #159957;">1. 构造数据</span></h3><p>　　在 3.x 版本中，因为static目录被移除，新增了public目录，且这个目录下的静态资源不会经过webpack的处理，会被直接拷贝，所以我们能够直接访问到该目录下的资源。<br>　　因此，我们在 <span style="color: #FF6827;">public目录</span> 下创建一个 <span style="color: #FF6827;">mock目录</span>，然后在其中放置 <span style="color: #FF6827;">.json格式的模拟数据文件</span>。<br>　　一般建议<span style="color: #FF6827;">本地mock数据的文件夹层级，与接口url相对应</span>。这样可以通过文件夹名称，快速定位到指定接口返回的mock数据。<br>　　这里简单处理，在 <span style="color: #FF6827;">public/mock/users.js</span> 中写入以下内容：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"users"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"tom"</span><span class="token punctuation">,</span>      <span class="token property">"age"</span><span class="token operator">:</span> <span class="token string">"13"</span><span class="token punctuation">,</span>      <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"tom@qq.com"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"andy"</span><span class="token punctuation">,</span>      <span class="token property">"age"</span><span class="token operator">:</span> <span class="token string">"18"</span><span class="token punctuation">,</span>      <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"andy@qq.com"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"rose"</span><span class="token punctuation">,</span>      <span class="token property">"age"</span><span class="token operator">:</span> <span class="token string">"26"</span><span class="token punctuation">,</span>      <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"rose@qq.com"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2. 配置文件"></a><span style="font-size: 18px; color: #159957;">2. 配置文件</span></h3><p>　　另外由于 3.x 版本移除了 config、build 等配置目录，如果需要进行相关配置我们需要在根目录下创建 vue.config.js 进行配置。<br>　　因此，我们在根目录下新建一个 <span style="color: #FF6827;">vue.config.js</span> 文件，该文件是调整 webpack 配置最简单的方式，将会被 webpack-merge 合并入最终的 webpack 配置中。<br>　　在 <span style="color: #FF6827;">vue.config.js</span> 中编写以下内容：</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"/api"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        target<span class="token punctuation">:</span> <span class="token string">"http://localhost:8080"</span><span class="token punctuation">,</span>        changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设置这个参数可以避免跨域</span>        pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token string">"^/api"</span><span class="token punctuation">:</span> <span class="token string">"/mock"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="3-组件引用"><a href="#3-组件引用" class="headerlink" title="3. 组件引用"></a><span style="font-size: 18px; color: #159957;">3. 组件引用</span></h3><p>　　最后在组件 <span style="color: #FF6827;">Home.vue</span> 中调用这个API，JavaScript代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"home"</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/api/users.json"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="4-运行项目"><a href="#4-运行项目" class="headerlink" title="4. 运行项目"></a><span style="font-size: 18px; color: #159957;">4. 运行项目</span></h3><p>　　执行命令 <code>npm run serve</code> 启动项目，打开页面观察结果。</p><h2 id="二、使用json-server实现mock数据"><a href="#二、使用json-server实现mock数据" class="headerlink" title="二、使用json-server实现mock数据"></a>二、使用json-server实现mock数据</h2><p>　　json-server主要的作用是搭建一台json服务器，从而能够测试一些业务逻辑。</p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a><span style="font-size: 18px; color: #159957;">1. 安装</span></h3><p>　　首先安装 json-server，由于只用于开发环境使用，所以执行如下命令安装：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> json-server --save-dev</code></pre><h3 id="2-构造数据"><a href="#2-构造数据" class="headerlink" title="2. 构造数据"></a><span style="font-size: 18px; color: #159957;">2. 构造数据</span></h3><p>　　在 <span style="color: #FF6827;">public/mock/</span> 目录下创建一个 <span style="color: #FF6827;">db.json</span> 文件，然后写入数据（每一个key对应一个api）：</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"users"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"tom"</span><span class="token punctuation">,</span>      <span class="token property">"age"</span><span class="token operator">:</span> <span class="token string">"13"</span><span class="token punctuation">,</span>      <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"tom@qq.com"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"andy"</span><span class="token punctuation">,</span>      <span class="token property">"age"</span><span class="token operator">:</span> <span class="token string">"18"</span><span class="token punctuation">,</span>      <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"andy@qq.com"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span>      <span class="token property">"id"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>      <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"rose"</span><span class="token punctuation">,</span>      <span class="token property">"age"</span><span class="token operator">:</span> <span class="token string">"26"</span><span class="token punctuation">,</span>      <span class="token property">"email"</span><span class="token operator">:</span> <span class="token string">"rose@qq.com"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token property">"create"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"succeed"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"update"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"succeed"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"delete"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"succeed"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token property">"retrieve"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"code"</span><span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    <span class="token property">"message"</span><span class="token operator">:</span> <span class="token string">"succeed"</span><span class="token punctuation">,</span>    <span class="token property">"data"</span><span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3. 配置文件"></a><span style="font-size: 18px; color: #159957;">3. 配置文件</span></h3><p>　　同样在 <span style="color: #FF6827;">public/mock/</span> 目录下创建一个 <span style="color: #FF6827;">server.js</span> 文件，然后编辑如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> jsonServer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"json-server"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> server <span class="token operator">=</span> jsonServer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> router <span class="token operator">=</span> jsonServer<span class="token punctuation">.</span><span class="token function">router</span><span class="token punctuation">(</span><span class="token string">"./db.json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> middlewares <span class="token operator">=</span> jsonServer<span class="token punctuation">.</span><span class="token function">defaults</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Set default middlewares (logger, static, cors and no-cache)</span>server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>middlewares<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Add custom routes before JSON Server router</span>server<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/echo"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">jsonp</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>query<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// To handle POST, PUT and PATCH you need to use a body-parser</span><span class="token comment" spellcheck="true">// You can use the one used by JSON Server</span>server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>jsonServer<span class="token punctuation">.</span>bodyParser<span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">"POST"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>createdAt <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// Continue to JSON Server router</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// Use default router</span>server<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>router<span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"JSON Server is running at http://localhost:3000/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　设置请求接口代理，在根目录下新建一个 <span style="color: #FF6827;">vue.config.js</span> 文件，并编写以下内容（注意和上面请求本地静态mock数据时的配置略有不同）：</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"/api"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        target<span class="token punctuation">:</span> <span class="token string">"http://localhost:3000"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 通过本地服务器将你的请求转发到3000端口（json-server的端口）</span>        changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 设置这个参数可以避免跨域</span>        pathRewrite<span class="token punctuation">:</span> <span class="token punctuation">{</span>          <span class="token string">"^/api"</span><span class="token punctuation">:</span> <span class="token string">"/"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h3 id="4-组件引用"><a href="#4-组件引用" class="headerlink" title="4. 组件引用"></a><span style="font-size: 18px; color: #159957;">4. 组件引用</span></h3><p>　　最后在组件 <span style="color: #FF6827;">Home.vue</span> 中调用这些API，JavaScript代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"home"</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/api/users"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/api/create"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="5-启动项目和服务器"><a href="#5-启动项目和服务器" class="headerlink" title="5. 启动项目和服务器"></a><span style="font-size: 18px; color: #159957;">5. 启动项目和服务器</span></h3><p>　　执行命令 <code>npm run serve</code> 启动项目，同时在 <span style="color: #FF6827;">public/mock/</span> 目录下执行命令 <code>node server.js</code> 启动 api 服务器。<br>　　此时访问3000端口可以查看api服务器页面，点击api名称可以直接查看返回数据；<br>　　访问8080端口可以进入项目页面，观察结果。</p><h2 id="三、使用mock-js实现mock数据"><a href="#三、使用mock-js实现mock数据" class="headerlink" title="三、使用mock.js实现mock数据"></a>三、使用mock.js实现mock数据</h2><p>　　mock.js是一个模拟后台接口的JS库。它可以在接口没出来时非常方便的模拟数据，用法简单，方便扩展，支持<span style="color: #FF6827;">种类丰富的随机数据</span>，并且它易于扩展，可接受请求参数，根据参数定制数据，足以满足日常开发需求。</p><p>　　该库对开发无侵入，不需要对系统代码进行修改，即可通过<span style="color: #FF6827;">拦截Ajax请求</span>，返回模拟数据以供开发测试使用，当项目上线之后只需取消引用它即可。</p><p>　　接下来演示一下如何在Vue项目中组织和使用mock.js进行数据模拟。</p><h3 id="1-安装-1"><a href="#1-安装-1" class="headerlink" title="1. 安装"></a><span style="font-size: 18px; color: #159957;">1. 安装</span></h3><p>　　首先安装 mock.js，由于只用于开发环境使用，所以执行如下命令安装：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> mockjs --save-dev</code></pre><h3 id="2-编写模拟数据接口"><a href="#2-编写模拟数据接口" class="headerlink" title="2. 编写模拟数据接口"></a><span style="font-size: 18px; color: #159957;">2. 编写模拟数据接口</span></h3><p>　　在 <span style="color: #FF6827;">src目录</span> 下创建一个 <span style="color: #FF6827;">mock目录</span> ，然后在里面创建一个 <span style="color: #FF6827;">index.js</span> 文件，作为mock各个模块的导出点，供 <span style="color: #FF6827;">src/main.js</span> 使用。<br>　　在 <span style="color: #FF6827;">src/mock/modules</span> 目录下，创建 <span style="color: #FF6827;">xxx.js</span> 规则，模拟各个模块数据，供 <span style="color: #FF6827;">mock</span> 使用。<br>　　这样按模块划分后的目录结构大致如下所示：</p><pre class=" language-bash"><code class="language-bash"><span class="token keyword">.</span>├── src<span class="token operator">|</span>   ├── mock<span class="token operator">|</span>       ├── index.js<span class="token operator">|</span>       └── modules  // 各个模块的mock数据<span class="token operator">|</span>           ├── user.js<span class="token operator">|</span>           ├── article.js<span class="token operator">|</span>           └── category.js<span class="token operator">|</span></code></pre><p><span style="color: #FF6827;">index.js</span>代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/** * 定义本地测试接口，最好与正式接口一致，尽可能减少联调阶段修改的工作量 */</span><span class="token comment" spellcheck="true">// 引入mockjs</span><span class="token keyword">import</span> Mock <span class="token keyword">from</span> <span class="token string">"mockjs"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 引入模板函数类</span><span class="token keyword">import</span> user <span class="token keyword">from</span> <span class="token string">"./modules/user"</span><span class="token punctuation">;</span><span class="token keyword">import</span> article <span class="token keyword">from</span> <span class="token string">"./modules/article"</span><span class="token punctuation">;</span><span class="token keyword">import</span> category <span class="token keyword">from</span> <span class="token string">"./modules/category"</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">{</span> mock <span class="token punctuation">}</span> <span class="token operator">=</span> Mock<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Mock函数</span><span class="token comment" spellcheck="true">// 使用拦截规则拦截命中的请求</span><span class="token comment" spellcheck="true">// mock( url, post/get, 返回的数据);</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token regex">/\/api\/users\/login/</span><span class="token punctuation">,</span> <span class="token string">"post"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>login<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token regex">/\/api\/users\/profile/</span><span class="token punctuation">,</span> <span class="token string">"get"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>profile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mock</span><span class="token punctuation">(</span><span class="token regex">/\/api\/users\/logout/</span><span class="token punctuation">,</span> <span class="token string">"post"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>logout<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><span style="color: #FF6827;">user.js</span>代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> Random <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"mockjs"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 导出随机函数</span><span class="token keyword">function</span> <span class="token function">login</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// req是一个请求对象，包含: url，type和body属性</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    code<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      username<span class="token punctuation">:</span> Random<span class="token punctuation">.</span><span class="token function">cname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      token<span class="token punctuation">:</span> Random<span class="token punctuation">.</span><span class="token function">guid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      message<span class="token punctuation">:</span> <span class="token string">"Login successfully."</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">profile</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    code<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      username<span class="token punctuation">:</span> Random<span class="token punctuation">.</span><span class="token function">cname</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      age<span class="token punctuation">:</span> Random<span class="token punctuation">.</span><span class="token function">integer</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      date<span class="token punctuation">:</span> Random<span class="token punctuation">.</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      message<span class="token punctuation">:</span> <span class="token string">""</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">logout</span><span class="token punctuation">(</span>req<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    code<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    data<span class="token punctuation">:</span> <span class="token punctuation">{</span>      message<span class="token punctuation">:</span> <span class="token string">"Logout successfully."</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  login<span class="token punctuation">,</span>  profile<span class="token punctuation">,</span>  logout<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p><span style="color: #FF6827;">article.js</span>和<span style="color: #FF6827;">category.js</span>代码省略。</p><h3 id="3-导入模拟数据接口"><a href="#3-导入模拟数据接口" class="headerlink" title="3. 导入模拟数据接口"></a><span style="font-size: 18px; color: #159957;">3. 导入模拟数据接口</span></h3><p>　　模拟好假数据接口之后，我们还要在 <span style="color: #FF6827;">main.js</span> 中将接口导入，这样在项目中任意组件内都可以请求这些接口了。<br><span style="color: #FF6827;">main.js</span>编辑如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">"vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">"./App.vue"</span><span class="token punctuation">;</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">"./router"</span><span class="token punctuation">;</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">"./store"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 引入mock文件</span><span class="token keyword">import</span> <span class="token string">"./mock"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// mock 方式，正式发布时，注释掉该处即可</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  router<span class="token punctuation">,</span>  store<span class="token punctuation">,</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">"#app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="4-组件引用-1"><a href="#4-组件引用-1" class="headerlink" title="4. 组件引用"></a><span style="font-size: 18px; color: #159957;">4. 组件引用</span></h3><p>　　最后在组件 <span style="color: #FF6827;">Home.vue</span> 中调用这些API，以Home.vue这个组件为例，代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>profile<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>信息<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token entity" title="&#8195;">&amp;#8195;</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logout<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>注销<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"home"</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      username<span class="token punctuation">:</span> <span class="token string">"admin"</span><span class="token punctuation">,</span>      password<span class="token punctuation">:</span> <span class="token string">"password"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token punctuation">{</span> username<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">,</span> password<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token punctuation">}</span><span class="token punctuation">;</span>    axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/api/users/login"</span><span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token function">profile</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      axios<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/api/users/profile"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      axios<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/api/users/logout"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="5-启动项目"><a href="#5-启动项目" class="headerlink" title="5. 启动项目"></a><span style="font-size: 18px; color: #159957;">5. 启动项目</span></h3><p>　　执行命令 <code>npm run serve</code> 启动项目，打开调试窗口，观察打印结果。</p><h3 id="6-注意事项"><a href="#6-注意事项" class="headerlink" title="6. 注意事项"></a><span style="font-size: 18px; color: #159957;">6. 注意事项</span></h3><p>　　●　mock.js依赖中保存着大量用于伪造假数据的静态数据，引入的时候打包得到的文件体积会明显增大，这是正常的。</p><p>　　●　mock.js模拟数据后，会将命中配置规则（正则表达式）的请求拦截，这时候在浏览器的network面板是<span style="color: #FF6827;">无法看到数据返回的</span>，可以通过打印数据的方式观察。</p><p>　　●　当后端写好真实接口以后，<span style="color: #FF6827;">不要忘记</span>注释掉在 <span style="color: #FF6827;">main.js</span> 中引入mock文件的那行代码。你也可以选择删掉创建的 <span style="color: #FF6827;">mock目录</span> 和 <span style="color: #FF6827;">main.js</span> 中的那行代码。</p><h3 id="7-mock-js补充知识点"><a href="#7-mock-js补充知识点" class="headerlink" title="7. mock.js补充知识点"></a><span style="font-size: 18px; color: #159957;">7. mock.js补充知识点</span></h3><p>　　mock.js内含各种内置的API，以及使用方法示例。主要包括以下几类：</p><p>　　●　基础数据类型 (Basic)<br>　　●　日期时间 (Date)<br>　　●　占位图片 (Image)<br>　　●　颜色 (Color)<br>　　●　文本 (Text)<br>　　●　姓名 (Name)<br>　　●　网络相关 (Web)<br>　　●　地址 (Address)<br>　　●　工具函数 (Helper)<br>　　●　等等</p><p>　　具体可以查阅<a href="https://github.com/nuysoft/Mock/wiki/Basic" title="Mockjs API 文档" rel="external nofollow noopener noreferrer" target="_blank">Mockjs API 文档</a></p><p class="reference"><br>参考<br><a href="http://mockjs.com/" rel="external nofollow noopener noreferrer" target="_blank">http://mockjs.com/</a><br><a href="https://segmentfault.com/a/1190000014844604" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000014844604</a><br></p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue封装Axios请求和拦截器</title>
      <link href="/blogs/vue-axios-interceptors-packaging.html"/>
      <url>/blogs/vue-axios-interceptors-packaging.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">Vue封装Axios请求和拦截器</div><blockquote><p>对axios进行封装并将接口统一管理，同时为请求和响应设置拦截器interceptors。<br>（PS：本文代码在vue-cli3构建的基础vue项目之上进行编写：<code>vue create my-project</code>）</p></blockquote><p>　　axios 是一个基于 promise 的 http 库，可以用在浏览器和 node.js 中, 也是vue官方推荐使用的http库。<br>　　axios很好用，其中之一就是<span style="color: #FF6827;">它的拦截器十分强大</span>，我们可以为请求和响应设置拦截器，比如请求拦截器可以在每个请求里加上token，做了统一处理后维护起来也方便，响应拦截器可以在接收到响应后先做一层操作，如根据状态码判断登录状态、授权。</p><p>　　之前初学的时候，经常将axios数据请求写在各组件方法内，但实践证明，如果项目接口变动要修改url地址等参数会比较为麻烦，<span style="color: #FF6827;">不易维护</span>，于是需要对axios进行<span style="color: #FF6827;">封装并将接口统一管理</span>。</p><p>　　当然在最之前，我们需要安装axios，使用命令 <code>npm install axios --save</code> 即可。</p><h2 id="一、新建函数文件"><a href="#一、新建函数文件" class="headerlink" title="一、新建函数文件"></a>一、新建函数文件</h2><p>　　在 <span style="color: #FF6827;">src目录</span> 下新建一个 <span style="color: #FF6827;">axios目录</span>，然后在里面创建 <span style="color: #FF6827;">axios-request.js</span> 和 <span style="color: #FF6827;">axios-api.js</span> 两个文件，<br>　　其中 aixos-request.js 用于对axios进行封装，axios-api.js 用于接口的统一管理。　　</p><h2 id="二、对axios进行封装"><a href="#二、对axios进行封装" class="headerlink" title="二、对axios进行封装"></a>二、对axios进行封装</h2><p><span style="color: #FF6827;">axios-request.js</span>代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> axios <span class="token keyword">from</span> <span class="token string">"axios"</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">{</span> Message <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"element-ui"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 创建一个axios实例</span><span class="token keyword">const</span> axiosService <span class="token operator">=</span> axios<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  baseURL<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>VUE_APP_BASE_API<span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// url = base url + request url</span>  timeout<span class="token punctuation">:</span> <span class="token number">5000</span> <span class="token comment" spellcheck="true">// 设置超时时间为5s</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// request拦截器 ==> 对请求参数进行处理</span>axiosService<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 可以在发送请求之前做些事情</span>    <span class="token comment" spellcheck="true">// 比如请求参数的处理、在headers中携带token等等</span>    <span class="token keyword">return</span> config<span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 处理请求错误</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// for debug</span>    Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// respone拦截器 ==> 对响应做处理</span>axiosService<span class="token punctuation">.</span>interceptors<span class="token punctuation">.</span>response<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>  response <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> res <span class="token operator">=</span> response<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 如果自定义的返回码不等于200, 就返回一个错误</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span>code <span class="token operator">!==</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>message <span class="token operator">||</span> <span class="token string">"Error"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span> error <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 判断error的status代码，并将对应的信息告知用户</span>    <span class="token keyword">let</span> text <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> err <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">switch</span> <span class="token punctuation">(</span>error<span class="token punctuation">.</span>response<span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token number">400</span><span class="token punctuation">:</span>          text <span class="token operator">=</span> <span class="token string">"请求错误(400)，请重新申请"</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">401</span><span class="token punctuation">:</span>          text <span class="token operator">=</span> <span class="token string">"登录错误(401)，请重新登录"</span><span class="token punctuation">;</span>          <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">403</span><span class="token punctuation">:</span>          text <span class="token operator">=</span> <span class="token string">"拒绝访问(403)"</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">404</span><span class="token punctuation">:</span>          text <span class="token operator">=</span> <span class="token string">"请求出错(404)"</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">408</span><span class="token punctuation">:</span>          text <span class="token operator">=</span> <span class="token string">"请求超时(408)"</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">500</span><span class="token punctuation">:</span>          text <span class="token operator">=</span> <span class="token string">"服务器错误(500)，请重启软件或切换功能页！"</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">501</span><span class="token punctuation">:</span>          text <span class="token operator">=</span> <span class="token string">"服务未实现(501)"</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">502</span><span class="token punctuation">:</span>          text <span class="token operator">=</span> <span class="token string">"网络错误(502)"</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">503</span><span class="token punctuation">:</span>          text <span class="token operator">=</span> <span class="token string">"服务不可用(503)"</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">504</span><span class="token punctuation">:</span>          text <span class="token operator">=</span> <span class="token string">"网络超时(504)"</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">505</span><span class="token punctuation">:</span>          text <span class="token operator">=</span> <span class="token string">"HTTP版本不受支持(505)"</span><span class="token punctuation">;</span>          <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>          text <span class="token operator">=</span> <span class="token string">"网络连接出错"</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      text <span class="token operator">=</span> <span class="token string">"连接服务器失败,请退出重试!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">Message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      showClose<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      message<span class="token punctuation">:</span> text<span class="token punctuation">,</span>      type<span class="token punctuation">:</span> <span class="token string">"error"</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> Promise<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 将写好的axios实例暴露出去</span><span class="token keyword">export</span> <span class="token keyword">default</span> axiosService<span class="token punctuation">;</span></code></pre><h2 id="三、对接口进行统一管理"><a href="#三、对接口进行统一管理" class="headerlink" title="三、对接口进行统一管理"></a>三、对接口进行统一管理</h2><p><span style="color: #FF6827;">axios-api.js</span>代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> axiosService <span class="token keyword">from</span> <span class="token string">"./axios-request"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 从axios-request.js内引入axiosService</span><span class="token comment" spellcheck="true">// 下面是POST形式</span><span class="token keyword">export</span> <span class="token keyword">const</span> userLogin <span class="token operator">=</span> data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">axiosService</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">"/xxxx/user/xxxx"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 根据实际接口地址来写</span>    method<span class="token punctuation">:</span> <span class="token string">"post"</span><span class="token punctuation">,</span>    data  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 下面是GET形式</span><span class="token keyword">export</span> <span class="token keyword">const</span> userInfo <span class="token operator">=</span> params <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token function">axiosService</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    url<span class="token punctuation">:</span> <span class="token string">"/xxxx/user/xxxx"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 根据实际接口地址来写</span>    method<span class="token punctuation">:</span> <span class="token string">"get"</span><span class="token punctuation">,</span>    params  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>　　这里要注意下，<span style="color: #FF6827;">post参数放在data内，get参数放在params内</span>！</p><h2 id="四、在组件内使用写好的接口"><a href="#四、在组件内使用写好的接口" class="headerlink" title="四、在组件内使用写好的接口"></a>四、在组件内使用写好的接口</h2><p>　　在组件中使用：<br>　　下面是模拟的一个登录接口，代码不太严谨，仅演示大致用法：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>userLogin<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"@/axios/axios-api"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 引入登录接口函数</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"login"</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>    <span class="token keyword">async</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">let</span> username <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>username<span class="token punctuation">;</span>      <span class="token keyword">let</span> password <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>password<span class="token punctuation">;</span>      <span class="token keyword">let</span> params <span class="token operator">=</span> <span class="token punctuation">{</span>        username<span class="token punctuation">:</span> username<span class="token punctuation">,</span>        password<span class="token punctuation">:</span> password      <span class="token punctuation">}</span><span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>username <span class="token operator">||</span> <span class="token operator">!</span>password<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"账号或密码不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>username<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">51</span> <span class="token operator">&amp;&amp;</span> password<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">51</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">userLogin</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>          <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"账号或密码输入字符不能超过50位"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>　　上面的代码中我们用了 <span style="color: #FF6827;">async await</span>，是ES7新出的特性，具体用法可以Google或者到MDN上查看。</p><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>　　当然也可以不将接口统一管理，而只用axios封装，然后在组件内写异步请求函数。<br>　　以上是个人在之前学习的时候，所用的封装方式，如有错误之处欢迎留言指正。</p><p class="reference"><br>参考<br><a href="https://github.com/PanJiaChen/vue-element-admin" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/PanJiaChen/vue-element-admin</a><br></p><style type="text/css">    .series a {        text-decoration:none !important;    }</style>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue封装全局过滤器Filters</title>
      <link href="/blogs/vue-global-filters-packaging.html"/>
      <url>/blogs/vue-global-filters-packaging.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">Vue封装全局过滤器Filters</div><blockquote><p>通过封装vue全局过滤器实现filters的统一管理。<br>（PS：本文代码在vue-cli3构建的基础vue项目之上进行编写：<code>vue create my-project</code>）</p></blockquote><p>　　在前后端分离的项目中，经常会有后台返回的数据需要经过处理才能显示到页面上的场景。</p><p>　　使用最多的场景就是日期/时间、数字、字符串的格式化处理，实际业务中可能还有更复杂的数据处理逻辑。</p><p>　　下面就拿封装全局的处理数字和字符串的 <span style="color: #FF6827;">filter</span> 来展示 <span style="color: #FF6827;">vue</span> 如何 <span style="color: #FF6827;">封装全局filter</span> 并统一处理。</p><h2 id="一、定义-封装过滤器"><a href="#一、定义-封装过滤器" class="headerlink" title="一、定义/封装过滤器"></a>一、定义/封装过滤器</h2><p>　　在 <span style="color: #FF6827;">src目录</span> 下新建 <span style="color: #FF6827;">filters目录</span> 用来专门存放全局过滤器，如果项目的过滤器过多，那么就要按类型分类。<br>　　如果项目需要前台处理的数据不是太多，那么就在 <span style="color: #FF6827;">filters目录</span> 下新建一个 <span style="color: #FF6827;">index.js</span> 来存放所有的过滤器就足够了。<br><span style="color: #FF6827;">index.js</span>代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 封装过滤器</span><span class="token comment" spellcheck="true">// 过滤器的声明可以有下列多种写法</span><span class="token comment" spellcheck="true">/** * Number formatting by unit * like 10000 => 10k * @param {number} num * @param {number} digits * @return {string} */</span><span class="token keyword">function</span> <span class="token function">numberFormatter</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> digits<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> si <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token number">1e18</span><span class="token punctuation">,</span> symbol<span class="token punctuation">:</span> <span class="token string">"E"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token number">1e15</span><span class="token punctuation">,</span> symbol<span class="token punctuation">:</span> <span class="token string">"P"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token number">1e12</span><span class="token punctuation">,</span> symbol<span class="token punctuation">:</span> <span class="token string">"T"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token number">1e9</span><span class="token punctuation">,</span> symbol<span class="token punctuation">:</span> <span class="token string">"G"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token number">1e6</span><span class="token punctuation">,</span> symbol<span class="token punctuation">:</span> <span class="token string">"M"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">{</span> value<span class="token punctuation">:</span> <span class="token number">1e3</span><span class="token punctuation">,</span> symbol<span class="token punctuation">:</span> <span class="token string">"k"</span> <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> si<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">>=</span> si<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">(</span>num <span class="token regex">/ si[i].value + 0.1).toFixed(digits).replace(/\.0+$|(\.[0-9]*[1-9])0+$/</span><span class="token punctuation">,</span> <span class="token string">'$1'</span><span class="token punctuation">)</span> <span class="token operator">+</span> si<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>symbol    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> num<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Number formatting by thousand * like 10000 => "10,000" * @param {number} num * @return {string} */</span><span class="token keyword">const</span> toThousandFilter <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">+</span>num <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/^-?\d+/g</span><span class="token punctuation">,</span> m <span class="token operator">=</span><span class="token operator">></span> m<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex">/(?=(?!\b)(\d{3})+$)/g</span><span class="token punctuation">,</span> <span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Upper case first char * like "wenyuan" => "Wenyuan" * @param {string} string * @return {string} */</span><span class="token keyword">const</span> uppercaseFirst <span class="token operator">=</span> string <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> string<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> string<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  numberFormatter<span class="token punctuation">,</span>  toThousandFilter<span class="token punctuation">,</span>  uppercaseFirst<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="二、注册过滤器"><a href="#二、注册过滤器" class="headerlink" title="二、注册过滤器"></a>二、注册过滤器</h2><p>　　然后在 <span style="color: #FF6827;">main.js</span> 中引入注册即可使用：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> filters <span class="token keyword">from</span> <span class="token string">"./filters"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// global filters</span><span class="token comment" spellcheck="true">// register global utility filters</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>filters<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>key <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  Vue<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> filters<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/vue_register_global_filters.png" alt="vue_register_global_filters.png"></p><h2 id="三、在组件内使用写好的过滤器"><a href="#三、在组件内使用写好的过滤器" class="headerlink" title="三、在组件内使用写好的过滤器"></a>三、在组件内使用写好的过滤器</h2><p>　　在组件中使用：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Vue logo<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>../assets/logo.png<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>score：{{ score | numberFormatter }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>score：{{ score | toThousandFilter }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>username：{{ username | uppercaseFirst }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">"home"</span><span class="token punctuation">,</span>  components<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      score<span class="token punctuation">:</span> <span class="token number">1200000</span><span class="token punctuation">,</span>      username<span class="token punctuation">:</span> <span class="token string">"wenyuan"</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="四、效果"><a href="#四、效果" class="headerlink" title="四、效果"></a>四、效果</h2><p><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/vue_use_global_filters_result.png" alt="vue_use_global_filters_result.png"></p><h2 id="五、可能的报错与注意点"><a href="#五、可能的报错与注意点" class="headerlink" title="五、可能的报错与注意点"></a>五、可能的报错与注意点</h2><p>　　在 <span style="color: #FF6827;">main.js</span> 中，要<span style="color: #FF6827;">先定义过滤器, 再新建 vue 实例</span>，否则会报<span style="color: #FF6827;">Failed to resolve filter: xxx</span>的错误。</p><p class="reference"><br>参考<br><a href="https://cn.vuejs.org/v2/guide/filters.html" rel="external nofollow noopener noreferrer" target="_blank">https://cn.vuejs.org/v2/guide/filters.html</a><br></p><style type="text/css">    .series a {        text-decoration:none !important;    }</style>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue插件Plugins的简单例子</title>
      <link href="/blogs/vue-plugins-simple-demo.html"/>
      <url>/blogs/vue-plugins-simple-demo.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">Vue插件Plugins的简单例子</div><blockquote><p>通过vue插件，我们能够给vue原型挂载属性、注册全局组件或过滤器。<br>（PS：本文代码在vue-cli3构建的基础vue项目之上进行编写：<code>vue create my-project</code>）</p></blockquote><p>　　初学vue的时候，一直都觉得插件（plugins）这个功能生涩难懂，但是在公司项目里见过不少。后来基于vue开发了一段时间，再回顾官方文档，写个插件其实也非常简单。<br>　　这篇文章就是通过一个简单的例子，总结一下这个过程，加深记忆，也希望可以帮助后来的人。</p><h2 id="一、插件是什么"><a href="#一、插件是什么" class="headerlink" title="一、插件是什么"></a>一、插件是什么</h2><p>　　我们在vue中，经常会通过全局方法<code>Vue.use()</code>来使用插件，且这一步需要在你调用 new Vue() 启动应用之前完成。例如：<code>Vue.use(VueRouter)</code>、<code>Vue.use(Vuex)</code>、<code>Vue.use(MintUI)</code>。但是用axios时，就不需要用<code>Vue.use(axios)</code>，就能直接使用，这是为什么呢？<br>　　因为axios没有install。有人打趣说，axios是国际的，不去买vue的账，因此它没去实现vue的插件。但是如果我们自己去写个插件，去实现类似<code>Vue.prototype.$axios = Axios</code>这种事情，也是可以的。</p><p>　　由上可知，所谓vue的插件，就是有install的组件（这么说可能比较狭隘，但有这么个意思），具体实现方式看完之后就明白了。</p><p>　　而vue插件有什么用呢，随便举个例子：例如在一个项目中，有很多部分需要复用，比如加载的loading动画，弹出框。如果一个一个的引用也稍显麻烦，而且在一个vue文件中引用的组件多了，会显得代码臃肿，所以才有了封装vue插件的需求。</p><h2 id="二、使用方法"><a href="#二、使用方法" class="headerlink" title="二、使用方法"></a>二、使用方法</h2><p>　　首先<a href="/blogs/vue-cli3x-to-create-vue-project.html" title="通过vue-cli创建一个vue项目">通过vue-cli创建一个vue项目</a>，很简单，执行命令：</p><pre class=" language-bash"><code class="language-bash">vue create my-project</code></pre><p>　　编写插件的总体流程：声明插件 - 写插件 - 注册插件 - 使用插件<br>　　下面开始编写一个安装器插件，通过这个过程来学习。</p><h3 id="1-声明插件"><a href="#1-声明插件" class="headerlink" title="1. 声明插件"></a><span style="font-size: 18px; color: #159957;">1. 声明插件</span></h3><p>　　首先在 <span style="color: #FF6827;">src目录</span> 下创建一个 <span style="color: #FF6827;">plugins目录</span>，然后在该目录下创建一个<span style="color: #FF6827;">installer.js</span>，如下图所示：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/vue_plugins_create.png" alt="vue_plugins_create.png"><br>　　它要实现的功能其实只用包含一个叫作install的函数（无论导出的是对象还是其它，必须具备install函数）。这里我们定义一个构造函数Installer（安装器）。</p><h3 id="2-注册插件"><a href="#2-注册插件" class="headerlink" title="2. 注册插件"></a><span style="font-size: 18px; color: #159957;">2. 注册插件</span></h3><p>　　在<span style="color: #FF6827;">main.js</span>中引入插件，如下图所示：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/vue_plugins_register.png" alt="vue_plugins_register.png"><br>　　因为Installer本身包含一个install函数，所以可以给它直接用<code>Vue.use(Installer)</code>。</p><p>　　这个时候执行<code>npm run serve</code>然后访问页面，可以看到执行了在<span style="color: #FF6827;">installer.js</span>里的<code>console.log(Vue)</code>内容，即在插件中可以拿到Vue。</p><h3 id="3-写插件"><a href="#3-写插件" class="headerlink" title="3. 写插件"></a><span style="font-size: 18px; color: #159957;">3. 写插件</span></h3><p>　　下面开始编写插件，我们实现两个功能：<br>　　●　注册全局组件<br>　　　　৹　注册一个test组件<br>　　●　挂载属性<br>　　　　৹　挂载一个<code>$log</code>属性，这里是一个函数<br><span style="color: #FF6827;">installer.js</span>代码如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// vue插件必须具备Install函数</span><span class="token keyword">function</span> <span class="token function">Installer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 自身初始化行为</span><span class="token punctuation">}</span>Installer<span class="token punctuation">.</span>install <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>Vue<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 接收Vue的构造函数，给原型挂载属性 或 注册全局组件 或 过滤器</span>  <span class="token comment" spellcheck="true">// console.log(Vue);</span>  <span class="token comment" spellcheck="true">// 1.注册全局组件</span>  Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    template<span class="token punctuation">:</span> <span class="token template-string"><span class="token string">`&lt;h1>我是在Installer（安装器）插件中注册的全局组件&lt;/h1>`</span></span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 2.挂载属性（方法一）</span>  <span class="token comment" spellcheck="true">// 这个方法不好，因为未来可以通过 this.$log = xxx 来实现子类对象修改父类属性</span>  <span class="token comment" spellcheck="true">/*  Vue.prototype.$log = function() {    console.log("hello world");  };  */</span>  <span class="token comment" spellcheck="true">// 2.挂载属性（方法二）</span>  <span class="token comment" spellcheck="true">// 给原型定义属性的获取和设置（不给设置，只给获取）</span>  <span class="token keyword">let</span> log <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Installer（安装器）插件中的log函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>Vue<span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> <span class="token string">"$log"</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 定义set：设置$log属性时的行为 或者 不定义set：不能设置$log属性</span>    <span class="token keyword">set</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>newV<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`你不能设置：</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>newV<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 不让 $log = newV</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token keyword">get</span><span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> log<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> Installer<span class="token punctuation">;</span></code></pre><h3 id="4-使用插件"><a href="#4-使用插件" class="headerlink" title="4. 使用插件"></a><span style="font-size: 18px; color: #159957;">4. 使用插件</span></h3><p>　　回到<span style="color: #FF6827;">Home.vue</span>，使用插件，如下图所示：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/vue_plugins_use.png" alt="vue_plugins_use.png"><br>　　执行<code>npm run serve</code>然后访问页面，打开console，查看结果，如下图所示：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/vue_plugins_result.png" alt="vue_plugins_result.png"></p><h2 id="三、可能的报错"><a href="#三、可能的报错" class="headerlink" title="三、可能的报错"></a>三、可能的报错</h2><p>　　如果执行<code>npm run serve</code>后访问页面出现报错，<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/vue_runtime-only_build_error.png" alt="vue_runtime-only_build_error.png"><br>　　<strong>报错原因：</strong><br>　　这里引用的是vue.runtime.esm.js，造成的不能正常运行。<br>　　<strong>解决方法：</strong><br>　　这里我们使用的是vue-cli3x搭建的vue项目，在项目的根目录下添加配置文件<span style="color: #FF6827;">vue.config.js</span>，目的是修改在引入vue时，不要采用runtime形式的文件,而采用 dist/vue.esm.js形式文件，然后将下面这段代码复制粘贴到<span style="color: #FF6827;">vue.config.js</span>中：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">resolve</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  configureWebpack<span class="token punctuation">:</span> config <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    config<span class="token punctuation">.</span>resolve <span class="token operator">=</span> <span class="token punctuation">{</span>      extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">".js"</span><span class="token punctuation">,</span> <span class="token string">".vue"</span><span class="token punctuation">,</span> <span class="token string">".json"</span><span class="token punctuation">,</span> <span class="token string">".css"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>        vue$<span class="token punctuation">:</span> <span class="token string">"vue/dist/vue.esm.js"</span><span class="token punctuation">,</span>        <span class="token string">"@"</span><span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>　　重启服务，刷新，正常显示。</p><p class="reference"><br>参考<br><a href="https://cn.vuejs.org/v2/guide/plugins.html" rel="external nofollow noopener noreferrer" target="_blank">https://cn.vuejs.org/v2/guide/plugins.html</a><br><a href="https://blog.csdn.net/weixin_41791279/article/details/87936892" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/weixin_41791279/article/details/87936892</a><br></p><style type="text/css">    .series a {        text-decoration:none !important;    }</style>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue CLI 3.x搭建Vue项目</title>
      <link href="/blogs/vue-cli3x-to-create-vue-project.html"/>
      <url>/blogs/vue-cli3x-to-create-vue-project.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">Vue CLI 3.x搭建Vue项目</div><blockquote><p>使用vue-cli3.x脚手架搭建一个vue项目，以及目录结构分析。</p></blockquote><h2 id="一、Node安装"><a href="#一、Node安装" class="headerlink" title="一、Node安装"></a>一、Node安装</h2><p>　<span style="font-size: 18px;"><strong>windows</strong></span><br>　1. Node.js （&gt;=8.9, 推荐8.11.0+）<br>　　<a href="https://nodejs.org/en/" title="Node官网" rel="external nofollow noopener noreferrer" target="_blank">Node官网</a>下载 .msi 文件，按步骤下载安装即可。<br>　　安装完之后在cmd中输入 <code>node -v</code>，若显示版本号，则说明安装成功。<br>　2. Git（命令行终端）<br>　　<a href="https://git-scm.com/" title="git官网" rel="external nofollow noopener noreferrer" target="_blank">Git官网</a>下载安装即可。</p><p>　<span style="font-size: 18px;"><strong>linux</strong></span></p><pre class=" language-bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> nodejsnode -v<span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">npm</span><span class="token function">npm</span> -v</code></pre><p>　<span style="font-size: 18px;"><strong>npm命令</strong></span><br>　1. 得到原本的镜像地址</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> get registry</code></pre><p>　2. 设成淘宝的</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry http://registry.npm.taobao.org/</code></pre><p>　3. 换成原来的</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npmjs.org/</code></pre><h2 id="二、vue-cli安装、更新"><a href="#二、vue-cli安装、更新" class="headerlink" title="二、vue-cli安装、更新"></a>二、vue-cli安装、更新</h2><p>　　如果全局安装过旧版本的 vue-cli(1.x 或 2.x)要先卸载它，否则跳过此步。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> uninstall vue-cli -g</code></pre><p>　　操作如下：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/uninstall_vue_cli2.x.png" alt="uninstall_vue_cli2.x.png"><br>　　可以看到我之前的版本是2.9.6，卸载成功后，vue命令便不存在了。<br>　　ps：如果有npm WARN警告，可能是coffee-script的某个依赖包改名了（coffee-script本身已经淘汰了）。</p><p>　　下面开始全局安装 <span style="color: #FF6827;">@vue/cli</span>（Vue CLI 3的包名称由<span style="color: #FF6827;">vue-cli</span>改成了<span style="color: #FF6827;">@vue/cli</span>）：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g @vue/cli</code></pre><p>　　更新：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> update @vue/cli</code></pre><p>　　查看安装成功否（有版本号就是成功，V大写）</p><pre class=" language-bash"><code class="language-bash">vue -V</code></pre><h2 id="三、vue-cli搭建vue项目"><a href="#三、vue-cli搭建vue项目" class="headerlink" title="三、vue-cli搭建vue项目"></a>三、vue-cli搭建vue项目</h2><p>　　执行如下命令即可（注意该命令跟vue-cli2.x不同）。</p><pre class=" language-bash"><code class="language-bash">vue create <span class="token operator">&lt;</span>Project Name<span class="token operator">></span>  // 文件名 不支持驼峰（含大写字母）</code></pre><p>　　但<span style="color: #FF6827;">如果是在windows环境下直接使用 Git Bash</span>，交互提示符并不工作，必须通过如下命令来创建项目：</p><pre class=" language-bash"><code class="language-bash">winpty vue.cmd create my-project</code></pre><p>　　具体操作如下：<br>　　首先，会提示你选择一个preset（预设）：<br>　　如果之前配置保存过，那么有<span style="color: #FF6827;">preset-config</span>选项，可以直接用。<br>　　如果没有配置保存过，则只有两个选项：<br>　　<span style="color: #FF6827;">default（babel，eslint）</span>：默认设置（直接enter）非常适合快速创建一个新项目的原型，没有带任何辅助功能的npm包。<br>　　<span style="color: #FF6827;">Manually select features</span>：手动配置（按方向键 ↓）是我们所需要的面向生产的项目，提供可选功能的npm包。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/vue_cli3x_create_preset.png" alt="vue_cli3x_create_preset.png"><br>　　我们选择手动配置，根据你需要用方向键选择（按“空格键”选择/取消选择，A键全选/取消全选）对应功能。<br>　　为了方便稍后跟用vue-cli2.x创建的项目结构作对比，我们这边仅添加Router而不添加Vuex。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/vue_cli3x_create_features.png" alt="vue_cli3x_create_features.png"><br>　　简介：</p><pre class=" language-bash"><code class="language-bash">? Check the features needed <span class="token keyword">for</span> your project:<span class="token operator">></span><span class="token punctuation">(</span> <span class="token punctuation">)</span> Babel                              // 转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。                       <span class="token punctuation">(</span> <span class="token punctuation">)</span> TypeScript  // TypeScript是一个JavaScript（后缀.js）的超集（后缀.ts）包含并扩展了 JavaScript 的语法，需要被编译输出为JavaScript在浏览器运行，目前较少人在用 <span class="token punctuation">(</span> <span class="token punctuation">)</span> Progressive Web App <span class="token punctuation">(</span>PWA<span class="token punctuation">)</span> Support  // 渐进式Web应用程序 <span class="token punctuation">(</span> <span class="token punctuation">)</span> Router                             // vue-router（vue路由） <span class="token punctuation">(</span> <span class="token punctuation">)</span> Vuex                               // vuex（vue的状态管理模式） <span class="token punctuation">(</span> <span class="token punctuation">)</span> CSS Pre-processors                 // CSS 预处理器（如：less、sass） <span class="token punctuation">(</span> <span class="token punctuation">)</span> Linter / Formatter                 // 代码风格检查和格式化（如：ESlint） <span class="token punctuation">(</span> <span class="token punctuation">)</span> Unit Testing                       // 单元测试（unit tests） <span class="token punctuation">(</span> <span class="token punctuation">)</span> E2E Testing                        // e2e（end to end） 测试</code></pre><p>　　选择完后直接enter，然后会提示你选择对应功能的具体工具包，选择自己擅长或者使用广泛的（方便遇到问题时百度），简介如下：</p><p>　　① 是否使用history router：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/vue_cli3x_create_router.png" alt="vue_cli3x_create_router.png"><br>　　Vue-Router利用了浏览器自身的<span style="color: #FF6827;">hash模式</span>和<span style="color: #FF6827;">history模式</span>的特性来实现前端路由（通过调用浏览器提供的接口）。<br>　　详情见<a href="https://router.vuejs.org/zh/guide/essentials/history-mode.html" title="Vue Router - HTML5 History 模式" rel="external nofollow noopener noreferrer" target="_blank">Vue Router - HTML5 History 模式</a>。</p><p>　　② css预处理器<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/vue_cli3x_create_css.png" alt="vue_cli3x_create_css.png"><br>　　主要为css解决浏览器兼容、简化css代码等问题（Sass诞生于2007年，最早也是最成熟的一款css预处理器语言）。</p><pre class=" language-bash"><code class="language-bash">? Please pick a preset: Manually <span class="token keyword">select</span> features? Check the features needed <span class="token keyword">for</span> your project: Router, Vuex, CSS Pre-processors, Linter, Unit? Pick a CSS pre-processor <span class="token punctuation">(</span>PostCSS, Autoprefixer and CSS Modules are supported by default<span class="token punctuation">)</span>:<span class="token operator">></span> SCSS/SASS  // Sass安装需要Ruby环境，是在服务端处理的，SCSS 是 Sass3新语法（完全兼容 CSS3且继承Sass功能）  LESS       // Less最终会通过编译处理输出css到浏览器，Less 既可以在客户端上运行，也可在服务端运行 <span class="token punctuation">(</span>借助 Node.js<span class="token punctuation">)</span>  Stylus     // Stylus主要用来给Node项目进行CSS预处理支持，Stylus功能上更为强壮，和js联系更加紧密，可创建健壮的、动态的的CSS。</code></pre><p>　　③ ESLint<br>　　提供一个插件化的javascript代码检测工具。</p><pre class=" language-bash"><code class="language-bash">? Pick a linter / formatter config: <span class="token punctuation">(</span>Use arrow keys<span class="token punctuation">)</span><span class="token operator">></span> ESLint with error prevention only  ESLint + Airbnb config  ESLint + Standard config  ESLint + Prettier         // 使用较多</code></pre><p>　　④ 何时检测</p><pre class=" language-bash"><code class="language-bash">? Pick additional lint features: <span class="token punctuation">(</span>Press <span class="token operator">&lt;</span>space<span class="token operator">></span> to select, <span class="token operator">&lt;</span>a<span class="token operator">></span> to toggle all, <span class="token operator">&lt;</span>i<span class="token operator">></span> to invert selection<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span> <span class="token punctuation">)</span> Lint on save                    // 保存就检测 <span class="token punctuation">(</span> <span class="token punctuation">)</span> Lint and fix on commit          // fix和commit时候检查</code></pre><p>　　⑤ 单元测试</p><pre class=" language-bash"><code class="language-bash">? Pick a unit testing solution: <span class="token punctuation">(</span>Use arrow keys<span class="token punctuation">)</span><span class="token operator">></span> Mocha + Chai  // mocha灵活,只提供简单的测试结构，如果需要其他功能需要添加其他库/插件完成。必须在全局环境中安装  Jest          // 安装配置简单，容易上手。内置Istanbul，可以查看到测试覆盖率，相较于Mocha:配置简洁、测试代码简洁、易于和babel集成、内置丰富的expect</code></pre><p>　　⑥ 如何存放配置<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/vue_cli3x_create_config.png" alt="vue_cli3x_create_config.png"></p><pre class=" language-bash"><code class="language-bash">? Where <span class="token keyword">do</span> you prefer placing config <span class="token keyword">for</span> Babel, PostCSS, ESLint, etc.? <span class="token punctuation">(</span>Use arrow keys<span class="token punctuation">)</span><span class="token operator">></span> In dedicated config files  // 独立文件放置  In package.json            // 放package.json里</code></pre><p>　　⑦ 是否保存本次配置（之后可以直接使用）</p><pre class=" language-bash"><code class="language-bash">? Save this as a preset <span class="token keyword">for</span> future projects? <span class="token punctuation">(</span>Y/n<span class="token punctuation">)</span>  // y:记录本次配置，然后需要你起个名<span class="token punctuation">;</span> n：不记录本次配置</code></pre><p>　　搭建完成后，依次执行 <code>cd my-project</code> 和 <code>npm run serve</code> 即可访问vue默认的demo页面。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/vue_cli3x_helloworld_page.png" alt="vue_cli3x_helloworld_page.png"></p><h2 id="四、与vue-cli2-x区别"><a href="#四、与vue-cli2-x区别" class="headerlink" title="四、与vue-cli2.x区别"></a>四、与vue-cli2.x区别</h2><p>　　使用 <span style="color: #FF6827;">vue-cli3.x</span> 脚手架工具创建vue项目后，项目结构与2.x的对比如下：（不同的预设包含不同的文件，大致结构一致）<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/vue_cli3x_vs_vue_cli2x.png" alt="vue_cli3x_vs_vue_cli2x.png"><br>　　不难看出，vue-cli3.x十分精简，主要的大的区别如下：</p><h3 id="1-vuex（状态管理）"><a href="#1-vuex（状态管理）" class="headerlink" title="1. vuex（状态管理）"></a><span style="font-size: 18px; color: #159957;">1. vuex（状态管理）</span></h3><p>　　<strong>vue cli 2 中</strong> ：vuex是搭建完成后自己npm install的，并不包括在搭建过程中。可以看到vue cli 2的vuex默认文件夹（store）又包含了三个js文件：action（存放一些调用外部API接口的异步执行的的方法，然后commit mutations改变mutations 数据）、index（初始化mutations 数据，是store的出口）、mutations（处理数据逻辑的同步执行的方法的集合，Vuex中store数据改变的唯一方法commit mutations）</p><p>　　<strong>vue cli 3 中</strong>：vuex是包含在搭建过程供选择的预设。vue cli 3 中默认只用一个store.js代替了原来的store文件夹中的三个js文件。action、mutations、state以及store 的 getters 的用法有很多，举常用的例子：<br>　　eg：<span style="color: #FF6827;">store.js</span></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token punctuation">;</span><span class="token keyword">import</span> Vuex <span class="token keyword">from</span> <span class="token string">'vuex'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 引入 vuex</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span>  <span class="token comment" spellcheck="true">// 注册store</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Vuex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 使用 vuex</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Vuex<span class="token punctuation">.</span>Store</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    state<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 初始化状态</span>        count<span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    mutations<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 处理状态</span>        <span class="token function">increment</span><span class="token punctuation">(</span>state<span class="token punctuation">,</span> payload<span class="token punctuation">)</span> <span class="token punctuation">{</span>            state<span class="token punctuation">.</span>count <span class="token operator">+</span><span class="token operator">=</span> payload<span class="token punctuation">.</span>step <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    actions<span class="token punctuation">:</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 提交改变后的状态</span>        <span class="token function">increment</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> param<span class="token punctuation">)</span> <span class="token punctuation">{</span>            context<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count <span class="token operator">+</span><span class="token operator">=</span> param<span class="token punctuation">.</span>step<span class="token punctuation">;</span>            context<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>state<span class="token punctuation">.</span>count<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 提交改变后的state.count值</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">incrementStep</span><span class="token punctuation">(</span><span class="token punctuation">{</span>state<span class="token punctuation">,</span> commit<span class="token punctuation">,</span> rootState<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>rootState<span class="token punctuation">.</span>count <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">'increment'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 调用increment()方法</span>                    step<span class="token punctuation">:</span> <span class="token number">10</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>　　使用时，<br>　　eg：<span style="color: #FF6827;">main.js</span></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> App <span class="token keyword">from</span> <span class="token string">'./App.vue'</span><span class="token keyword">import</span> router <span class="token keyword">from</span> <span class="token string">'./router'</span><span class="token keyword">import</span> store <span class="token keyword">from</span> <span class="token string">'./store'</span>  <span class="token comment" spellcheck="true">// 引入状态管理 store</span>Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span><span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  router<span class="token punctuation">,</span>  store<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 注册store(这可以把 store 的实例注入所有的子组件)</span>  render<span class="token punctuation">:</span> h <span class="token operator">=</span><span class="token operator">></span> <span class="token function">h</span><span class="token punctuation">(</span>App<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">$mount</span><span class="token punctuation">(</span><span class="token string">'#app'</span><span class="token punctuation">)</span></code></pre><p>　　<span style="color: #FF6827;">views/home.vue</span></p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>home<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token comment" spellcheck="true">&lt;!--在前端HTML页面中使用 count--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HelloWorld</span> <span class="token attr-name">:msg</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>count<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">'@/components/HelloWorld.vue'</span>    <span class="token keyword">import</span> <span class="token punctuation">{</span>mapActions<span class="token punctuation">,</span> mapState<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'vuex'</span>  <span class="token comment" spellcheck="true">// 注册 action 和 state</span>    <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">'home'</span><span class="token punctuation">,</span>        computed<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 在这里映射 store.state.count，使用方法和 computed 里的其他属性一样</span>            <span class="token operator">...</span><span class="token function">mapState</span><span class="token punctuation">(</span><span class="token punctuation">[</span>                <span class="token string">'count'</span>             <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">incrementStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        methods<span class="token punctuation">:</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 在这里引入 action 里的方法，使用方法和 methods 里的其他方法一样</span>            <span class="token operator">...</span><span class="token function">mapActions</span><span class="token punctuation">(</span><span class="token punctuation">[</span>                <span class="token string">'incrementStep'</span>            <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        components<span class="token punctuation">:</span> <span class="token punctuation">{</span>            HelloWorld        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h3 id="2-router（路由）"><a href="#2-router（路由）" class="headerlink" title="2. router（路由）"></a><span style="font-size: 18px; color: #159957;">2. router（路由）</span></h3><p>　　<strong>vue cli 2</strong>：“ router/index.js ”<br>　　<strong>vue cli 3</strong>：“router.js”（用法和做的事都一样）</p><h3 id="3-去掉static、新增public文件夹"><a href="#3-去掉static、新增public文件夹" class="headerlink" title="3. 去掉static、新增public文件夹"></a><span style="font-size: 18px; color: #159957;">3. 去掉static、新增public文件夹</span></h3><p>　　<strong>vue cli 2</strong>：static 是 webpack 默认存放静态资源的文件夹，打包时会直接复制一份到dist文件夹不会经过 webpack 编译。<br>　　<strong>vue cli 3</strong>：摒弃 static 新增了 public。vue cli 3 中“静态资源”两种处理方式：<br>　　●　经webpack 处理：在 JavaScript 被导入或在 template/CSS 中通过“相对路径”被引用的资源会被编译并压缩；<br>　　●　不经webpack 处理：放置在 public 目录下或通过绝对路径被引用的资源将会“直接被拷贝”一份，不做任何编译压缩处理。</p><h3 id="4-index-html"><a href="#4-index-html" class="headerlink" title="4. index.html"></a><span style="font-size: 18px; color: #159957;">4. index.html</span></h3><p>　　<strong>vue cli 2</strong>：“index.html”<br>　　<strong>vue cli 3</strong>：“public/index.html”此模板会被 <a href="https://github.com/jantimon/html-webpack-plugin" title="html-webpack-plugin" rel="external nofollow noopener noreferrer" target="_blank">html-webpack-plugin</a> 处理的</p><h3 id="5-src-views"><a href="#5-src-views" class="headerlink" title="5. src/views"></a><span style="font-size: 18px; color: #159957;">5. src/views</span></h3><p>　　<strong>vue cli 3</strong> 的src文件夹新增views文件夹用来存放“页面”，区分components（组件）。</p><h3 id="6-去掉build和config两个文件夹"><a href="#6-去掉build和config两个文件夹" class="headerlink" title="6. 去掉build和config两个文件夹"></a><span style="font-size: 18px; color: #159957;">6. 去掉build和config两个文件夹</span></h3><p>　　<strong>vue cli 3</strong> 中，去掉了 build（根据config中的配置来定义规则）、config（配置不同环境的参数）文件夹。<br>　　这些配置你可以通过命令行参数、或 <code>vue.config.js</code> （在根目录<span style="color: #FF6827;">新建一个</span> vue.config.js 同名文件）里的 <a href="https://cli.vuejs.org/zh/config/#devserver" title="devServer" rel="external nofollow noopener noreferrer" target="_blank">devServer</a> 字段配置开发服务器。</p><h3 id="7-babel-config-js"><a href="#7-babel-config-js" class="headerlink" title="7. babel.config.js"></a><span style="font-size: 18px; color: #159957;">7. babel.config.js</span></h3><p>　　配置Babel 。Vue CLI 使用了 Babel 7 中的新配置格式 <code>babel.config.js</code>。和 <code>.babelrc</code> 或 <code>package.json</code> 中的 <code>babel</code> 字段不同，这个配置文件不会使用基于文件位置的方案，而是会一致地运用到项目根目录以下的所有文件，包括 <code>node_modules</code> 内部的依赖。官方推荐在 Vue CLI 项目中始终使用 <code>babel.config.js</code> 取代其它格式。</p><h3 id="8-根目录的一些其他文件的改变"><a href="#8-根目录的一些其他文件的改变" class="headerlink" title="8. 根目录的一些其他文件的改变"></a><span style="font-size: 18px; color: #159957;">8. 根目录的一些其他文件的改变</span></h3><p>　　之前所有的配置文件都在 vue create 搭建时preset预设，或者后期可以通过命令参数、<code>vue.config.js</code>中配置。<br>　　根据需要在根目录下新建 vue.config.js 自行配置，下面只列一部分，具体配置参考<a href="https://cli.vuejs.org/zh/config/" title="vue.config.js配置参考" rel="external nofollow noopener noreferrer" target="_blank">官方文档</a>。</p><pre class=" language-javascript"><code class="language-javascript">module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 部署生产环境和开发环境下的URL。</span>  <span class="token comment" spellcheck="true">// 默认情况下，Vue CLI 会假设你的应用是被部署在一个域名的根路径上</span>  <span class="token comment" spellcheck="true">// 例如 https://www.my-app.com/。如果应用被部署在一个子路径上，你就需要用这个选项指定这个子路径。例如，如果你的应用被部署在 https://www.my-app.com/my-app/，则设置 baseUrl 为 /my-app/。</span>  baseUrl<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">"production"</span> <span class="token operator">?</span> <span class="token string">"./"</span> <span class="token punctuation">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// outputDir: 在npm run build 或 yarn build 时 ，生成文件的目录名称（要和baseUrl的生产环境路径一致）</span>  outputDir<span class="token punctuation">:</span> <span class="token string">"dist"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 用于放置生成的静态资源 (js、css、img、fonts) 的；（项目打包之后，静态资源会放在这个文件夹下）</span>  assetsDir<span class="token punctuation">:</span> <span class="token string">"assets"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 指定生成的 index.html 的输出路径  (打包之后，改变系统默认的index.html的文件名)</span>  <span class="token comment" spellcheck="true">// indexPath: "myIndex.html",</span>  <span class="token comment" spellcheck="true">// 默认情况下，生成的静态资源在它们的文件名中包含了 hash 以便更好的控制缓存。你可以通过将这个选项设为 false 来关闭文件名哈希。(false的时候就是让原来的文件名不改变)</span>  filenameHashing<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// lintOnSave：{ type:Boolean default:true } 问你是否使用eslint</span>  lintOnSave<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 如果你想要在生产构建时禁用 eslint-loader，你可以用如下配置</span>  <span class="token comment" spellcheck="true">// lintOnSave: process.env.NODE_ENV !== 'production',</span>  <span class="token comment" spellcheck="true">// 是否使用包含运行时编译器的 Vue 构建版本。设置为 true 后你就可以在 Vue 组件中使用 template 选项了，但是这会让你的应用额外增加 10kb 左右。(默认false)</span>  <span class="token comment" spellcheck="true">// runtimeCompiler: false,</span>  <span class="token comment" spellcheck="true">/**   * 如果你不需要生产环境的 source map，可以将其设置为 false 以加速生产环境构建。   *  打包之后发现map文件过大，项目文件体积很大，设置为false就可以不输出map文件   *  map文件的作用在于：项目打包后，代码都是经过压缩加密的，如果运行时报错，输出的错误信息无法准确得知是哪里的代码报错。   *  有了map就可以像未加密的代码一样，准确的输出是哪一行哪一列有错。   * */</span>  productionSourceMap<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 它支持webPack-dev-server的所有选项</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    host<span class="token punctuation">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>    port<span class="token punctuation">:</span> <span class="token number">1111</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 端口号</span>    https<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// https:{type:Boolean}</span>    open<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 配置自动启动浏览器</span>    <span class="token comment" spellcheck="true">// proxy: 'http://localhost:4000' // 配置跨域处理,只有一个代理</span>    <span class="token comment" spellcheck="true">// 配置多个代理</span>    proxy<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">"/api"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        target<span class="token punctuation">:</span> <span class="token string">"&lt;url>"</span><span class="token punctuation">,</span>        ws<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>        changeOrigin<span class="token punctuation">:</span> <span class="token boolean">true</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token string">"/foo"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>        target<span class="token punctuation">:</span> <span class="token string">"&lt;other_url>"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="五、图形化界面创建项目"><a href="#五、图形化界面创建项目" class="headerlink" title="五、图形化界面创建项目"></a>五、图形化界面创建项目</h2><p>　　vue-cli 3x 新增了<span style="color: #FF6827;">通过图形化界面创建项目</span>的功能，<br>　　在命令行输入命令：</p><pre class=" language-bash"><code class="language-bash">vue ui</code></pre><p>　　然后会自动打浏览器页面，选择创建，后面基本上都是“下一步、下一步”的无脑操作。</p><h2 id="六、vue-cli-2x（旧版本）"><a href="#六、vue-cli-2x（旧版本）" class="headerlink" title="六、vue-cli 2x（旧版本）"></a>六、vue-cli 2x（旧版本）</h2><p>　　了解 vue-cli 2x（旧版本）：参见本人另一篇博客<span class="series"><a href="/blogs/vue-cli2x-to-create-vue-project.html" title="Vue CLI 2.x搭建Vue项目">《Vue CLI 2.x搭建Vue项目》</a></span>。</p><p class="reference"><br>参考<br><a href="https://cli.vuejs.org/zh/guide/" rel="external nofollow noopener noreferrer" target="_blank">https://cli.vuejs.org/zh/guide/</a><br></p><style type="text/css">    .series a {        text-decoration:none !important;    }</style>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue CLI 2.x搭建Vue项目</title>
      <link href="/blogs/vue-cli2x-to-create-vue-project.html"/>
      <url>/blogs/vue-cli2x-to-create-vue-project.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">Vue CLI 2.x搭建Vue项目</div><blockquote><p>使用vue-cli2.x脚手架搭建一个vue项目，以及目录结构分析。</p></blockquote><h2 id="一、Node安装"><a href="#一、Node安装" class="headerlink" title="一、Node安装"></a>一、Node安装</h2><p>　<span style="font-size: 18px;"><strong>windows</strong></span><br>　1. Node.js （&gt;=6.x, 推荐8.x）<br>　　<a href="https://nodejs.org/en/" title="Node官网" rel="external nofollow noopener noreferrer" target="_blank">Node官网</a>下载 .msi 文件，按步骤下载安装即可。<br>　　安装完之后在cmd中输入 <code>node -v</code>，若显示版本号，则说明安装成功。<br>　2. Git（命令行终端）<br>　　<a href="https://git-scm.com/" title="git官网" rel="external nofollow noopener noreferrer" target="_blank">Git官网</a>下载安装即可。</p><p>　<span style="font-size: 18px;"><strong>linux</strong></span></p><pre class=" language-bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> nodejsnode -v<span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">npm</span><span class="token function">npm</span> -v</code></pre><p>　<span style="font-size: 18px;"><strong>npm命令</strong></span><br>　1. 得到原本的镜像地址</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> get registry</code></pre><p>　2. 设成淘宝的</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry http://registry.npm.taobao.org/</code></pre><p>　3. 换成原来的</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npmjs.org/</code></pre><h2 id="二、vue-cli安装、更新"><a href="#二、vue-cli安装、更新" class="headerlink" title="二、vue-cli安装、更新"></a>二、vue-cli安装、更新</h2><p>　　vue-cli是一个用于快速搭建vue项目的脚手架。<br>　　安装过Node.js、Git后，全局安装vue-cli（以后其他项目可直接使用）：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g vue-cli</code></pre><p>　　更新：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> update vue-cli</code></pre><p>　　查看安装成功否（有版本号就是成功，V大写）</p><pre class=" language-bash"><code class="language-bash">vue -V</code></pre><h2 id="三、vue-cli搭建vue项目"><a href="#三、vue-cli搭建vue项目" class="headerlink" title="三、vue-cli搭建vue项目"></a>三、vue-cli搭建vue项目</h2><p>　　执行如下命令即可。</p><pre class=" language-bash"><code class="language-bash">vue init webpack my-project</code></pre><p><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/vue_cli2x_init.png" alt="vue_cli2x_init.png"><br>　　PS：<span style="color: #FF6827;">ESLint</span>（一个javascript代码检测工具）、<span style="color: #FF6827;">unit tests</span>（单元测试）、<span style="color: #FF6827;">Nightwatch</span>（一个e2e用户界面测试工具）。这里暂时都选<code>N</code>，其它的直接回车即可。<br>　　然后依次执行 <code>cd my-project</code> 和 <code>npm run dev</code> 即可访问vue默认的demo页面。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/vue_cli2x_helloworld_page.png" alt="vue_cli2x_helloworld_page.png"></p><p>　　<strong>下面是一些特殊情况的处理：</strong></p><p>　　如果当前安装的Vue CLI &gt;= 3，那么需要拉取2.x 模板（旧版本）。<br>　　Vue CLI &gt;= 3 和旧版使用了相同的 <code>vue</code> 命令，所以 Vue CLI 2 （<code>vue-cli</code>) 被覆盖了。如果你仍然需要使用旧版本的 <code>vue init</code> 功能，你可以全局安装一个桥接工具：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g @vue/cli-init<span class="token comment" spellcheck="true"># `vue init` 的运行效果将会跟 `vue-cli@2.x` 相同</span>vue init webpack my-project</code></pre><p>　　<span style="color: #FF6827;">vue init &lt; template-name &gt;  &lt; project-name &gt;</span><br>　　用于初始化一个vue项目，该命令有两个参数，第一个是模板名，第二个是项目名。<br>　　目前可用的模块包括：<br>　　<a href="https://github.com/vuejs-templates/webpack" rel="external nofollow noopener noreferrer" target="_blank">webpack</a> - 一个功能齐全的Webpack + vue-loader设置，具有热重载，linting，测试和css提取功能。<br>　　<a href="https://github.com/vuejs-templates/webpack-simple" rel="external nofollow noopener noreferrer" target="_blank">webpack-simple</a> - 一个简单的Webpack + vue-loader设置，用于快速原型设计。<br>　　<a href="https://github.com/vuejs-templates/browserify" rel="external nofollow noopener noreferrer" target="_blank">browserify</a> -全功能Browserify + vueify设置用热重装载，linting＆单元测试。<br>　　browserify <a href="https://github.com/vuejs-templates/browserify-simple" rel="external nofollow noopener noreferrer" target="_blank">-simple</a> - 一个简单的Browserify + vueify设置，用于快速原型设计。<br>　　<a href="https://github.com/vuejs-templates/pwa" rel="external nofollow noopener noreferrer" target="_blank">pwa</a> - 基于webpack模板的vue-cli的PWA模板<br>　　<a href="https://github.com/vuejs-templates/simple" rel="external nofollow noopener noreferrer" target="_blank">simple</a> - 单个HTML文件中最简单的Vue设置</p><h2 id="四、相关文件和文件夹的含义"><a href="#四、相关文件和文件夹的含义" class="headerlink" title="四、相关文件和文件夹的含义"></a>四、相关文件和文件夹的含义</h2><p>　　使用 <span style="color: #FF6827;">vue-cli2.x</span> 脚手架工具创建vue项目后，整个项目目录结构如下图所示：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/vue_cli2x_dir_list.png" alt="vue_cli2x_dir_list.png"></p><h3 id="1-build文件夹"><a href="#1-build文件夹" class="headerlink" title="1. build文件夹"></a><span style="font-size: 18px; color: #159957;">1. build文件夹</span></h3><p>　　build文件夹的结构：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/vue_cli2x_dir_build.png" alt="vue_cli2x_dir_build.png"><br>　　① <span style="color: #FF6827;">build.js</span></p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./check-versions'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 调用版本检查</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">=</span> <span class="token string">'production'</span>  <span class="token comment" spellcheck="true">// 将环境配置为生产环境</span><span class="token keyword">const</span> ora <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ora'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// npm包 loading插件</span><span class="token keyword">const</span> rm <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'rimraf'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// npm包 用于删除文件</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// npm包 文件路径工具</span><span class="token keyword">const</span> chalk <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'chalk'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// npm包 在终端输出带颜色的文字</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 引入webpack.js</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../config'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 引入配置文件</span><span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.prod.conf'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 引入生产环境配置文件</span><span class="token comment" spellcheck="true">// 在终端显示loading效果，并输出提示</span><span class="token keyword">const</span> spinner <span class="token operator">=</span> <span class="token function">ora</span><span class="token punctuation">(</span><span class="token string">'building for production...'</span><span class="token punctuation">)</span>spinner<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 先递归删除dist文件再生成新文件，避免冗余</span><span class="token function">rm</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>assetsRoot<span class="token punctuation">,</span> config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>assetsSubDirectory<span class="token punctuation">)</span><span class="token punctuation">,</span> err <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err  <span class="token function">webpack</span><span class="token punctuation">(</span>webpackConfig<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> stats<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    spinner<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">throw</span> err    process<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      colors<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      modules<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      children<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      chunks<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      chunkModules<span class="token punctuation">:</span> <span class="token boolean">false</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'\n\n'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>stats<span class="token punctuation">.</span><span class="token function">hasErrors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">red</span><span class="token punctuation">(</span><span class="token string">'  Build failed with errors.\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">cyan</span><span class="token punctuation">(</span><span class="token string">'  Build complete.\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">yellow</span><span class="token punctuation">(</span>      <span class="token string">'  Tip: built files are meant to be served over an HTTP server.\n'</span> <span class="token operator">+</span>      <span class="token string">'  Opening index.html over file:// won\'t work.\n'</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>　　ps：require/export是一种nodeJs(commonJs规范)的依赖注入的方法，import/export是ES6语法，用于引入模块，在nodeJs中使用的ES6语法最终会使用babel工具（babel-loader）转化为ES5。</p><p>　　② <span style="color: #FF6827;">check-version.js</span><br>　　检测node和npm的版本，实现版本依赖。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token keyword">const</span> chalk <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'chalk'</span><span class="token punctuation">)</span><span class="token keyword">const</span> semver <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'semver'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 检查版本</span><span class="token keyword">const</span> packageConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../package.json'</span><span class="token punctuation">)</span><span class="token keyword">const</span> shell <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'shelljs'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// shelljs 模块重新包装了 child_process，调用系统命令更加方便</span><span class="token keyword">function</span> exec <span class="token punctuation">(</span>cmd<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 返回通过child_process模块的新建子进程，执行 Unix 系统命令后转成没有空格的字符串</span>  <span class="token keyword">return</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execSync</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">const</span> versionRequirements <span class="token operator">=</span> <span class="token punctuation">[</span>  <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'node'</span><span class="token punctuation">,</span>    currentVersion<span class="token punctuation">:</span> semver<span class="token punctuation">.</span><span class="token function">clean</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>version<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 使用semver格式化版本</span>    versionRequirement<span class="token punctuation">:</span> packageConfig<span class="token punctuation">.</span>engines<span class="token punctuation">.</span>node  <span class="token comment" spellcheck="true">// 获取package.json中设置的node版本</span>  <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token punctuation">(</span>shell<span class="token punctuation">.</span><span class="token function">which</span><span class="token punctuation">(</span><span class="token string">'npm'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  versionRequirements<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'npm'</span><span class="token punctuation">,</span>    currentVersion<span class="token punctuation">:</span> <span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">'npm --version'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 自动调用npm --version命令，并且把参数返回给exec函数，从而获取纯净的版本号</span>    versionRequirement<span class="token punctuation">:</span> packageConfig<span class="token punctuation">.</span>engines<span class="token punctuation">.</span>npm  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> warnings <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> versionRequirements<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> mod <span class="token operator">=</span> versionRequirements<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true">// 若版本号不符合package.json文件中指定的版本号，就报错</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>semver<span class="token punctuation">.</span><span class="token function">satisfies</span><span class="token punctuation">(</span>mod<span class="token punctuation">.</span>currentVersion<span class="token punctuation">,</span> mod<span class="token punctuation">.</span>versionRequirement<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      warnings<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>mod<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">': '</span> <span class="token operator">+</span>        chalk<span class="token punctuation">.</span><span class="token function">red</span><span class="token punctuation">(</span>mod<span class="token punctuation">.</span>currentVersion<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' should be '</span> <span class="token operator">+</span>        chalk<span class="token punctuation">.</span><span class="token function">green</span><span class="token punctuation">(</span>mod<span class="token punctuation">.</span>versionRequirement<span class="token punctuation">)</span>      <span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>warnings<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>chalk<span class="token punctuation">.</span><span class="token function">yellow</span><span class="token punctuation">(</span><span class="token string">'To use this template, you must update following to modules:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> warnings<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">const</span> warning <span class="token operator">=</span> warnings<span class="token punctuation">[</span>i<span class="token punctuation">]</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'  '</span> <span class="token operator">+</span> warning<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　③ <span style="color: #FF6827;">utils.js</span><br>　　utils是工具的意思，是一个用来处理css的文件，这个文件包含了三个工具函数：<br>　　●　生成静态资源的路径<br>　　●　生成 ExtractTextPlugin对象或loader字符串<br>　　●　生成 style-loader的配置</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// node自带的文件路径工具</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../config'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 配置文件</span><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'extract-text-webpack-plugin'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 提取css的插件</span><span class="token keyword">const</span> packageConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../package.json'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/** @method assertsPath  生成静态资源的路径(判断开发环境和生产环境,为config文件中index.js文件中定义assetsSubDirectory) * @param  {String}      _path 相对于静态资源文件夹的文件路径 * @return {String}      静态资源完整路径 */</span>exports<span class="token punctuation">.</span>assetsPath <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>_path<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> assetsSubDirectory <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'production'</span>    <span class="token operator">?</span> config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>assetsSubDirectory    <span class="token punctuation">:</span> config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>assetsSubDirectory  <span class="token comment" spellcheck="true">// nodeJs path提供用于处理文件路径的工具;path.posix提供对路径方法的POSIX(可移植性操作系统接口)特定实现的访问(可跨平台); path.posix.join与path.join一样，不过总是以 posix 兼容的方式交互</span>  <span class="token keyword">return</span> path<span class="token punctuation">.</span>posix<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>assetsSubDirectory<span class="token punctuation">,</span> _path<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**@method cssLoaders  生成处理css的loaders配置,使用css-loader和postcssLoader,通过options.usePostCSS属性来判断是否使用postcssLoader中压缩等方法 * @param  {Object} option = {sourceMap: true,// 是否开启 sourceMapextract: true // 是否提取css}生成配置 * @return {Object} 处理css的loaders配置对象 */</span>exports<span class="token punctuation">.</span>cssLoaders <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  options <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token keyword">const</span> cssLoader <span class="token operator">=</span> <span class="token punctuation">{</span>    loader<span class="token punctuation">:</span> <span class="token string">'css-loader'</span><span class="token punctuation">,</span>    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>      sourceMap<span class="token punctuation">:</span> options<span class="token punctuation">.</span>sourceMap    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">const</span> postcssLoader <span class="token operator">=</span> <span class="token punctuation">{</span>    loader<span class="token punctuation">:</span> <span class="token string">'postcss-loader'</span><span class="token punctuation">,</span>    options<span class="token punctuation">:</span> <span class="token punctuation">{</span>      sourceMap<span class="token punctuation">:</span> options<span class="token punctuation">.</span>sourceMap    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">/**@method generateLoaders  生成 ExtractTextPlugin对象或loader字符串   * @param  {Array}        loaders loader名称数组   * @return {String|Object}        ExtractTextPlugin对象或loader字符串   */</span>  <span class="token keyword">function</span> generateLoaders <span class="token punctuation">(</span>loader<span class="token punctuation">,</span> loaderOptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> loaders <span class="token operator">=</span> options<span class="token punctuation">.</span>usePostCSS <span class="token operator">?</span> <span class="token punctuation">[</span>cssLoader<span class="token punctuation">,</span> postcssLoader<span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">[</span>cssLoader<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>loader<span class="token punctuation">)</span> <span class="token punctuation">{</span>      loaders<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        loader<span class="token punctuation">:</span> loader <span class="token operator">+</span> <span class="token string">'-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> loaderOptions<span class="token punctuation">,</span> <span class="token punctuation">{</span>          sourceMap<span class="token punctuation">:</span> options<span class="token punctuation">.</span>sourceMap        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// ExtractTextPlugin提取css(当上面的loaders未能正确引入时,使用vue-style-loader)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>options<span class="token punctuation">.</span>extract<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> ExtractTextPlugin<span class="token punctuation">.</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        use<span class="token punctuation">:</span> loaders<span class="token punctuation">,</span>        fallback<span class="token punctuation">:</span> <span class="token string">'vue-style-loader'</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">'vue-style-loader'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>loaders<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    css<span class="token punctuation">:</span> <span class="token function">generateLoaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 需要css-loader 和 vue-style-loader</span>    postcss<span class="token punctuation">:</span> <span class="token function">generateLoaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 需要css-loader、postcssLoader 和 vue-style-loader</span>    less<span class="token punctuation">:</span> <span class="token function">generateLoaders</span><span class="token punctuation">(</span><span class="token string">'less'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 需要less-loader 和 vue-style-loader</span>    sass<span class="token punctuation">:</span> <span class="token function">generateLoaders</span><span class="token punctuation">(</span><span class="token string">'sass'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> indentedSyntax<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 需要sass-loader 和 vue-style-loader</span>    scss<span class="token punctuation">:</span> <span class="token function">generateLoaders</span><span class="token punctuation">(</span><span class="token string">'sass'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 需要sass-loader 和 vue-style-loader</span>    stylus<span class="token punctuation">:</span> <span class="token function">generateLoaders</span><span class="token punctuation">(</span><span class="token string">'stylus'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 需要stylus-loader 和 vue-style-loade</span>    styl<span class="token punctuation">:</span> <span class="token function">generateLoaders</span><span class="token punctuation">(</span><span class="token string">'stylus'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 需要stylus-loader 和 vue-style-loader</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/**@method styleLoaders 生成 style-loader的配置 * @param  {Object}     options 生成配置 * @return {Array}      style-loader的配置 */</span>exports<span class="token punctuation">.</span>styleLoaders <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>options<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> output <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token keyword">const</span> loaders <span class="token operator">=</span> exports<span class="token punctuation">.</span><span class="token function">cssLoaders</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 将各种css,less,sass等综合在一起得出结果输出output</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> extension <span class="token keyword">in</span> loaders<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">const</span> loader <span class="token operator">=</span> loaders<span class="token punctuation">[</span>extension<span class="token punctuation">]</span>    output<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      test<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">'\\.'</span> <span class="token operator">+</span> extension <span class="token operator">+</span> <span class="token string">'$'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      use<span class="token punctuation">:</span> loader    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> output<span class="token punctuation">}</span>exports<span class="token punctuation">.</span>createNotifierCallback <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> notifier <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'node-notifier'</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>severity<span class="token punctuation">,</span> errors<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>severity <span class="token operator">!==</span> <span class="token string">'error'</span><span class="token punctuation">)</span> <span class="token keyword">return</span>    <span class="token keyword">const</span> error <span class="token operator">=</span> errors<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">const</span> filename <span class="token operator">=</span> error<span class="token punctuation">.</span>file <span class="token operator">&amp;&amp;</span> error<span class="token punctuation">.</span>file<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'!'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    notifier<span class="token punctuation">.</span><span class="token function">notify</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      title<span class="token punctuation">:</span> packageConfig<span class="token punctuation">.</span>name<span class="token punctuation">,</span>      message<span class="token punctuation">:</span> severity <span class="token operator">+</span> <span class="token string">': '</span> <span class="token operator">+</span> error<span class="token punctuation">.</span>name<span class="token punctuation">,</span>      subtitle<span class="token punctuation">:</span> filename <span class="token operator">||</span> <span class="token string">''</span><span class="token punctuation">,</span>      icon<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'logo.png'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　④ <span style="color: #FF6827;">vue-loader.conf.js</span><br>　　处理.vue文件，解析这个文件中的每个语言块（template、script、style)，转换成js可用的js模块。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token keyword">const</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./utils'</span><span class="token punctuation">)</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../config'</span><span class="token punctuation">)</span><span class="token keyword">const</span> isProduction <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'production'</span><span class="token comment" spellcheck="true">// 生产环境,提取css样式到单独文件</span><span class="token keyword">const</span> sourceMapEnabled <span class="token operator">=</span> isProduction  <span class="token operator">?</span> config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>productionSourceMap  <span class="token punctuation">:</span> config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>cssSourceMapmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  loaders<span class="token punctuation">:</span> utils<span class="token punctuation">.</span><span class="token function">cssLoaders</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    sourceMap<span class="token punctuation">:</span> sourceMapEnabled<span class="token punctuation">,</span>    extract<span class="token punctuation">:</span> isProduction  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  cssSourceMap<span class="token punctuation">:</span> sourceMapEnabled<span class="token punctuation">,</span>  cacheBusting<span class="token punctuation">:</span> config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>cacheBusting<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 编译时将“引入路径”转换为require调用,使其可由webpack处理</span>  transformToRequire<span class="token punctuation">:</span> <span class="token punctuation">{</span>    video<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'src'</span><span class="token punctuation">,</span> <span class="token string">'poster'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    source<span class="token punctuation">:</span> <span class="token string">'src'</span><span class="token punctuation">,</span>    img<span class="token punctuation">:</span> <span class="token string">'src'</span><span class="token punctuation">,</span>    image<span class="token punctuation">:</span> <span class="token string">'xlink:href'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　⑤ <span style="color: #FF6827;">webpack.base.conf.js</span><br>　　开发、测试、生产环境的公共基础配置文件，配置输出环境，配置模块resolve和插件等。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// node自带的文件路径工具</span><span class="token keyword">const</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./utils'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 工具函数集合</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../config'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 配置文件</span><span class="token keyword">const</span> vueLoaderConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./vue-loader.conf'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 工具函数集合</span><span class="token comment" spellcheck="true">/** * 获取"绝对路径" * @method resolve * @param  {String} dir 相对于本文件的路径 * @return {String}     绝对路径 */</span><span class="token keyword">function</span> resolve <span class="token punctuation">(</span>dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'..'</span><span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  context<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 入口js文件(默认为单页面所以只有app一个入口)</span>  entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>    app<span class="token punctuation">:</span> <span class="token string">'./src/main.js'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 配置出口</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>assetsRoot<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 打包编译的根路径(dist)</span>    filename<span class="token punctuation">:</span> <span class="token string">'[name].js'</span><span class="token punctuation">,</span>    publicPath<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>NODE_ENV <span class="token operator">===</span> <span class="token string">'production'</span>      <span class="token operator">?</span> config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>assetsPublicPath      <span class="token punctuation">:</span> config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>assetsPublicPath  <span class="token comment" spellcheck="true">// 发布路径</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>    extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">,</span> <span class="token string">'.json'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 自动补全的扩展名</span>    <span class="token comment" spellcheck="true">// 别名配置</span>    alias<span class="token punctuation">:</span> <span class="token punctuation">{</span>      <span class="token string">'vue$'</span><span class="token punctuation">:</span> <span class="token string">'vue/dist/vue.esm.js'</span><span class="token punctuation">,</span>      <span class="token string">'@'</span><span class="token punctuation">:</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// eg:"src/components" => "@/components"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> <span class="token punctuation">[</span>      <span class="token comment" spellcheck="true">// 使用vue-loader将vue文件编译转换为js</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.vue$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'vue-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> vueLoaderConfig      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 通过babel-loader将ES6编译压缩成ES5</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'babel-loader'</span><span class="token punctuation">,</span>        include<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'src'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'node_modules/webpack-dev-server/client'</span><span class="token punctuation">)</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token comment" spellcheck="true">// 使用url-loader处理(图片、音像、字体)，超过10000编译成base64</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          limit<span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> utils<span class="token punctuation">.</span><span class="token function">assetsPath</span><span class="token punctuation">(</span><span class="token string">'img/[name].[hash:7].[ext]'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(mp4|webm|ogg|mp3|wav|flac|aac)(\?.*)?$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          limit<span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> utils<span class="token punctuation">.</span><span class="token function">assetsPath</span><span class="token punctuation">(</span><span class="token string">'media/[name].[hash:7].[ext]'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">{</span>        test<span class="token punctuation">:</span> <span class="token regex">/\.(woff2?|eot|ttf|otf)(\?.*)?$/</span><span class="token punctuation">,</span>        loader<span class="token punctuation">:</span> <span class="token string">'url-loader'</span><span class="token punctuation">,</span>        options<span class="token punctuation">:</span> <span class="token punctuation">{</span>          limit<span class="token punctuation">:</span> <span class="token number">10000</span><span class="token punctuation">,</span>          name<span class="token punctuation">:</span> utils<span class="token punctuation">.</span><span class="token function">assetsPath</span><span class="token punctuation">(</span><span class="token string">'fonts/[name].[hash:7].[ext]'</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// nodeJs全局变量/模块，防止webpack注入一些nodeJs的东西到vue中</span>  node<span class="token punctuation">:</span> <span class="token punctuation">{</span>    setImmediate<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    dgram<span class="token punctuation">:</span> <span class="token string">'empty'</span><span class="token punctuation">,</span>    fs<span class="token punctuation">:</span> <span class="token string">'empty'</span><span class="token punctuation">,</span>    net<span class="token punctuation">:</span> <span class="token string">'empty'</span><span class="token punctuation">,</span>    tls<span class="token punctuation">:</span> <span class="token string">'empty'</span><span class="token punctuation">,</span>    child_process<span class="token punctuation">:</span> <span class="token string">'empty'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　⑥ <span style="color: #FF6827;">webpack.dev.conf.js</span><br>　　webpack配置开发环境中的入口，这里面的配置一般不建议去动，否则遇到什么问题需要上网去查相关配置怎么写。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token keyword">const</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./utils'</span><span class="token punctuation">)</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../config'</span><span class="token punctuation">)</span><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// webpack-merge实现合并</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> baseWebpackConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.base.conf'</span><span class="token punctuation">)</span><span class="token keyword">const</span> CopyWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'copy-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> FriendlyErrorsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'friendly-errors-webpack-plugin'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// webpack的提示错误和日志信息的插件</span><span class="token keyword">const</span> portfinder <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'portfinder'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 查看空闲端口位置，默认情况下搜索8000这个端口</span><span class="token keyword">const</span> HOST <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>HOST<span class="token keyword">const</span> PORT <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>PORT <span class="token operator">&amp;&amp;</span> <span class="token function">Number</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>PORT<span class="token punctuation">)</span><span class="token keyword">const</span> devWebpackConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>baseWebpackConfig<span class="token punctuation">,</span> <span class="token punctuation">{</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> utils<span class="token punctuation">.</span><span class="token function">styleLoaders</span><span class="token punctuation">(</span><span class="token punctuation">{</span> sourceMap<span class="token punctuation">:</span> config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>cssSourceMap<span class="token punctuation">,</span> usePostCSS<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devtool<span class="token punctuation">:</span> config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>devtool<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 调试模式</span>  devServer<span class="token punctuation">:</span> <span class="token punctuation">{</span>    clientLogLevel<span class="token punctuation">:</span> <span class="token string">'warning'</span><span class="token punctuation">,</span>    historyApiFallback<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 使用 HTML5 History API 时， 404 响应替代为 index.html</span>      rewrites<span class="token punctuation">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span> <span class="token keyword">from</span><span class="token punctuation">:</span> <span class="token regex">/.*/</span><span class="token punctuation">,</span> to<span class="token punctuation">:</span> path<span class="token punctuation">.</span>posix<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>assetsPublicPath<span class="token punctuation">,</span> <span class="token string">'index.html'</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    hot<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 热重载</span>    contentBase<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 提供静态文件访问</span>    compress<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 压缩</span>    host<span class="token punctuation">:</span> HOST <span class="token operator">||</span> config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>host<span class="token punctuation">,</span>    port<span class="token punctuation">:</span> PORT <span class="token operator">||</span> config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>port<span class="token punctuation">,</span>    open<span class="token punctuation">:</span> config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>autoOpenBrowser<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// npm run dev 时自动打开浏览器</span>    overlay<span class="token punctuation">:</span> config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>errorOverlay      <span class="token operator">?</span> <span class="token punctuation">{</span> warnings<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> errors<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>      <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 显示warning 和 error 信息</span>    publicPath<span class="token punctuation">:</span> config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>assetsPublicPath<span class="token punctuation">,</span>    proxy<span class="token punctuation">:</span> config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>proxyTable<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// api代理</span>    quiet<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 控制台打印警告和错误(用FriendlyErrorsPlugin 为 true)</span>    watchOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 检测文件改动</span>      poll<span class="token punctuation">:</span> config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>poll<span class="token punctuation">,</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token string">'process.env'</span><span class="token punctuation">:</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../config/dev.env'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HotModuleReplacementPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 模块热替换插件，修改模块时不需要刷新页面</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>NamedModulesPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// HMR shows correct file names in console on update.</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>NoEmitOnErrorsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// webpack编译错误的时候，中断打包进程，防止错误代码打包到文件中</span>    <span class="token comment" spellcheck="true">// 将打包编译好的代码插入index.html</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      filename<span class="token punctuation">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span>      inject<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 提取static assets 中css 复制到dist/static文件</span>    <span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>      <span class="token punctuation">{</span>        <span class="token keyword">from</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../static'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        to<span class="token punctuation">:</span> config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>assetsSubDirectory<span class="token punctuation">,</span>        ignore<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.*'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">// 忽略.*的文件</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  portfinder<span class="token punctuation">.</span>basePort <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>PORT <span class="token operator">||</span> config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>port  portfinder<span class="token punctuation">.</span><span class="token function">getPort</span><span class="token punctuation">(</span><span class="token punctuation">(</span>err<span class="token punctuation">,</span> port<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 查找端口号</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 端口被占用时就重新设置evn和devServer的端口</span>      process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>PORT <span class="token operator">=</span> port      devWebpackConfig<span class="token punctuation">.</span>devServer<span class="token punctuation">.</span>port <span class="token operator">=</span> port      <span class="token comment" spellcheck="true">// npm run dev成功的友情提示</span>      devWebpackConfig<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FriendlyErrorsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        compilationSuccessInfo<span class="token punctuation">:</span> <span class="token punctuation">{</span>          messages<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token template-string"><span class="token string">`Your application is running here: http://</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>devWebpackConfig<span class="token punctuation">.</span>devServer<span class="token punctuation">.</span>host<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">:</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>port<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        onErrors<span class="token punctuation">:</span> config<span class="token punctuation">.</span>dev<span class="token punctuation">.</span>notifyOnErrors        <span class="token operator">?</span> utils<span class="token punctuation">.</span><span class="token function">createNotifierCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">:</span> undefined      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>devWebpackConfig<span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>　　⑦ <span style="color: #FF6827;">webpack.dev.prod.js</span><br>　　webpack配置生产环境中的入口。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token keyword">const</span> utils <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./utils'</span><span class="token punctuation">)</span><span class="token keyword">const</span> webpack <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack'</span><span class="token punctuation">)</span><span class="token keyword">const</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../config'</span><span class="token punctuation">)</span><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token keyword">const</span> baseWebpackConfig <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./webpack.base.conf'</span><span class="token punctuation">)</span><span class="token keyword">const</span> CopyWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'copy-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> HtmlWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'html-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> ExtractTextPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'extract-text-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> OptimizeCSSPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'optimize-css-assets-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> UglifyJsPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'uglifyjs-webpack-plugin'</span><span class="token punctuation">)</span><span class="token keyword">const</span> env <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'../config/prod.env'</span><span class="token punctuation">)</span><span class="token keyword">const</span> webpackConfig <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>baseWebpackConfig<span class="token punctuation">,</span> <span class="token punctuation">{</span>  module<span class="token punctuation">:</span> <span class="token punctuation">{</span>    rules<span class="token punctuation">:</span> utils<span class="token punctuation">.</span><span class="token function">styleLoaders</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      sourceMap<span class="token punctuation">:</span> config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>productionSourceMap<span class="token punctuation">,</span>      extract<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      usePostCSS<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  devtool<span class="token punctuation">:</span> config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>productionSourceMap <span class="token operator">?</span> config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>devtool <span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 是否开启调试模式</span>  output<span class="token punctuation">:</span> <span class="token punctuation">{</span>    path<span class="token punctuation">:</span> config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>assetsRoot<span class="token punctuation">,</span>    filename<span class="token punctuation">:</span> utils<span class="token punctuation">.</span><span class="token function">assetsPath</span><span class="token punctuation">(</span><span class="token string">'js/[name].[chunkhash].js'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    chunkFilename<span class="token punctuation">:</span> utils<span class="token punctuation">.</span><span class="token function">assetsPath</span><span class="token punctuation">(</span><span class="token string">'js/[id].[chunkhash].js'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>DefinePlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      <span class="token string">'process.env'</span><span class="token punctuation">:</span> env    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">UglifyJsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 压缩js</span>      uglifyOptions<span class="token punctuation">:</span> <span class="token punctuation">{</span>        compress<span class="token punctuation">:</span> <span class="token punctuation">{</span>          warnings<span class="token punctuation">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      sourceMap<span class="token punctuation">:</span> config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>productionSourceMap<span class="token punctuation">,</span>      parallel<span class="token punctuation">:</span> <span class="token boolean">true</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">ExtractTextPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 提取静态文件，减少请求</span>      filename<span class="token punctuation">:</span> utils<span class="token punctuation">.</span><span class="token function">assetsPath</span><span class="token punctuation">(</span><span class="token string">'css/[name].[contenthash].css'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      allChunks<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">OptimizeCSSPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 提取优化压缩后(删除来自不同组件的冗余代码)的css</span>      cssProcessorOptions<span class="token punctuation">:</span> config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>productionSourceMap        <span class="token operator">?</span> <span class="token punctuation">{</span> safe<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> map<span class="token punctuation">:</span> <span class="token punctuation">{</span> inline<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span>        <span class="token punctuation">:</span> <span class="token punctuation">{</span> safe<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">HtmlWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// html打包压缩到index.html</span>      filename<span class="token punctuation">:</span> config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>index<span class="token punctuation">,</span>      template<span class="token punctuation">:</span> <span class="token string">'index.html'</span><span class="token punctuation">,</span>      inject<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      minify<span class="token punctuation">:</span> <span class="token punctuation">{</span>        removeComments<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 删除注释</span>        collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 删除空格</span>        removeAttributeQuotes<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token comment" spellcheck="true">// 删除属性的引号</span>      <span class="token punctuation">}</span><span class="token punctuation">,</span>      chunksSortMode<span class="token punctuation">:</span> <span class="token string">'dependency'</span>  <span class="token comment" spellcheck="true">// 模块排序，按照我们需要的顺序排序</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>HashedModuleIdsPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>ModuleConcatenationPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// node_modules中的任何所需模块都提取到vendor</span>      name<span class="token punctuation">:</span> <span class="token string">'vendor'</span><span class="token punctuation">,</span>      minChunks <span class="token punctuation">(</span>module<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>          module<span class="token punctuation">.</span>resource <span class="token operator">&amp;&amp;</span>          <span class="token regex">/\.js$/</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>module<span class="token punctuation">.</span>resource<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>          module<span class="token punctuation">.</span>resource<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>            path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../node_modules'</span><span class="token punctuation">)</span>          <span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span>        <span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'manifest'</span><span class="token punctuation">,</span>      minChunks<span class="token punctuation">:</span> <span class="token number">Infinity</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">webpack<span class="token punctuation">.</span>optimize<span class="token punctuation">.</span>CommonsChunkPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      name<span class="token punctuation">:</span> <span class="token string">'app'</span><span class="token punctuation">,</span>      <span class="token keyword">async</span><span class="token punctuation">:</span> <span class="token string">'vendor-async'</span><span class="token punctuation">,</span>      children<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>      minChunks<span class="token punctuation">:</span> <span class="token number">3</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token keyword">new</span> <span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">[</span>  <span class="token comment" spellcheck="true">// 复制static中的静态资源（默认到dist里面）</span>      <span class="token punctuation">{</span>        <span class="token keyword">from</span><span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../static'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        to<span class="token punctuation">:</span> config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>assetsSubDirectory<span class="token punctuation">,</span>        ignore<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'.*'</span><span class="token punctuation">]</span>      <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>productionGzip<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> CompressionWebpackPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'compression-webpack-plugin'</span><span class="token punctuation">)</span>  webpackConfig<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>    <span class="token keyword">new</span> <span class="token class-name">CompressionWebpackPlugin</span><span class="token punctuation">(</span><span class="token punctuation">{</span>      asset<span class="token punctuation">:</span> <span class="token string">'[path].gz[query]'</span><span class="token punctuation">,</span>      algorithm<span class="token punctuation">:</span> <span class="token string">'gzip'</span><span class="token punctuation">,</span>      test<span class="token punctuation">:</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>        <span class="token string">'\\.('</span> <span class="token operator">+</span>        config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>productionGzipExtensions<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">)</span> <span class="token operator">+</span>        <span class="token string">')$'</span>      <span class="token punctuation">)</span><span class="token punctuation">,</span>      threshold<span class="token punctuation">:</span> <span class="token number">10240</span><span class="token punctuation">,</span>      minRatio<span class="token punctuation">:</span> <span class="token number">0.8</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span>build<span class="token punctuation">.</span>bundleAnalyzerReport<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">const</span> BundleAnalyzerPlugin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-bundle-analyzer'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>BundleAnalyzerPlugin  webpackConfig<span class="token punctuation">.</span>plugins<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BundleAnalyzerPlugin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> webpackConfig</code></pre><h3 id="2-config文件夹"><a href="#2-config文件夹" class="headerlink" title="2. config文件夹"></a><span style="font-size: 18px; color: #159957;">2. config文件夹</span></h3><p>　　config文件夹的结构：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/vue_cli2x_dir_config.png" alt="vue_cli2x_dir_config.png"><br>　　① <span style="color: #FF6827;">dev.env.js和prod.env.js</span><br>　　分别配置：开发环境和生产环境。这个可以根据公司业务结合后端需求配置需要区分开发环境和测试环境的属性。<br>　　dev.env.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token keyword">const</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'webpack-merge'</span><span class="token punctuation">)</span><span class="token keyword">const</span> prodEnv <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'./prod.env'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>prodEnv<span class="token punctuation">,</span> <span class="token punctuation">{</span>  NODE_ENV<span class="token punctuation">:</span> <span class="token string">'"development"'</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>　　ps：webpack-merge用于实现合并类似于ES6的Object.assign()</p><p>　　prod.env.js</p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  NODE_ENV<span class="token punctuation">:</span> <span class="token string">'"production"'</span><span class="token punctuation">}</span></code></pre><p>　　（*注意属性值要用<code>&#39;&quot;&quot;&#39;</code>双层引住），访问（获取值）时直接用：<code>process.env.属性名</code><br>　　ps：process（进程）是nodejs的一个全局变量，process.env 属性返回一个用户环境信息的对象。</p><p>　　② <span style="color: #FF6827;">index.js</span></p><pre class=" language-javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token keyword">const</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ===================开发环境配置</span>  dev<span class="token punctuation">:</span> <span class="token punctuation">{</span>    assetsSubDirectory<span class="token punctuation">:</span> <span class="token string">'static'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 静态资源文件夹(一般存放css、js、image等文件)</span>    assetsPublicPath<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 根目录</span>    proxyTable<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 配置API代理，可利用该属性解决跨域的问题</span>    host<span class="token punctuation">:</span> <span class="token string">'localhost'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// 可以被 process.env.HOST 覆盖</span>    port<span class="token punctuation">:</span> <span class="token number">8080</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 可以被 process.env.PORT 覆盖</span>    autoOpenBrowser<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 编译后自动打开浏览器页面 http://localhost:8080/("port + host",默认"false"),设置路由重定向自动打开您的默认页面</span>    errorOverlay<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 浏览器错误提示</span>    notifyOnErrors<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 跨平台错误提示</span>    poll<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// webpack提供的使用文件系统(file system)获取文件改动的通知devServer.watchOptions(监控文件改动)</span>    devtool<span class="token punctuation">:</span> <span class="token string">'cheap-module-eval-source-map'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// webpack提供的用来调试的模式，有多个不同值代表不同的调试模式</span>    cacheBusting<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 配合devtool的配置，当给文件名插入新的hash导致清除缓存时是否生成source-map</span>    cssSourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span>  <span class="token comment" spellcheck="true">// 记录代码压缩前的位置信息,当产生错误时直接定位到未压缩前的位置,方便调试</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// ========================生产环境配置</span>  build<span class="token punctuation">:</span> <span class="token punctuation">{</span>    index<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../dist/index.html'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 编译后"首页面"生成的绝对路径和名字</span>    assetsRoot<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'../dist'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 打包编译的根路径(默认dist，存放打包压缩后的代码)</span>    assetsSubDirectory<span class="token punctuation">:</span> <span class="token string">'static'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 静态资源文件夹(一般存放css、js、image等文件)</span>    assetsPublicPath<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 发布的根目录(dist文件夹所在路径)</span>    productionSourceMap<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 是否开启source-map</span>    devtool<span class="token punctuation">:</span> <span class="token string">'#source-map'</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// (详细参见：https://webpack.docschina.org/configuration/devtool)</span>    productionGzip<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 是否压缩</span>    productionGzipExtensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'js'</span><span class="token punctuation">,</span> <span class="token string">'css'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// unit的gzip命令用来压缩文件（gzip模式下需要压缩的文件的扩展名有js和css）</span>    bundleAnalyzerReport<span class="token punctuation">:</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>npm_config_report  <span class="token comment" spellcheck="true">// 是否开启打包后的分析报告</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-node-modules文件夹"><a href="#3-node-modules文件夹" class="headerlink" title="3. node_modules文件夹"></a><span style="font-size: 18px; color: #159957;">3. node_modules文件夹</span></h3><p>　　存放npm install时根据package.json配置生成的npm安装包的文件夹</p><h3 id="4-src文件夹"><a href="#4-src文件夹" class="headerlink" title="4. src文件夹"></a><span style="font-size: 18px; color: #159957;">4. src文件夹</span></h3><p>　　src目录中的文件如下图所示。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/vue_cli2x_dir_src.png" alt="vue_cli2x_dir_src.png"><br>　　我们需要在src文件夹中开发代码，打包时webpack会根据build中的规则（build规则依赖于config中的配置）将src打包压缩到dist文件夹在浏览器中运行。<br>　　① <span style="color: #FF6827;">assets文件夹</span><br>　　用于存放静态资源（css、image），assets打包时路径会经过webpack中的file-loader编译（因此，assets需要使用绝对路径）成js。<br>　　② <span style="color: #FF6827;">components文件夹</span><br>　　用来存放 .vue 组件(实现复用等功能，如：过滤器，列表项等)。<br>　　③ <span style="color: #FF6827;">router文件夹</span><br>　　在router/index.js文件中配置页面路由。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> Vue <span class="token keyword">from</span> <span class="token string">'vue'</span><span class="token keyword">import</span> Router <span class="token keyword">from</span> <span class="token string">'vue-router'</span><span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">'@/components/HelloWorld'</span>  <span class="token comment" spellcheck="true">// 这里@符号是在build/webpack.base.conf.js中的resolve配置的别名，相当于获取当前项目目录</span>Vue<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>Router<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 此时的router对象是一个局部作用域，需要挂载到Vue原型，才能在任意组件中调用 this.$router 和 this.$route</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">new</span> <span class="token class-name">Router</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  routes<span class="token punctuation">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      path<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>      name<span class="token punctuation">:</span> <span class="token string">'HelloWorld'</span><span class="token punctuation">,</span>      component<span class="token punctuation">:</span> HelloWorld    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>　　④ <span style="color: #FF6827;">App.vue</span><br>　　是整个项目的主组件，所有页面都是通过使用<router-view>开放入口在App.vue下进行切换的（所有的路由都是App.vue的子组件）。<br>　　⑤ <span style="color: #FF6827;">main.js</span><br>　　入口js文件（全局js，你可以在这里：初始化vue实例、require/import需要的插件、注入router路由、引入store状态管理）。</router-view></p><h3 id="5-static文件夹"><a href="#5-static文件夹" class="headerlink" title="5. static文件夹"></a><span style="font-size: 18px; color: #159957;">5. static文件夹</span></h3><p>　　webpack默认存放静态资源（css、image）的文件夹，与assets不同的是：static在打包时会直接复制一个同名文件夹到dist文件夹里（不会经过编译，可使用相对路径）。<br>　　一般情况下，<span style="color: #FF6827;">assets放当前项目的静态资源</span>（每个组件内部的静态资源），<span style="color: #FF6827;">static放公共静态资源</span>。</p><h3 id="6-其他文件"><a href="#6-其他文件" class="headerlink" title="6. 其他文件"></a><span style="font-size: 18px; color: #159957;">6. 其他文件</span></h3><p>　　① <span style="color: #FF6827;">.babelrc</span><br>　　浏览器解析的兼容配置，该文件主要是对预设（presets）和插件（plugins）进行配置，因此不同的转译器作用不同的配置项，大致可分为：语法转义器、补丁转义器、sx和flow插件。<br>　　② <span style="color: #FF6827;">.editorconfig</span><br>　　用于配置代码格式（配合代码检查工具使用，如：ESLint，团队开发时可统一代码风格），这里配置的代码规范规则优先级高于编辑器默认的代码格式化规则。<br>　　③ <span style="color: #FF6827;">.gitignore</span><br>　　配置git提交时需要忽略的文件。<br>　　④ <span style="color: #FF6827;">postcssrc.js</span><br>　　autoprefixer（自动补全css样式的浏览器前缀）；postcss-import（@import引入语法）、CSS Modules（规定样式作用域）。<br>　　⑤ <span style="color: #FF6827;">index.html</span><br>　　项目入口页面，编译之后所有代码将插入到这来。<br>　　⑥ <span style="color: #FF6827;">package.json</span><br>　　npm的配置文件（npm install根据package.json下载对应版本的安装包）。<br>　　⑦ <span style="color: #FF6827;">package.lock.json</span><br>　　npm install（安装）时锁定各包的版本号。<br>　　⑧ <span style="color: #FF6827;">README.md</span><br>　　项目使用说明。</p><h2 id="五、vue-cli-3x"><a href="#五、vue-cli-3x" class="headerlink" title="五、vue-cli 3x"></a>五、vue-cli 3x</h2><p>　　了解 vue-cli 3x 参见本人另一篇博客<span class="series"><a href="/blogs/vue-cli3x-to-create-vue-project.html" title="Vue CLI 3.x搭建Vue项目">《Vue CLI 3.x搭建Vue项目》</a></span>。</p><p class="reference"><br>参考<br><a href="https://github.com/vuejs/vue-cli/tree/v2" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/vuejs/vue-cli/tree/v2</a><br><a href="https://cli.vuejs.org/zh/guide/creating-a-project.html#拉取-2-x-模板-旧版本" rel="external nofollow noopener noreferrer" target="_blank">https://cli.vuejs.org/zh/guide/creating-a-project.html#拉取-2-x-模板-旧版本</a><br></p><style type="text/css">    .series a {        text-decoration:none !important;    }</style>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WebStorm配置代码格式化</title>
      <link href="/blogs/webstorm-eslint-prettier-reformat-code.html"/>
      <url>/blogs/webstorm-eslint-prettier-reformat-code.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">WebStorm配置代码格式化</div><blockquote><p>配置WebStorm的代码格式化功能，使自动代码格式后符合ESLint+Prettier代码检测规范。</p></blockquote><p>　　通过vue-cli脚手架工具搭建vue项目时，会让我们选择是否配置ESLint（代码检测工具），很多人会选择No，因为一旦有了检测，会降低开发效率（经常报错）。<br>　　但我在实际工作中会选择配置它。<br>　　因为一方面可以<span style="color: #FF6827;">养成良好的代码习惯，写出来的代码可读性高</span>，<br>　　另一方面可以<span style="color: #FF6827;">使团队协作的项目中代码风格一致，便于维护</span>。</p><p>　　在使用脚手架创建项目时，我选择了 <span style="color: #FF6827;">ESLint + Prettier</span>。这也是使用比较多的一个组合。</p><p>　　而一旦配置了代码检测工具，我们在使用WebStorm的<span style="color: #FF6827;">Reformat Code</span>功能时，就会出现下图这样的警告，甚至报错。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/webstorm_reformat_code_warning.png" alt="webstorm_reformat_code_warning.png.png"><br>　　这是因为WebStorm的默认格式化标准不同造成的，一些玩家选择修改<code>.eslintrc.js</code>文件中的规则（rules）来让检测工具“迎合”IDE，我不太喜欢这样，而且也不能解决一些问题（比如eslint不报错了，但Vue却还是会报错等等）。</p><p>　　下面记录下我的<span style="color: #FF6827;">最终解决办法</span>。</p><h2 id="一、修改代码缩进"><a href="#一、修改代码缩进" class="headerlink" title="一、修改代码缩进"></a>一、修改代码缩进</h2><p>　　依次进入WebStorm的<br>　　<span style="color: #3498db;">File =&gt; Settings =&gt; Editor =&gt; Code Style</span><br>　　将缩进设置为2（个空格），其中包括Style Sheets中的各种css语言文件、html文件、JavaScript文件和其它类型文件（根据实际情况），如下图所示。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/webstorm_reformat_code_indent.png" alt="webstorm_reformat_code_indent.png"></p><h2 id="二、修改标签后换行不缩进"><a href="#二、修改标签后换行不缩进" class="headerlink" title="二、修改标签后换行不缩进"></a>二、修改标签后换行不缩进</h2><p>　　ESLint + Prettier 约定了 <code>&lt;script&gt;</code> 标签和 <code>&lt;style&gt;</code> 标签后的首行代码不缩进，我们也要配置一下。<br>　　进入<br>　　<span style="color: #3498db;">File =&gt; Settings =&gt; Editor =&gt; Code Style =&gt; HTML =&gt; Other</span><br>　　在 <strong>Do not indent children of</strong> 一栏中加入<span style="color: #FF6827;">script</span>标签和<span style="color: #FF6827;">style</span>标签，如下图所示。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/webstorm_reformat_tag_indent.png" alt="webstorm_reformat_tag_indent.png"></p><h2 id="三、设置函数名和花括号的空格"><a href="#三、设置函数名和花括号的空格" class="headerlink" title="三、设置函数名和花括号的空格"></a>三、设置函数名和花括号的空格</h2><p>　　ESLint + Prettier 约定了：<br>　　●　函数声明时，函数名后不加括号；<br>　　●　在函数表达式中function后面括号前不加空格；<br>　　●　花括号中（插值表达式/解构赋值）首尾要增加空格。<br>　　我们在<br>　　<span style="color: #3498db;">File =&gt; Settings =&gt; Editor =&gt; Code Style =&gt; JavaScript =&gt; Spaces</span><br>　　做如下配置（见下图）：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/webstorm_reformat_code_spaces.png.png" alt="webstorm_reformat_code_spaces.png.png"></p><p>　　现在，就可以愉快地使用WebStorm的 <span style="color: #3498db;">Code =&gt; Reformat Code</span> 来自动格式化代码，而不用担心格式完后一堆报错了。</p><h2 id="四、相关：vue-cli脚手架工具"><a href="#四、相关：vue-cli脚手架工具" class="headerlink" title="四、相关：vue-cli脚手架工具"></a>四、相关：vue-cli脚手架工具</h2><p>　　如果想了解vue-cli脚手架工具搭建vue项目的相关内容，可以阅读我的另外两篇笔记：<br>　　<span class="series"><a href="/blogs/vue-cli2x-to-create-vue-project.html" title="Vue CLI 2.x搭建Vue项目">《Vue CLI 2.x搭建Vue项目》</a></span><br>　　<span class="series"><a href="/blogs/vue-cli3x-to-create-vue-project.html" title="Vue CLI 3.x搭建Vue项目">《Vue CLI 3.x搭建Vue项目》</a></span></p><style type="text/css">    .series a {        text-decoration:none !important;    }</style>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> Vue.js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈RESTful规范</title>
      <link href="/blogs/restful-api-design.html"/>
      <url>/blogs/restful-api-design.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">浅谈RESTful规范</div><blockquote><p>RESTful是目前最流行的API设计规范，用于Web数据接口的设计。本文总结RESTful的特点，以及如何设计和使用RESTful风格的API。</p></blockquote><p>　　RESTful规范一种软件的架构风格，设计风格，而不是标准，为客户端和服务端的交互提供一组设计原则和约束条件。</p><h2 id="一、面向资源编程"><a href="#一、面向资源编程" class="headerlink" title="一、面向资源编程"></a><span style="font-size: 27px; color:#3498db;">一、面向资源编程</span></h2><p>　　每个URL代表一种资源，URL中尽量不要用动词，要用<span style="color: #FF0000;">名词</span>，往往名词<span style="color: #FF0000;">跟数据库表格相对应</span>。</p><p>　　一般来说，数据库中的表都是同种记录的集合，所有API中的名词也应该使用<span style="color: #FF0000;">复数</span>。</p><p>　　举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。</p><pre class=" language-bash"><code class="language-bash">    https://api.example.com/v1/zoos    https://api.example.com/v1/animals    https://api.example.com/v1/employees</code></pre><h2 id="二、HTTP动词"><a href="#二、HTTP动词" class="headerlink" title="二、HTTP动词"></a><span style="font-size: 27px; color:#3498db;">二、HTTP动词</span></h2><p>　　对于资源的具体操作类型，由HTTP动词表示。<br>　　常用的HTTP动词有下面五个（括号里对应的sql命令）。</p><pre class=" language-bash"><code class="language-bash">    GET（SELECT）：从服务器取出资源（一项或多项）。    POST（CREATE）：在服务器新建一个资源。    PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。    PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。    DELETE（DELETE）：从服务器删除资源。</code></pre><h2 id="三、在URL中体现版本"><a href="#三、在URL中体现版本" class="headerlink" title="三、在URL中体现版本"></a><span style="font-size: 27px; color:#3498db;">三、在URL中体现版本</span></h2><p>　　例如：</p><pre class=" language-bash"><code class="language-bash">    https://www.bootcss.com/v1/    https://v1.bootcss.com/</code></pre><h2 id="四、在URL中体现是否是API"><a href="#四、在URL中体现是否是API" class="headerlink" title="四、在URL中体现是否是API"></a><span style="font-size: 27px; color:#3498db;">四、在URL中体现是否是API</span></h2><p>　　例如：</p><pre class=" language-bash"><code class="language-bash">    https://www.bootcss.com/api/mycss    https://api.bootcss.com/mycss</code></pre><h2 id="五、在URL中的过滤条件"><a href="#五、在URL中的过滤条件" class="headerlink" title="五、在URL中的过滤条件"></a><span style="font-size: 27px; color:#3498db;">五、在URL中的过滤条件</span></h2><p>　　如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。</p><pre class=" language-bash"><code class="language-bash">    ?limit<span class="token operator">=</span>10：指定返回记录的数量    ?offset<span class="token operator">=</span>10：指定返回记录的开始位置。    ?page<span class="token operator">=</span>2<span class="token operator">&amp;</span>per_page<span class="token operator">=</span>100：指定第几页，以及每页的记录数。    ?sortby<span class="token operator">=</span>name<span class="token operator">&amp;</span>order<span class="token operator">=</span>asc：指定返回结果按照哪个属性排序，以及排序顺序。    ?animal_type_id<span class="token operator">=</span>1：指定筛选条件</code></pre><h2 id="六、尽量使用HTTPS"><a href="#六、尽量使用HTTPS" class="headerlink" title="六、尽量使用HTTPS"></a><span style="font-size: 27px; color:#3498db;">六、尽量使用HTTPS</span></h2><p>　　例如：</p><pre class=" language-bash"><code class="language-bash">    https://www.bootcss.com/v1/mycss</code></pre><h2 id="七、响应时设置状态码"><a href="#七、响应时设置状态码" class="headerlink" title="七、响应时设置状态码"></a><span style="font-size: 27px; color:#3498db;">七、响应时设置状态码</span></h2><p>　　1**   信息，服务器收到请求，需要请求者继续执行操作</p><p>　　2**  成功，操作被成功接收并处理</p><p>　　3**  重定向，需要进一步的操作以完成请求</p><p>　　4**  客户端错误，请求包含语法错误或无法完成请求</p><p>　　5**  服务器错误，服务器在处理请求的过程中发生了错误</p><h2 id="八、返回值"><a href="#八、返回值" class="headerlink" title="八、返回值"></a><span style="font-size: 27px; color:#3498db;">八、返回值</span></h2><p>　　GET请求 返回查到所有或单条数据</p><p>　　POST请求  返回新增的数据</p><p>　　PUT请求  返回更新数据</p><p>　　PATCH请求  局部更新  返回更新整条数据</p><p>　　DELETE请求  返回值为空</p><h2 id="九、返回错误信息"><a href="#九、返回错误信息" class="headerlink" title="九、返回错误信息"></a><span style="font-size: 27px; color:#3498db;">九、返回错误信息</span></h2><p>　　如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p><pre class=" language-bash"><code class="language-bash">    <span class="token punctuation">{</span>      <span class="token string">"error"</span><span class="token keyword">:</span> <span class="token string">"Invalid API key"</span>    <span class="token punctuation">}</span></code></pre><h2 id="十、Hypermedia-API"><a href="#十、Hypermedia-API" class="headerlink" title="十、Hypermedia API"></a><span style="font-size: 27px; color:#3498db;">十、Hypermedia API</span></h2><p>　　如果遇到需要跳转的情况，携带调转接口的URL。<br>　　Hypermedi API的设计，比如github的API就是这种设计，访问 api.github.com 会得到一个所有可用的API的网址列表。</p><pre class=" language-bash"><code class="language-bash">    <span class="token punctuation">{</span>      <span class="token string">"current_user_url"</span><span class="token keyword">:</span> <span class="token string">"https://api.github.com/user"</span>,      <span class="token string">"authorizations_url"</span><span class="token keyword">:</span> <span class="token string">"https://api.github.com/authorizations"</span>,      // <span class="token punctuation">..</span>.    <span class="token punctuation">}</span></code></pre><p>　　从上面可以看到，如果想获取当前用户的信息，应该去访问 api.github.com/user，就会得到下面的结果。</p><pre class=" language-bash"><code class="language-bash">    <span class="token punctuation">{</span>      <span class="token string">"message"</span><span class="token keyword">:</span> <span class="token string">"Requires authentication"</span>,      <span class="token string">"documentation_url"</span><span class="token keyword">:</span> <span class="token string">"https://developer.github.com/v3/users/#get-the-authenticated-user"</span>    <span class="token punctuation">}</span></code></pre><h2 id="十一、其他"><a href="#十一、其他" class="headerlink" title="十一、其他"></a><span style="font-size: 27px; color:#3498db;">十一、其他</span></h2><p>　　（1）API的身份认证应该使用OAuth 2.0框架</p><p>　　（2）服务器返回的数据格式，应该尽量使用JSON，避免使用XML</p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP抓包神器 - Fiddler</title>
      <link href="/blogs/fiddler-free-web-debugging-proxy.html"/>
      <url>/blogs/fiddler-free-web-debugging-proxy.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">HTTP抓包神器 - Fiddler</div><blockquote><p>一款免费且功能强大的http抓包工具，简单易上手，非常适合开发和测试人员。</p></blockquote><h2 id="一、关于Fiddler"><a href="#一、关于Fiddler" class="headerlink" title="一、关于Fiddler"></a>一、关于Fiddler</h2><h3 id="1-Fiddler的简介"><a href="#1-Fiddler的简介" class="headerlink" title="1. Fiddler的简介"></a><span style="font-size: 18px;">1. Fiddler的简介</span></h3><p>　　Fiddler是位于客户端和服务器端之间的代理，也是目前最常用的抓包工具之一。它能够记录客户端和服务器之间的所有请求，可以针对特定的请求，分析请求数据、设置断点、调试web应用、修改请求的数据，甚至可以修改服务器返回的数据，功能非常强大，是web调试的利器。</p><p>　　简而言之，<span style="color: #FF0000;">Fiddler是一款http抓包工具。</span></p><h3 id="2-Fiddler的下载"><a href="#2-Fiddler的下载" class="headerlink" title="2. Fiddler的下载"></a><span style="font-size: 18px;">2. Fiddler的下载</span></h3><p>　　方式一：<a href="https://www.telerik.com/fiddler" title="Telerik Fiddler" rel="external nofollow noopener noreferrer" target="_blank">官网安装包</a>下载（<span style="color: #FF0000;">推荐</span>），进入官网下载安装包，然后安装即可。</p><p>　　方式二：绿色汉化版下载，直接百度搜关键字“fiddle绿色汉化版”，有很多下载链接。好处是绿色免安装，中文界面；但有朋友用了几次后，发现每次打开都会自动建立2、3百个端口自动访问m.10010等网站。</p><p>　　上述两种下载方式看个人需要选择。</p><h3 id="2-Fiddler的原理"><a href="#2-Fiddler的原理" class="headerlink" title="2. Fiddler的原理"></a><span style="font-size: 18px;">2. Fiddler的原理</span></h3><p>　　Fiddler是以代理web服务器的形式工作的，它默认使用代理地址：127.0.0.1，端口：8888，都是可设置的。<br>　　如下图所示，本地应用与服务器之间所有的 Request 和 Response 都将经过Fiddler，由Fiddler进行转发，此时Fiddler以代理服务器的方式存在。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/fiddler_theory.jpg" alt="fiddler_theory.jpg"><br>　　由于所有的网络数据都会经过Fiddler，因此Fiddler能够截获这些数据，实现网络数据的抓包。<br>　　另外，Fiddler会自动设置代理，退出的时候它会自动注销代理，这样就不会影响别的程序。不过如果Fiddler非正常退出，这时候因为Fiddler没有自动注销，会造成网页无法访问。解决的办法是重新启动下Fiddler。</p><h3 id="4-Fiddler和Wireshark对比"><a href="#4-Fiddler和Wireshark对比" class="headerlink" title="4. Fiddler和Wireshark对比"></a><span style="font-size: 18px;">4. Fiddler和Wireshark对比</span></h3><p>　　Fiddler 和 Wireshark 是使用最广的两款抓包工具，这两款侧重点不同，但同样都是十分有效的抓包工具。<br>　　下面看下它们的对比：</p><p>　　<span style="font-size: 18px; color: #FF0000;">Fiddler</span><br>　　<span style="color: #159957;">优势：</span><br>　　　৹ 本地化的工具，是一个使用本地 127.0.0.1:8888 的 http代理（任何能够设置http代理为127.0.0.1:8888的浏览器和应用程序都可以使用Fiddler。<br>　　　৹ 在windows上运行的程序，专门用来捕获http、https的，本身对http协议支持较好，且操作简单容易上手。<br>　　　৹ 具有抓包和分析功能，省去了安装其他工具的必要。<br>　　　৹ 工具本身功能强大，如劫包、篡改数据、限速等。<br>　　<span style="color: #159957;">不足：</span><br>　　　৹ Fiddler只是用于分析http、https数据包的，Wireshark是所有网络数据包。</p><p>　　<span style="font-size: 18px; color: #FF0000;">Wireshark</span><br>　　<span style="color: #159957;">优势：</span><br>　　　৹ 强大的协议解析能力，一到七层全解码，一览无遗，对于协议细节的研究特别有帮助。<br>　　　৹ 对于https加密流量，只要将浏览器的session key 自动导入wireshark，Wireshark可以自动解密https流量。<br>　　<span style="color: #159957;">不足：</span><br>　　　৹ 更专业，有一定上手难度。<br>　　　৹ 尽管可以自定义过滤列表，但为了抓取一个特定TCP Flow /Session 流量需要写一个长长的过滤列表，这对于初学者很不友好。</p><p>　　总结，如果是处理http、https还是用Fiddler；其他协议比如tcp、udp就用Wireshark。</p><h2 id="二、使用Fiddler抓取浏览器包"><a href="#二、使用Fiddler抓取浏览器包" class="headerlink" title="二、使用Fiddler抓取浏览器包"></a>二、使用Fiddler抓取浏览器包</h2><p>　　Fiddler启动的时候，默认IE的代理设为了（127.0.0.1:8888），而其他浏览器是需要手动设置。<br>　　在我的电脑上，Firefox已经不需要手动设置了。<br>　　如果你需要对Firefox或者Chrome浏览器进行设置，可以按如下步骤：</p><p>　　<span style="font-size: 18px; color: #FF0000;">Firefox</span><br>　　右上角“打开菜单”-&gt;选项-&gt;网络设置-&gt;设置-&gt;。并配置相应的代理如下：<br>　　代理模式：<span style="color: #159957;">手动配置代理</span>，<br>　　HTTP代理：<span style="color: #159957;">127.0.0.1</span>，端口：<span style="color: #159957;">8888</span>。<br>　　或者直接安装Firefox的代理管理工具：<span style="color: #FF0000;">FoxyProxy</span>，我没用过，据说它完全替代了Firefox有限的代理功能，而且提供了比SwitchProxy、ProxyButton、QuickProxy、xyzproxy、ProxyTex、TorButton等等更多的功能。</p><p>　　<span style="font-size: 18px; color: #FF0000;">Chrome</span><br>　　安装插件：<span style="color: #FF0000;">SwitchyOmega</span>，这是Chrome的代理管理浏览器插件，在Chrome应用商城能找到。<br>　　添加好插件后，打开 SwitchyOmega 点击新建情景模式，设置代理服务器为 <span style="color: #159957;">127.0.0.1:8888</span>，设置好后，点击应用选项保存即可。<br>　　通过浏览器插件切换为设置好的代理，请注意（这里如果不需要，你设置的代理，请切换成 auto switch）不然会影响浏览器正常使用，无法访问网页。</p><p>　　下面就可以使用Fiddler抓取浏览器的HTTP请求了，打开Firefox浏览器，访问百度。可以看到Fiddler一下子显示了很多的记录，看的眼花缭乱，需要这时候需要使用过滤条件来帮助你，一般常用的有<span style="color: #FF0000;">三种过滤条件</span>：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/fiddler_filters.png" alt="fiddler_filters.png"><br>　　●　<strong>域名过滤</strong>，只显示特定域名的记录：<br>　　　　৹　<code>*.baidu.com</code> 表示所有的百度二级域名会话；<br>　　　　৹　<code>*baidu.com</code> 表示一级域名+二级域名的会话；<br>　　　　৹　<code>*baidu.com</code> 表示一级域名+二级域名的会话。<br>　　●　<strong>类型过滤</strong>，一般对各种图片、CSS、JS这类的静态素材也不需要看的情况下，直接全部过滤掉：<br>　　　　৹　<code>.*\.(bmp|css|js|gif|ico|jp?g|png|swf|woff)</code><br>　　●　<strong>返回码过滤</strong>，比如只想显示200状态返回码的数据，其他的不显示。</p><p>　　<span style="color: #FF0000;">设置好了后一定要点击当前tab页右上角的Actions生效。</span></p><h2 id="三、使用Fiddler抓取https请求"><a href="#三、使用Fiddler抓取https请求" class="headerlink" title="三、使用Fiddler抓取https请求"></a>三、使用Fiddler抓取https请求</h2><p>　　Fiddler默认是抓http请求的，对于pc上的https请求，会提示网页不安全，如下图：<br>　　点击某一个请求，你会发现请求的内容是一堆明显不对的文字，然后该请求的左边是一个锁的样式，表示https加密。右边的返回内容中，第一句告诉我们“<span style="color: #FF0000;">这是一个连接隧道，通过该隧道的是加密的HTTPS流量。</span>”<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/fiddler_https_decryption_is_disabled.png" alt="fiddler_https_decryption_is_disabled.png"><br>　　这时候需要在浏览器上安装证书。</p><p>　　<span style="font-size: 18px; color: #FF0000;">第一步：检查Fiddler设置</span><br>　　依次选择 Tools &gt; Options &gt; HTTPS，勾选 Decrypt HTTPS traffic。</p><p>　　<span style="font-size: 18px; color: #FF0000;">第二步：安装证书</span><br>　　安装证书两种方法，选其一即可：<br>　　●　勾选后点击右边的Actions按钮选择“<span style="color: #FF0000;">Trust Root Certificate</span>”选项，然后全部选择是就行了。<br>　　　　৹　如果弹出如下报错，参考<a href="https://blog.csdn.net/hyhui13/article/details/82846824" title="Fiddler死活抓不了HTTPS包解决办法" rel="external nofollow noopener noreferrer" target="_blank">Fiddler死活抓不了HTTPS包解决办法</a>。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/fiddler_root_certificate.png" alt="fiddler_root_certificate.png"></p><p>　　●　勾选后点击右边的Actions按钮选择第二个选项将证书导出到桌面，然后再在对应的浏览器里面添加即可。<br>　　　　৹　导出到桌面，此时桌面上会多一个文件：FiddlerRoot.cer；<br>　　　　৹　打开浏览器，工具&gt;选项&gt;高级&gt;证书&gt;查看证书&gt;证书机构&gt;导入；<br>　　　　৹　下载证书弹出框，勾选三个选项，确定。</p><h2 id="四、使用Fiddler抓取手机app包"><a href="#四、使用Fiddler抓取手机app包" class="headerlink" title="四、使用Fiddler抓取手机app包"></a>四、使用Fiddler抓取手机app包</h2><p>　　但是如果你想要对手机上的app进行抓包怎么办呢，那么你还需要进行以下操作。</p><p>　　●　首先你的Fiddler所在的电脑和手机必须处在同一个局域网内（即连着同一个路由器）；</p><p>　　●　查看你的本机IP地址，在Fiddler的右上角有一个Online按钮，鼠标悬浮会显示你的IP信息；</p><p>　　●　配置连接信息：Tools &gt; Options &gt;Connections。<br>　　　　৹　端口默认是8888，你可以进行修改；<br>　　　　৹　勾选<span style="color: #FF0000;">Allow remote computers to connect</span>选项，然后重启Fiddler，再次打开时会弹出一个信息，选择ok即可。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/fiddler_connections.png" alt="fiddler_connections.png"><br>　　●　打开你的手机，找到你所连接的WIFI，长按选择修改网络，输入密码后往下拖动，然后勾选显示高级选项，然后在代理一栏选择手动，再将你先前查看的IP地址和端口号输入进去，然后保存；<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/fiddler_mobile_settings.png" alt="fiddler_mobile_settings.png"><br>　　●　最后安装手机证书。<br>　　　　৹　在手机浏览器一栏输入电脑的IP地址和端口号，这里我是192.168.1.157:8888；<br>　　　　৹　进入一个网页，点击最下面那个<span style="color: #FF0000;">FiddlerRoot certificate</span>下载证书，下载成功后在设置里面安装；<br>　　　　৹　安装步骤：打开高级设置-&gt;安全-&gt;从SD卡安装证书-&gt;找到证书文件-&gt;点击后为证书命名点击确定即可安装成功（具体过程请根据实际机型百度查找，关键词是<span style="color: #FF0000;">从SD卡安装证书</span>）；</p><p>　　●　到这里我们就设置好所有的值，下面就来测试一下，打开手机中的某个app，Fiddler抓包看看。</p>]]></content>
      
      
      <categories>
          
          <category> 日常运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 抓包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何选择开源许可证？【转】</title>
      <link href="/blogs/how-to-choose-free-software-licenses.html"/>
      <url>/blogs/how-to-choose-free-software-licenses.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">如何选择开源许可证？【转】</div><blockquote><p>因为之前阮一峰的博客挂掉了，想去找这篇文章的时候打不开页面，所以后来我备份了一下。<br>原文链接：<a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html</a></p></blockquote><p>　　如何为代码选择开源许可证，这是一个问题。</p><p>　　世界上的开源许可证，大概有上百种。很少有人搞得清楚它们的区别。即使在最流行的六种—-GPL、BSD、MIT、Mozilla、Apache和LGPL—-之中做选择，也很复杂。</p><p>　　乌克兰程序员Paul Bagwell，画了一张分析图，说明应该怎么选择。这是我见过的最简单的讲解，只用两分钟，你就能搞清楚这六种许可证之间的最大区别。</p><p>　　下面是出自阮一峰博客的中文版，是我见到过的最好的开源License说明，感谢阮一峰的劳动和介绍。</p><p><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/free_software_licenses.png" alt="free_software_licenses.png" width="800" hegiht="500" align="center"></p>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【TF小记】CNN英文文本分类</title>
      <link href="/blogs/tensorflow-cnn-english-text-classification-implement.html"/>
      <url>/blogs/tensorflow-cnn-english-text-classification-implement.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">【TensorFlow小记】CNN英文文本分类</div><blockquote><p>学习GitHub上一个不错的CNN英文文本分类项目，代码解读。</p></blockquote><h2 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h2><ul><li>开发环境<ul><li>Windows</li></ul></li><li>Python版本<ul><li>Python 3.5.4</li></ul></li><li>pip包<ul><li>tensorflow==1.5.0</li><li>numpy==1.16.3</li></ul></li></ul><h2 id="二、项目介绍"><a href="#二、项目介绍" class="headerlink" title="二、项目介绍"></a>二、项目介绍</h2><p>　　因为工作需要，要用CNN实现文本分类，但机器学习这块还不能算入门，仅是利用零碎时间做了了解。于是在GitHub上找到了<a href="https://github.com/dennybritz/cnn-text-classification-tf" rel="external nofollow noopener noreferrer" target="_blank">cnn-text-classification-tf</a>项目，一边解读一边学习吧。<br>　　<span style="font-size: 10px; color: #9e9e9e;">PS：这个项目的作者很酷，注意看关键词“High-shool dropout”，而且在GitHub上有多个不错的机器学习项目，学习能力和知识量可见一斑。当然了，国内也有很多没有学校光环的技术大牛，这些都是题外话了。</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/github_dennybritz.png" alt="github_dennybritz.png"></p><p>　　关于这个项目，其实<a href="http://www.wildml.com/2015/12/implementing-a-cnn-for-text-classification-in-tensorflow/" rel="external nofollow noopener noreferrer" target="_blank">Implementing a CNN for Text Classification in TensorFlow</a>这篇blog已经写的很详细了，但是它是英文的，而且对于刚入手tensorflow的新人来说代码可能仍存在一些细节不太容易理解，我也是初学，就简单总结下自己的理解，如果对读者有帮助那将是极好的。</p><p>　　首先看这个项目，共有四个PY文件，分别是：<br>　　●　text_cnn.py：网络结构设计<br>　　●　train.py：网络训练<br>　　●　eval.py：预测&amp;评估<br>　　●　data_helpers.py：数据预处理</p><p>　　下面对最核心的部分，即<span style="color: #FF0000;">CNN模型</span>进行解读，具体代码看<a href="https://github.com/winyuan/cnn_text_classification_tf" rel="external nofollow noopener noreferrer" target="_blank">这里</a>。</p><h2 id="三、模型原理"><a href="#三、模型原理" class="headerlink" title="三、模型原理"></a>三、模型原理</h2><p>　　在<code>text_cnn.py</code>中，主要定义了一个类 <span style="color: #FF0000;">TextCNN</span>。<br>　　这个类搭建了一个最basic的CNN模型，有 input layer，convolutional layer，max-pooling layer 和最后输出的 softmax layer。<br>　　但是又因为整个模型是用于文本的（而非CNN的传统处理对象：图像），因此在CNN的操作上相对应地做了一些小调整：</p><p>　　●　<span style="font-size: 10px;">对于文本任务，输入层自然使用了word embedding来将文本转换成词向量。</span><br>　　●　<span style="font-size: 10px;">接下来是卷积层，在图像处理中经常看到的卷积核都是正方形的，比如4*4矩阵，然后在整张image上沿宽和高逐步移动进行卷积操作。但是在NLP中输入的“image”是一个词矩阵，比如n个words，每个word用200维（embedding_size）的 vector（矢量/一维数组）表示的话，这个“image”就是n*200的矩阵，卷积核只在高度上滑动，在宽度上和 word vector（word embedding） 的维度一致（=200），也就是说每次窗口滑动过的位置都是完整的单词，不会将几个单词的一部分“vector”进行卷积，这也保证了word作为语言中最小粒度的合理性。（当然，如果研究的粒度是character-level而不是word-level，需要另外的方式处理）</span><br>　　●　<span style="font-size: 10px;">由于卷积核和 word embedding 的宽度一致，一个卷积核对于一个sentence，卷积后得到的结果是一个 vector，shape=(sentence_len - filter_size + 1, 1)，那么，在 max-pooling 后得到的就是一个 scalar。所以，这点也是和图像卷积的不同之处，需要注意一下。</span><br>　　●　<span style="font-size: 10px;">正是由于 max-pooling 后只是得到一个 scalar，在NLP中，会实施多个 filter_size（比如3,4,5个words的宽度分别作为卷积的窗口大小），每个 filter_size 又有 num_filters 个（比如64个）卷积核。一个卷积核得到的只是一个scalar太孤单了，智慧的人们就将相同 filter_size 卷积出来的 num_filters 个 scalar 组合在一起，组成这个 filter_size 下的 feature_vector。</span><br>　　●　<span style="font-size: 10px;">最后再将所有 filter_size 下的 feature_vector 也组合成一个 single vector，作为最后一层softmax的输入。</span></p><p>　　整个过程如下图所示，这个模型在<a href="/blogs/tensorflow-cnn-text-classification-theory.html">CNN文本分类原理</a>一文中也进行了讲述。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/text_cnn_structure.png" alt="text_cnn_structure.png" width="600" hegiht="500" align="center"></p><blockquote><p>重要的事情说三遍：一个卷积核对于一个句子，convolution后得到的是一个vector；max-pooling后，得到的是一个scalar。</p></blockquote><p>　　如果对上述讲解还有什么不理解的地方，可以先看下<a href="/blogs/tensorflow-cnn-text-classification-theory.html">CNN文本分类原理</a>这篇文章。<br>　　说了这么多，总结一下这个类的作用就是：搭建一个用于文本数据的CNN模型。</p><h2 id="四、代码解读"><a href="#四、代码解读" class="headerlink" title="四、代码解读"></a>四、代码解读</h2><p>　　了解了大致原理，进行代码的解读就更容易上手了。下面重点对 <span style="color: #FF0000;">TextCNN</span> 这个类进行逐行的理解。</p><h3 id="1-类初始化"><a href="#1-类初始化" class="headerlink" title="1. 类初始化"></a><span style="font-size: 18px;">1. 类初始化</span></h3><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>        self<span class="token punctuation">,</span> sequence_length<span class="token punctuation">,</span> num_classes<span class="token punctuation">,</span> vocab_size<span class="token punctuation">,</span>         embedding_size<span class="token punctuation">,</span> filter_sizes<span class="token punctuation">,</span> num_filters<span class="token punctuation">,</span> l2_reg_lambda<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span></code></pre><p>　　可以看到类TextCNN的初始化中，接收了<code>train.py</code>中传入的若干参数。<br>　　●　<code>sequence_length</code>：句子固定长度（不足补全，超过截断）<br>　　●　<code>num_classes</code>：输出层中的类数（二分类传入的就是2）<br>　　●　<code>vocab_size</code>：词库大小<br>　　●　<code>embedding_size</code>：词向量维度<br>　　●　<code>filter_sizes</code>：卷积核尺寸（我们想要卷积过滤器覆盖的字数，例如，[3，4，5]意味着我们将有一个过滤器，分别滑过3，4和5个字，总共有3 * num_filters个过滤器）<br>　　●　<code>num_filters</code>：每个尺寸的卷积核数量<br>　　●　<code>l2_reg_lambda=0.0</code>：L2正则参数</p><hr><p>　　下面定义网络的输入数据，一句句看。</p><pre class=" language-python"><code class="language-python">    <span class="token comment" spellcheck="true"># Placeholders for input, output and dropout</span>    self<span class="token punctuation">.</span>input_x <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>int32<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> sequence_length<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"input_x"</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>input_y <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> <span class="token punctuation">[</span>None<span class="token punctuation">,</span> num_classes<span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"input_y"</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>dropout_keep_prob <span class="token operator">=</span> tf<span class="token punctuation">.</span>placeholder<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>float32<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"dropout_keep_prob"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Keeping track of l2 regularization loss (optional)</span>    l2_loss <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">)</span></code></pre><p>　　变量<code>input_x</code>存储句子矩阵，宽为<code>sequence_length</code>，长度自适应（=句子数量）；<br>　　变量<code>input_y</code>存储句子对应的分类结果，宽度为<code>num_classes</code>，长度自适应；<br>　　变量<code>dropout_keep_prob</code>存储dropout参数；<br>　　常量<code>l2_loss</code>为L2正则超参数。</p><p>　　<span style="font-size: 10px;"><code>tf.placeholder</code>创建一个占位符变量，当我们在训练集或测试时间执行它时，我们将其馈送到网络。第二个参数是输入张量的形状：None意味着该维度的长度可以是任何东西。在我们的情况下，第一个维度是批量大小，并且使用“None”允许网络处理任意大小的批次。<br>　　将神经元保留在丢失层中的概率也是网络的输入，因为我们仅在训练期间使用<code>dropout</code>。 我们在评估模型时禁用它（稍后再说）。</span></p><p>　　下面开始构建网络，一层层看。</p><h3 id="2-Embedding层"><a href="#2-Embedding层" class="headerlink" title="2. Embedding层"></a><span style="font-size: 18px;">2. Embedding层</span></h3><p>　　我们定义的第一层是Embedding层。</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>device<span class="token punctuation">(</span><span class="token string">'/cpu:0'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"embedding"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>W <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>            tf<span class="token punctuation">.</span>random_uniform<span class="token punctuation">(</span><span class="token punctuation">[</span>vocab_size<span class="token punctuation">,</span> embedding_size<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            name<span class="token operator">=</span><span class="token string">"W"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>embedded_chars <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>embedding_lookup<span class="token punctuation">(</span>self<span class="token punctuation">.</span>W<span class="token punctuation">,</span> self<span class="token punctuation">.</span>input_x<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>embedded_chars_expanded <span class="token operator">=</span> tf<span class="token punctuation">.</span>expand_dims<span class="token punctuation">(</span>self<span class="token punctuation">.</span>embedded_chars<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></code></pre><p>　　我们在这里使用了几个功能：<br>　　●　<code>tf.device(&#39;/cpu:0&#39;)</code> 强制在CPU上执行操作。默认情况下，TensorFlow将尝试将操作放在GPU上（如果有的话）可用，但是我这里是笔记本电脑开发调试，所以用CPU支持。<br>　　●　<code>tf.name_scope</code>创建一个命名域，名称为“embedding”。它将所有操作添加到名为“embedding”的顶级节点中，以便在TensorBoard中可视化网络时获得良好的层次结构。<br>　　●　<code>self.W</code>是我们在训练中学习的embedding矩阵，我们使用随机均匀分布来初始化它。<br>　　　　৹　存储<code>vocab_size</code>个大小为<code>embedding_size</code>的词向量，随机初始化为-1.0~1.0之间的值；</p><p>　　●　<code>self.embedded_chars</code>是输入<code>input_x</code>对应的词向量表示；<br>　　　　৹　<code>tf.nn.embedding_lookup</code>创建实际的embedding操作，embedding操作的结果是一个三维的tensor，它的形状是<code>[None，sequence_length，embedding_size]</code>。</p><p>　　●　<code>self.embedded_chars_expanded</code>是，将词向量表示扩充一个维度<code>(embedded_chars * 1)</code>，维度变为<code>[句子数量, sequence_length, embedding_size, 1]</code>，方便进行卷积（<code>tf.nn.conv2d</code>的input参数为四维变量，见后文）<br>　　　　৹　函数<code>tf.expand_dims(input, axis=None, name=None, dim=None)</code>：在input第axis位置增加一个维度（dim用法等同于axis，官方文档已弃用）；<br>　　　　৹　TensorFlow的卷积操作<code>conv2d</code>需要传递一个四维tensor，其维数对应于batch（批次），width（宽度），height（高度）和channel（通道）。我们embedding的结果不包含channel维度，所以我们手动添加它，留下的一层shape为<code>[None，sequence_length，embedding_size，1]</code></p><h3 id="3-卷积层和池化（Max-Pooling）层"><a href="#3-卷积层和池化（Max-Pooling）层" class="headerlink" title="3. 卷积层和池化（Max-Pooling）层"></a><span style="font-size: 18px;">3. 卷积层和池化（Max-Pooling）层</span></h3><p>　　现在我们开始构建卷积层，然后是池化（Max-Pooling）层。<br>　　注意：我们使用了不同大小的filters（卷积核），因为每个卷积都会产生不同形状的tensor，我们需要对它们进行迭代，为每个tensor创建一个层，然后将结果合并成一个大的特征向量。</p><pre class=" language-python"><code class="language-python">    pooled_outputs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> filter_size <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>filter_sizes<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"conv-maxpool-%s"</span> <span class="token operator">%</span> filter_size<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># Convolution Layer</span>            filter_shape <span class="token operator">=</span> <span class="token punctuation">[</span>filter_size<span class="token punctuation">,</span> embedding_size<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> num_filters<span class="token punctuation">]</span>            W <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>truncated_normal<span class="token punctuation">(</span>filter_shape<span class="token punctuation">,</span> stddev<span class="token operator">=</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"W"</span><span class="token punctuation">)</span>            b <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">[</span>num_filters<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"b"</span><span class="token punctuation">)</span>            conv <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>conv2d<span class="token punctuation">(</span>                self<span class="token punctuation">.</span>embedded_chars_expanded<span class="token punctuation">,</span>                W<span class="token punctuation">,</span>                strides<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                padding<span class="token operator">=</span><span class="token string">"VALID"</span><span class="token punctuation">,</span>                name<span class="token operator">=</span><span class="token string">"conv"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># Apply nonlinearity</span>            h <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>bias_add<span class="token punctuation">(</span>conv<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"relu"</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># Maxpooling over the outputs</span>            pooled <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>max_pool<span class="token punctuation">(</span>                h<span class="token punctuation">,</span>                ksize<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> sequence_length <span class="token operator">-</span> filter_size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                strides<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                padding<span class="token operator">=</span><span class="token string">'VALID'</span><span class="token punctuation">,</span>                name<span class="token operator">=</span><span class="token string">"pool"</span><span class="token punctuation">)</span>            pooled_outputs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pooled<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># Combine all the pooled features</span>    num_filters_total <span class="token operator">=</span> num_filters <span class="token operator">*</span> len<span class="token punctuation">(</span>filter_sizes<span class="token punctuation">)</span>    self<span class="token punctuation">.</span>h_pool <span class="token operator">=</span> tf<span class="token punctuation">.</span>concat<span class="token punctuation">(</span>pooled_outputs<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>    self<span class="token punctuation">.</span>h_pool_flat <span class="token operator">=</span> tf<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>self<span class="token punctuation">.</span>h_pool<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> num_filters_total<span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre><hr><p><strong>卷积计算</strong><br>　　在<code>conv-maxpool-%s</code>这个命名域下：<br>　　●　W：卷积核<br>　　●　b：偏移量，num_filters个卷积核，故有这么多个偏移量<br>　　●　conv：<code>W</code>与<code>self.embedded_chars_expanded</code>的卷积</p><p>　　函数<code>tf.nn.conv2d(input, filter, strides, padding, use_cudnn_on_gpu=None, name=None)</code>实现卷积计算，参考<a href="https://blog.csdn.net/mao_xiao_feng/article/details/78004522" rel="external nofollow noopener noreferrer" target="_blank">tf.nn.conv2d是怎样实现卷积的</a>。<br>　　本处调用的参数：<br>　　●　input：输入的词向量，[句子数（图片数）batch, 句子定长（对应图高）,词向量维度（对应图宽）, 1（对应图像通道数）]<br>　　●　filter：卷积核，[卷积核的高度，词向量维度（卷积核的宽度），1（图像通道数），卷积核个数（输出通道数）]<br>　　●　strides：图像各维步长，一维向量，长度为4，图像通常为[1, x, x, 1]<br>　　●　padding：卷积方式，<code>&quot;SAME&quot;</code>为等长卷积, <code>&quot;VALID&quot;</code>为窄卷积<br>　　●　输出feature map：shape是[batch, height, width, channels]这种形式</p><hr><p><strong>激活函数</strong><br>　　●　h：存储WX+b后非线性激活的结果<br>　　函数<code>tf.nn.bias_add(value, bias, name = None)</code>：将偏差项bias加到value上，支持广播的形式，bias必须为1维的，value维度任意，最后一维和bias大小一致；<br>　　函数<code>tf.nn.relu(features, name = None)</code>：非线性激活单元relu激活函数</p><hr><p><strong>池化（Pooling）</strong><br>　　●　pooled：池化后结果<br>　　函数<code>tf.nn.max_pool(value, ksize, strides, padding, name=None)</code>：对value池化<br>　　本处调用的参数：<br>　　●　value：待池化的四维张量，维度是[batch, height, width, channels]<br>　　●　ksize：池化窗口大小，长度（大于）等于4的数组，与value的维度对应，一般为[1,height,width,1]，batch和channels上不池化<br>　　●　strides：与卷积步长类似<br>　　●　padding：与卷积的padding参数类似<br>　　●　返回值shape仍然是[batch, height, width, channels]这种形式</p><p>　　池化后的结果append到<code>pooled_outputs</code>中。对每个卷积核重复上述操作，故pooled_outputs的数组长度应该为num_filters。</p><h3 id="4-Dropout层"><a href="#4-Dropout层" class="headerlink" title="4. Dropout层"></a><span style="font-size: 18px;">4. Dropout层</span></h3><p>　　Dropout或许是正则化CNN的最流行的方法。dropout背后的思想是简单的。dropout层随机地屏蔽一部分神经元。这防止神经元一起变化，并且强迫它们单独学习有用的特征。我们激活的部分神经元是通过dropout_keep_prob定义的。在训练期间，我们给它设置一个值，比如0.5，然后在评价的时候设为1.0(不启动dropout)。</p><pre class=" language-python"><code class="language-python">    <span class="token comment" spellcheck="true"># Add dropout</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"dropout"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>h_drop <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>dropout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>h_pool_flat<span class="token punctuation">,</span> self<span class="token punctuation">.</span>dropout_keep_prob<span class="token punctuation">)</span></code></pre><h3 id="5-输出层（-softmax层）"><a href="#5-输出层（-softmax层）" class="headerlink" title="5. 输出层（+softmax层）"></a><span style="font-size: 18px;">5. 输出层（+softmax层）</span></h3><p>　　使用经过max-pooling（with dropout applied）的特征向量，我们可以通过做矩阵乘积，然后选择得分最高的类别进行预测。我们也可以应用softmax函数把原始的分数转化为规范化的概率，但是这不会改变我们最终的预测结果。</p><pre class=" language-python"><code class="language-python">    <span class="token comment" spellcheck="true"># Final (unnormalized) scores and predictions</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"output"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        W <span class="token operator">=</span> tf<span class="token punctuation">.</span>get_variable<span class="token punctuation">(</span>            <span class="token string">"W"</span><span class="token punctuation">,</span>            shape<span class="token operator">=</span><span class="token punctuation">[</span>num_filters_total<span class="token punctuation">,</span> num_classes<span class="token punctuation">]</span><span class="token punctuation">,</span>            initializer<span class="token operator">=</span>tf<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>layers<span class="token punctuation">.</span>xavier_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        b <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">,</span> shape<span class="token operator">=</span><span class="token punctuation">[</span>num_classes<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"b"</span><span class="token punctuation">)</span>        l2_loss <span class="token operator">+=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>l2_loss<span class="token punctuation">(</span>W<span class="token punctuation">)</span>        l2_loss <span class="token operator">+=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>l2_loss<span class="token punctuation">(</span>b<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>scores <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>xw_plus_b<span class="token punctuation">(</span>self<span class="token punctuation">.</span>h_drop<span class="token punctuation">,</span> W<span class="token punctuation">,</span> b<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"scores"</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>predictions <span class="token operator">=</span> tf<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>self<span class="token punctuation">.</span>scores<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"predictions"</span><span class="token punctuation">)</span></code></pre><p>　　W和b均为线性参数，因为加了两个参数所以增加了L2损失，都加到了l2_loss里；<br>　　这里，<code>tf.nn.xw_plus_b</code>是进行<code>Wx+b</code>矩阵乘积的方便形式。</p><h3 id="6-模型评估"><a href="#6-模型评估" class="headerlink" title="6. 模型评估"></a><span style="font-size: 18px;">6. 模型评估</span></h3><p>　　这里不属于模型结构的一部分，只是计算了模型的准确率，用tf.equal判断预测结果和真实值之间是否相等，<code>tf.reduce_mean</code>计算了模型和真实值一致的结果占得比例。</p><pre class=" language-python"><code class="language-python">    <span class="token comment" spellcheck="true"># Calculate mean cross-entropy loss</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"loss"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        losses <span class="token operator">=</span> tf<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>softmax_cross_entropy_with_logits<span class="token punctuation">(</span>logits<span class="token operator">=</span>self<span class="token punctuation">.</span>scores<span class="token punctuation">,</span> labels<span class="token operator">=</span>self<span class="token punctuation">.</span>input_y<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>loss <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>losses<span class="token punctuation">)</span> <span class="token operator">+</span> l2_reg_lambda <span class="token operator">*</span> l2_loss    <span class="token comment" spellcheck="true"># Accuracy</span>    <span class="token keyword">with</span> tf<span class="token punctuation">.</span>name_scope<span class="token punctuation">(</span><span class="token string">"accuracy"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        correct_predictions <span class="token operator">=</span> tf<span class="token punctuation">.</span>equal<span class="token punctuation">(</span>self<span class="token punctuation">.</span>predictions<span class="token punctuation">,</span> tf<span class="token punctuation">.</span>argmax<span class="token punctuation">(</span>self<span class="token punctuation">.</span>input_y<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>accuracy <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>cast<span class="token punctuation">(</span>correct_predictions<span class="token punctuation">,</span> <span class="token string">"float"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"accuracy"</span><span class="token punctuation">)</span></code></pre><h2 id="五、其他代码解读"><a href="#五、其他代码解读" class="headerlink" title="五、其他代码解读"></a>五、其他代码解读</h2><h3 id="1-train-py"><a href="#1-train-py" class="headerlink" title="1. train.py"></a><span style="font-size: 18px;">1. train.py</span></h3><p><strong>参数设置</strong><br>　　首先是大量的参数设置，参数的设置函数主要有三个参数，<span style="color: #FF0000;">参数的名字</span>，<span style="color: #FF0000;">参数的默认值</span>，以及<span style="color: #FF0000;">参数的解释</span>。这里打印参数的代码被注释了。为什么要这么设置参数呢，因为这样我们可以通过命令行传入我们想要传入的参数，而不需要改动我们的代码。</p><p><strong>preprocess</strong><br>　　在预处理函数<code>def preprocess():</code>中，首先是加载数据的代码，没有什么特别的可以讲，就是一个加载数据的函数<code>def load_data_and_labels(positive_data_file, negative_data_file):</code>。<br>　　值得一提的就是它返回的值，x_text是一个由每句词的列表组成的列表，y的话是由一个长度为2的列表组成的列表。</p><p>　　预处理的第二步就是构建词典，把我们的句子序列（由单词列表构成）转换成数据序列（单词在词典里面的索引），这边完全由tensorflow的内置函数完成。</p><p>　　之后就是打乱数据和划分训练和测试集了。这些代码都是可以直接复用的代码。大部分的深度学习NLP任务都要经过相应的处理。</p><p><strong>train</strong><br>　　训练部分的相关分析我都在代码注释中体现了。</p><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>　　以上是第一遍学习并解读 <span style="color: #3498db;">cnn-text-classification-tf</span> 这个项目的笔记。主要还是参考了作者在项目里提到的两篇博客，讲的很好。同时还参考了多篇国人翻译版博客，除去copy来copy去的内容，也在理解上得到了不少帮助。鉴于每篇总有翻译的不是很到位的地方，尤其对于我这种新手，故自己加以修改，重新做了笔记。<br>　　当然了，第一遍解读还是会有很多存疑的地方，后续随着理解加深再修改吧。<br>　　PS：我fork了一份源码并加了代码中文注释：<a href="https://github.com/winyuan/cnn_text_classification_tf" rel="external nofollow noopener noreferrer" target="_blank">加注释版本</a>。</p><p class="reference"><br>参考<br><a href="http://www.wildml.com/2015/11/understanding-convolutional-neural-networks-for-nlp/" rel="external nofollow noopener noreferrer" target="_blank">http://www.wildml.com/2015/11/understanding-convolutional-neural-networks-for-nlp/</a><br><a href="http://www.wildml.com/2015/12/implementing-a-cnn-for-text-classification-in-tensorflow/" rel="external nofollow noopener noreferrer" target="_blank">http://www.wildml.com/2015/12/implementing-a-cnn-for-text-classification-in-tensorflow/</a><br></p><br><p class="reference" style="display:none"><br><a href="https://blog.csdn.net/chivalrousli/article/details/77168397" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/chivalrousli/article/details/77168397</a><br><a href="https://www.cnblogs.com/wilde/p/8353639.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/wilde/p/8353639.html</a><br><a href="https://blog.csdn.net/Ding_xiaofei/article/details/81051780" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/Ding_xiaofei/article/details/81051780</a><br><a href="https://blog.csdn.net/rlnLo2pNEfx9c/article/details/80288372" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/rlnLo2pNEfx9c/article/details/80288372</a><br><a href="https://kiseliu.github.io/2016/09/22/implementing-a-cnn-for-text-classification-in-tensorflow/" rel="external nofollow noopener noreferrer" target="_blank">https://kiseliu.github.io/2016/09/22/implementing-a-cnn-for-text-classification-in-tensorflow/</a><br></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【TF小记】CNN文本分类原理</title>
      <link href="/blogs/tensorflow-cnn-text-classification-theory.html"/>
      <url>/blogs/tensorflow-cnn-text-classification-theory.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">【TensorFlow小记】CNN文本分类原理</div><blockquote><p>通过学习几篇不错的文章，再结合自己的理解，重新梳理了CNN做文本分类的实现原理，在此记录下学习笔记。</p></blockquote><h2 id="一、文本分类"><a href="#一、文本分类" class="headerlink" title="一、文本分类"></a>一、文本分类</h2><p>　　目前文本分类在工业界的应用场景非常普遍，从新闻的分类、商品评论信息的情感分类到微博信息打标签辅助推荐系统，都用到了这种技术。</p><h2 id="二、数据准备"><a href="#二、数据准备" class="headerlink" title="二、数据准备"></a>二、数据准备</h2><p>　　在机器学习领域有一句话：<strong>数据决定了模型最终的高度，不断优化的模型只不过是为了不断逼近这个高度而已。</strong><br>　　<br>　　文本分类作为一种有监督学习的任务，毫无疑问的需要一个可用于有监督学习的语料集（X,Y）。本文中使用以下标记，X为特征，文本分类中即为文本序列，Y是标签，即文本的分类名称。<br>　　<br>　　机器学习与传统编程技术的明显区别就是：机器学习是以数据为驱动的，传统的编程中，我们核心任务是人工设计分类规则（指令代码），然后实现输入特征X获得分类标签Y。而在机器学习的方式中，我们首要的是获得一个高质量的、大数据量的有监督语料集（X，Y），然后机器学习的方式会自动的从已构建的数据集上归纳出（训练出）一套分类规则（分类模型），最后我们利用获得的分类规则来实现对未标记文本的分类。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/ml_vs_traditional_coding.png" alt="ml_vs_traditional_coding.png" width="500" hegiht="300" align="center"><br>　　换言之，<strong>传统的编程方式输入的是指令代码，而机器学习输入的是结构化数据。</strong><br>　　因此，在机器学习任务中，数据的质量与数量对最终模型的预测结果好坏具有决定性的作用。<br>　　<strong>常言道：Garbage in, garbage out！</strong><br>　　在文本分类中，语料集（X,Y）的质量、数量决定了文本分类模型的分类效果。</p><h2 id="三、文本的预处理"><a href="#三、文本的预处理" class="headerlink" title="三、文本的预处理"></a>三、文本的预处理</h2><p>　　文本的预处理，主要针对剔除无意义的符号信息，或其它的冗余信息。例如，在使用爬虫获取的语料集上可能存在一些html的标签，这些符号对于文本分类任务来说应该是冗余的无意义信息，可以剔除掉。</p><p>　　此外，针对中文、日语等无空格切分字词的语言，还需要进行分词处理，将一段文本序列划分为合理的词（字）序列。</p><p>　　英文中天生的就有空格把每个词汇分割开来，所以不需要分词操作，但由于英文存在时态、缩写等问题，在预处理阶段会有词干提取、词性还原、大小写转换等。</p><p>　　中文分词的工具有非常多的方案，可以参考<a href="https://www.jianshu.com/p/6c085bf1086f" rel="external nofollow noopener noreferrer" target="_blank">中文分词原理</a>，Python种最常用的有jieba分词器，使用非常的简单，使用<code>pip install jieba</code>就可以很方便的安装该工具包，jieba常用的API可以查看<a href="https://github.com/fxsjy/jieba" rel="external nofollow noopener noreferrer" target="_blank">GitHub主页的实例</a>。</p><h2 id="四、文本的数值化【词向量技术】"><a href="#四、文本的数值化【词向量技术】" class="headerlink" title="四、文本的数值化【词向量技术】"></a>四、文本的数值化【词向量技术】</h2><p>　　我们知道，在图像的分类任务中，输入是一个图像数据（是一个矩阵，具有长和宽），而文本是一个字符串，如果能把文本转换成一种类似的格式（矩阵），那么很多之前在图像领域很适用的深度学习算法比如CNN等也可以很好地迁移到文本领域了。</p><p>　　词向量技术就很好地解决了文本表示的问题。通过词向量技术，我们能将词汇信息映射到一个数值化的语义空间中，这个语义空间我们可以称之为词向量空间（词向量模型），于是，每个词汇都对应了一个指定维度的数组。</p><p>　　简单地理解，就是<span style="color: #FF0000;">我们把每一种语言中的每一个单词都与一串被叫做向量的数字联系起来了。</span><br>　　<br>　　文本转换成词向量（word embedding）的方式有很多种，例如：TF-IDF、BOW、One-Hot、分布式的表示方式（word2vec、Glove）等。一般常用的是word2vec工具。它是一种无监督的学习模型，可以在一个语料集上（不需要标记，主要思想是“具有相似邻近词分布的中心词之间具有一定的语义相似度”），实现词汇信息到语义空间的映射，最终获得一个词向量模型（每个词汇对应一个指定维度的数组）。</p><h2 id="五、文本分类模型"><a href="#五、文本分类模型" class="headerlink" title="五、文本分类模型"></a>五、文本分类模型</h2><p>　　文本分类模型，从最经典的2013年Kim提出Text-CNN模型开始，深度学习模型在文本分类任务上具有广泛的应用。2016年Kim跳槽FaceBook后提出了工业界的文本分类模型的“新宠”—FastText。<br>　　所以大家广泛认为，TextCNN是深度学习在文本分类中的鼻祖，如下图所示：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/text_cnn_simple_structure.png" alt="text_cnn_simple_structure.png" width="600" hegiht="400" align="center"><br>　　本文选择使用2013年Kim提出的 <span style="color: #FF0000;">Text-CNN</span> 模型作为文本分类模型，通过验证实验以及业界的共识，在文本分类任务中，CNN模型已经能够取到比较好的结果，虽然在某些数据集上效果可能会比RNN稍差一点，但是CNN模型训练的效率更高。所以，一般认为CNN模型在文本分类任务中是兼具效率与质量的理想模型。</p><p>　　关于什么是卷积神经网络，请阅读 <a href="/blogs/tensorflow-basic-learning-3.html">CNN初探</a>。</p><p>　　Text-CNN 模型的整体网络架构如下图所示，如果你学习过CNN或者CNN在图像中的使用，应该很容易就理解，因为该模型就是一个最简单、基础的CNN网络结构。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/text_cnn_structure.png" alt="text_cnn_structure.png" width="600" hegiht="500" align="center"></p><p>　　整个模型由四部分构成：<span style="color: #FF0000;">输入层</span>、<span style="color: #FF0000;">卷积层</span>、<span style="color: #FF0000;">池化层</span>、<span style="color: #FF0000;">全连接层</span>。</p><p>　　<strong>它的过程大致是：</strong> 第一层是图中最左边的7乘5的句子矩阵，每行是词向量，维度=5，这个可以类比为图像中的原始像素点了。然后经过有 filter_size=(2,3,4) 的一维卷积层，每个filter_size 有两个输出 channel（每种filter_size设置了2个filter，如果只设置1个filter会略显单薄）。第三层是一个1-max pooling层，这样不同长度句子经过pooling层之后都能变成定长的表示了，最后接一层全连接的 softmax 层，输出每个类别的概率。<br>　　<br>　　●　<strong>特征：</strong> 这里的特征就是词向量<br>　　●　<strong>通道（Channels）：</strong> 图像中可以利用 (R, G, B) 作为不同channel，而文本的输入的channel通常是不同方式的embedding方式（比如 word2vec或Glove），实践中也有利用静态词向量和fine-tunning词向量作为不同channel的做法。<br>　　●　<strong>一维卷积（conv-1d）：</strong> 图像是二维数据，经过词向量表达的文本为一维数据，因此在TextCNN卷积用的是一维卷积。一维卷积带来的问题是需要设计通过不同 filter_size 的 filter 获取不同宽度的视野。这里的设计是，分别对2，3，4个单词做一次卷积，因为不同个数的单词组合可能会带来不同的含义。</p><p>　　下面对每个环节进行分别说明。</p><h3 id="1-输入层（词嵌入层）"><a href="#1-输入层（词嵌入层）" class="headerlink" title="1. 输入层（词嵌入层）"></a><span style="font-size: 18px;">1. 输入层（词嵌入层）</span></h3><p>　　Text-CNN模型的输入层需要输入一个定长的文本序列，我们需要通过分析语料集样本的长度指定一个输入序列的长度L，比L短的样本序列需要填充(自己定义填充符)，比L长的序列需要截取。最终输入层输入的是文本序列中各个词汇对应的分布式表示，即 <span style="color: #FF0000;">词向量（word embedding）</span>。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/text_cnn_word_embedding.png" alt="text_cnn_word_embedding.png" width="400" hegiht="300" align="center"><br>　　如上图所示，此时的输入不再是图片像素，而是以矩阵表示的句子或者文档。矩阵的每一行对应一个<span style="color: #FF0000;">单词或者字符</span>。也即每行代表一个词向量。在图像问题中，卷积核滑过的是图像的一“块”区域，但在自然语言领域里我们一般用卷积核滑过矩阵的一“行”（单词）。<br>　　<br>　　如果一个句子有6个词，每个词的<span style="color: #FF0000;">词向量长度（也叫词向量的维度embedding_size）</span>为7，那输入矩阵就是6x7，这就是我们的“图像”。可以理解为通道为1的图片。</p><h3 id="2-卷积层"><a href="#2-卷积层" class="headerlink" title="2. 卷积层"></a><span style="font-size: 18px;">2. 卷积层</span></h3><p>　　上一段提到，但在自然语言领域里我们一般用卷积核滑过矩阵的一“行”（单词），即卷积核的宽度与词向量的维度等宽，卷积核只进行一维的滑动。</p><p>　　在Text-CNN模型中一般使用多个不同尺寸的卷积核。卷积核的高度，即窗口值，可以理解为N-gram模型中的N，即利用的局部词序的长度，窗口值也是一个超参数，需要在任务中尝试，一般选取2-8之间的值。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/text_cnn_convolution.png" alt="text_cnn_convolution.png" width="600" hegiht="400" align="center"></p><h3 id="3-池化层"><a href="#3-池化层" class="headerlink" title="3. 池化层"></a><span style="font-size: 18px;">3. 池化层</span></h3><p>　　在Text-CNN模型的池化层中使用了Max-pool（最大值池化），既减少了模型的参数，又保证了在不定长的卷基层的输出上获得一个定长的全连接层的输入。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/text_cnn_max_pool.png" alt="text_cnn_max_pool.png" width="600" hegiht="400" align="center"></p><blockquote><p>池化层除了最大值池化之外，也有论文讨论过 Top K最大值池化，即选取每一个卷积层输出的Top k个最大值作为池化层的输出。<br>比如在情感分析场景，举个例子：“ 我觉得这个地方景色还不错，但是人也实在太多了 ”<br>虽然前半部分体现情感是正向的，全局文本表达的是偏负面的情感，利用 k-max pooling能够很好捕捉这类信息。</p></blockquote><p>　　<span style="color: #FF0000;">卷积层与池化层在分类模型的核心作用</span>就是特征提取的功能，从输入的定长文本序列中，利用局部词序信息，提取初级的特征，并组合初级的特征为高级特征，通过卷积与池化操作，省去了传统机器学习中的特征工程的步骤。<br>　　但TextCNN的一个明显缺点就是，卷积、池化操作丢失了文本序列中的词汇的顺序、位置信息，比较难以捕获文本序列中的否定、反义等语义信息。</p><h3 id="4-全连接层"><a href="#4-全连接层" class="headerlink" title="4. 全连接层"></a><span style="font-size: 18px;">4. 全连接层</span></h3><p>　　全连接层的作用就是分类器，原始的Text-CNN模型使用了只有一层隐藏层的全连接网络，相当于把卷积与池化层提取的特征输入到一个LR分类器中进行分类。</p><p>　　至此，Text-CNN的模型结构就算大体了解了，其实大部分情况下我们都是把深度学习模型看作一个黑盒子，知道格式化的输入，我们就可以利用别人搭建好的模型框架训练在自己的数据集上实现一定的功能。但是在不同的数据集上，模型的最佳状态也不唯一，这就需要我们在新的数据集上需要进行调优（调参）。</p><h2 id="六、模型的效果评估与调优"><a href="#六、模型的效果评估与调优" class="headerlink" title="六、模型的效果评估与调优"></a>六、模型的效果评估与调优</h2><p>　　针对分类问题，一般可以使用准确率、召回率、F1值、混淆矩阵等指标，在文本多标签分类中一般还会考虑标签的位置加权等问题。</p><p>　　分类模型中的主要参数：<br>　　●　词向量的维度（<span style="color: #FF0000;">embedding_size</span>）<br>　　●　卷积核的个数（<span style="color: #FF0000;">num_filters</span>）<br>　　●　卷积核的尺寸（<span style="color: #FF0000;">filter_sizes</span>）<br>　　●　L2的参数（<span style="color: #FF0000;">l2_reg_lambda</span>）<br>　　●　DropOut的参数<br>　　●　学习率<br>　　●　等等</p><p>　　这是在模型优化的过程中需要重点关注的参数。此外，一般数据集的类别不均衡问题对模型的影响也是比较显著的，可以尝试使用不同的方法，评估不同方案的模型效果。</p><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><p>　　虽然大部分情况下应用深度学习，只需要把它当做一个黑盒，但如果不稍微了解一下理论原理，对这门技术的掌握会过于肤浅，遇到问题也容易解释不清。</p><p class="reference"><br>参考<br><a href="https://blog.csdn.net/heyc861221/article/details/80128748" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/heyc861221/article/details/80128748</a><br><a href="https://www.jianshu.com/p/f69e8a306862" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/f69e8a306862</a><br><a href="https://blog.csdn.net/huwenxing0801/article/details/85197722" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/huwenxing0801/article/details/85197722</a><br></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【TF小记】CNN初探</title>
      <link href="/blogs/tensorflow-cnn-basic.html"/>
      <url>/blogs/tensorflow-cnn-basic.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">【TensorFlow小记】CNN初探</div><blockquote><p>介绍卷积神经网络（CNN）的概念、网络结构、基本模块、特点等等。</p></blockquote><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>　　CNN的全拼是Convolutional Neural Networks，直译过来就是<strong>卷积神经网络</strong>。<br>　　CNN最初主要用来做图片分类、目标检测等图像相关的任务。</p><h3 id="1-什么是卷积"><a href="#1-什么是卷积" class="headerlink" title="1. 什么是卷积"></a><span style="font-size: 18px;">1. 什么是卷积</span></h3><p>　　简单介绍一下卷积运算，卷积运算作用就是用滤波器来学习或者检测图片的特征。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/convolution_operation_static.png" alt="convolution_operation_static.png" width="550" hegiht="300" align="center"><br>　　看上图，左边是一张5×5的黑白图片，现在是矩阵的形式，每个格子代表一个像素点。中间的3×3的矩阵叫做滤波器，也可以叫做<span style="color: #FF0000;">卷积核</span>。星号代表的就是卷积运算，用滤波器对左边的图片做卷积运算，得出3×3的矩阵。<br>　　具体怎么算呢？先说结果的第一个元素：就是用滤波器，覆盖在图片的左上角，<span style="color: #3498db;">对应的每格元素相乘，得到9个数字，最后把这9个数字相加，就得到了第一个元素。</span>滤波器在图片上右移一格，再计算就得到了第二个元素，之后的元素同理。<br>　　通过滑动卷积核，就可以得到整张图片的卷积结果，如下图所示：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/convolution_operation_gif.gif" alt="convolution_operation_gif.gif"><br>　　<strong>卷积公式</strong>如下，其中S SS代表运算结果，I II是原始图片，K KK是卷积核，m mm、n nn是卷积核的高和宽，括号中的两个值代表元素的位置：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/convolution_formula.png" alt="convolution_formula.png"></p><blockquote><p>其实该函数叫<strong>互相关函数(cross-correlation)</strong>，和卷积函数几乎一样，只是没有对卷积核进行翻转，很多深度学习的库实现的都是这个函数而并非真正的卷积函数。在深度学习中我们默认它为卷积函数。</p></blockquote><h3 id="2-卷积神经网络结构"><a href="#2-卷积神经网络结构" class="headerlink" title="2. 卷积神经网络结构"></a><span style="font-size: 18px;">2. 卷积神经网络结构</span></h3><p>　　现在知道卷积运算了，那么CNN呢？我们知道神经网络的结构是这样的：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/neural_network.jpg" alt="neural_network.jpg" width="450" hegiht="190" align="center"><br>　　其实卷积神经网络依旧是层级网络，只是层的功能和形式做了变化，可以说是传统神经网络的一个改进。比如下图（识别交通工具）中就多了许多传统神经网络没有的层次。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/cnn_traffic.jpg" alt="cnn_traffic.jpg" width="500" hegiht="200" align="center"></p><h2 id="二、CNN基本模块"><a href="#二、CNN基本模块" class="headerlink" title="二、CNN基本模块"></a>二、CNN基本模块</h2><p>　　CNN由输入和输出层以及多个隐藏层组成，隐藏层可分为<strong>卷积层</strong>，<strong>池化层</strong>，<strong>ReLU激励层</strong>和<strong>全连接层</strong>。</p><h3 id="1-输入层"><a href="#1-输入层" class="headerlink" title="1. 输入层"></a><span style="font-size: 18px;">1. 输入层</span></h3><p>　　CNN的输入一般是二维向量，可以有高度，比如，RGB图像。如果是黑白图片，高度是1；如果是彩色图片，高度是3。</p><h3 id="2-卷积层"><a href="#2-卷积层" class="headerlink" title="2. 卷积层"></a><span style="font-size: 18px;">2. 卷积层</span></h3><p>　　卷积层是CNN的核心，可以简单理解为：<span style="color: #FF0000;">卷积层用于对输入层进行卷积，提取更高层次的特征。</span><br>　　在这个卷积层，有两个关键操作：<br>　　●　局部关联。每个神经元看做一个滤波器（filter）<br>　　●　窗口（receptive field）滑动，filter对局部数据计算</p><p>　　先介绍卷积层遇到的几个名词：<br>　　●　深度/depth（解释见下图）<br>　　●　步长/stride（每隔多少步采集一下，设置为1就是全采样）<br>　　●　填充值/zero-padding<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/cnn_conv_layer.png" alt="cnn_conv_layer.png" width="550" hegiht="250" align="center"><br>　　图中的滑动窗口，就是一个过滤器。过滤器会从左上角到右下角一点一点移动，采集图片的信息（类似用一个手电筒去一格一格地扫描）。</p><p>　　填充值是什么呢？以下图为例子，比如有这么一个 5*5 的图片（一个格子一个像素），我们滑动窗口取 2*2，步长取2，那么我们发现还剩下1个像素没法滑完，那怎么办呢？<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/cnn_zero_padding_01.png" alt="cnn_zero_padding_01.png"><br>　　那我们在原先的矩阵加了一层填充值，使得变成 6*6 的矩阵，那么窗口就可以刚好把所有像素遍历完。这就是填充值的作用。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/cnn_zero_padding_02.png" alt="cnn_zero_padding_02.png"></p><p>　　讲下比较重要的<span style="color: #FF0000;">卷积的计算</span>。如果大学里《线性代数》学的不错的话，这里会比较好理解。<br>　　下面的动态图形象地展示了卷积层的计算过程：<br>　　<strong>蓝色矩阵</strong>就是输入的图像，它周围有一圈灰色的框，那些就是上面所说到的填充值。<br>　　<strong>粉色矩阵</strong>就是卷积层的神经元，这里表示了有两个神经元（w0, w1）。<br>　　<strong>绿色矩阵</strong>就是经过卷积运算后的输出矩阵，这里的步长设置为2。<br>　　<span style="color: #FF0000;">蓝色的矩阵（输入图像）对粉色的矩阵（filter）进行矩阵内积计算并将三个内积运算的结果与偏置值b相加，计算后的值就是绿框矩阵的一个元素。</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/cnn_conv_calc.gif" alt="cnn_conv_calc.gif"></p><p>　　<span style="color: #FF0000;">参数共享机制</span><br>　　●　在卷积层中每个神经元连接数据窗的权重是固定的，每个神经元只关注一个特性。神经元就是图像处理中的滤波器，比如边缘检测专用的Sobel滤波器，即卷积层的每个滤波器都会有自己所关注一个图像特征，比如垂直边缘，水平边缘，颜色，纹理等等，这些所有神经元加起来就好比就是整张图像的特征提取器集合。<br>　　●　需要估算的权重个数减少: AlexNet 1亿 =&gt; 3.5w<br>　　●　一组固定的权重和不同窗口内数据做内积: 卷积<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/cnn_filters.png" alt="cnn_filters.png" width="600" hegiht="320" align="center"></p><h3 id="3-ReLU激励层"><a href="#3-ReLU激励层" class="headerlink" title="3. ReLU激励层"></a><span style="font-size: 18px;">3. ReLU激励层</span></h3><p>　　作用：把卷积层输出结果做非线性映射。<br>　　看了这句话其实比较懵。<br>　　<span style="color: #FF0000;">一言以蔽之</span>，其实，relu函数的作用就是增加了神经网络各层之间的非线性关系，否则，如果没有激活函数，层与层之间是简单的线性关系，每层都相当于矩阵相乘，这样怎么能够完成我们需要神经网络完成的复杂任务。<br>　　我们利用神经网络去解决图像分割，边界探测，超分辨等问题时候，我们的输入（假设为x），与期望的输出（假设为y）之间的关系究竟是什么？也就是 <code>y=f(x)</code> 中，<span style="color: #FF0000;">f是什么</span>，我们也不清楚，但是我们对一点很确信，那就是<span style="color: #FF0000;">f不是一个简单的线性函数</span>，应该是一个抽象的复杂的关系，那么利用神经网络就是去学习这个关系，存放在model中，利用得到的model去推测训练集之外的数据，得到期望的结果<br>　　<br>　　这里我为什么直接叫ReLU激励层呢，因为CNN采用的激励函数一般为ReLU（The Rectified Linear Unit/修正线性单元），它的特点是收敛快，求梯度简单。<br>　　当然ReLU只是一种选择，还有选LeakyReLU等等，目前我只是初学，就不深究了，参考别人的一个实践经验：<br>　　① 不要用sigmoid！不要用sigmoid！不要用sigmoid！（强调了三次）<br>　　② 首先试ReLU，因为快，但要小心点<br>　　③ 如果②失效，请用LeakyReLU或者Maxout<br>　　④ 某些情况下tanh倒是有不错的结果，但是很少</p><h3 id="4-池化层"><a href="#4-池化层" class="headerlink" title="4. 池化层"></a><span style="font-size: 18px;">4. 池化层</span></h3><p>　　池化层又称亚采样，它夹在连续的卷积层中间，用于压缩数据和参数的量，减小过拟合，同时保留有用信息。<br>　　<span style="color: #FF0000;">简而言之</span>，如果输入是图像的话，那么池化层的最主要作用就是压缩图像。<br>　　它是怎么做到的呢？<br>　　通常池化层是每邻域四个像素中的最大值变为一个像素（就是后面会讲到的max_pooling），为什么可以这么做呢？这是因为卷积已经提取出特征，相邻区域的特征是类似、近乎不变的，这时池化只是选出最能表征特征的像素，缩减了数据量，同时保留了特征，何乐而不为呢？池化层的作用可以描述为模糊图像，丢掉了一些不是那么重要的特征。<br>　　下面这张图就是描述了池化的作用：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/cnn_pooling_layers.jpg" alt="cnn_pooling_layers.jpg"><br>　　这里再展开叙述池化层的具体作用。<br>　　●　<span style="color: #FF0000;">特征不变性</span>，也就是我们在图像处理中经常提到的特征的尺度不变性，池化操作就是图像的resize，平时一张狗的图像被缩小了一倍我们还能认出这是一张狗的照片，这说明这张图像中仍保留着狗最重要的特征，我们一看就能判断图像中画的是一只狗，图像压缩时去掉的信息只是一些无关紧要的信息，而留下的信息则是具有尺度不变性的特征，是最能表达图像的特征。<br>　　●　<span style="color: #FF0000;">特征降维</span>，我们知道一幅图像含有的信息是很大的，特征也很多，但是有些信息对于我们做图像任务时没有太多用途或者有重复，我们可以把这类冗余信息去除，把最重要的特征抽取出来，这也是池化操作的一大作用。<br>　　●　在一定程度上<span style="color: #FF0000;">防止过拟合</span>，更方便优化。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/cnn_downsampling.jpg" alt="cnn_downsampling.jpg"><br>　　池化层用的方法有 max_pooling 和 average_pooling，而实际用的较多的是max_pooling。<br>　　这里就说一下<span style="color: #FF0000;">max_pooling</span>，其实思想非常简单。<br>　　对于每个 2*2 的窗口选出最大的数作为输出矩阵的相应元素的值，比如输入矩阵第一个 2*2 窗口中最大的数是6，那么输出矩阵的第一个元素就是6，如此类推。(见前面的图)</p><h3 id="5-全连接层"><a href="#5-全连接层" class="headerlink" title="5. 全连接层"></a><span style="font-size: 18px;">5. 全连接层</span></h3><p>　　这个层就是一个常规的神经网络，它的作用是对经过多次卷积层和多次池化层所得出来的高级特征进行全连接（全连接就是常规神经网络的性质），算出最后的预测值。<br>　　通常全连接层在卷积神经网络尾部。也就是跟传统的神经网络神经元的连接方式是一样的：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/neural_network.jpg" alt="neural_network.jpg" width="450" hegiht="190" align="center"></p><h3 id="6-输出层"><a href="#6-输出层" class="headerlink" title="6. 输出层"></a><span style="font-size: 18px;">6. 输出层</span></h3><p>　　输出层就不用介绍了，就是对结果的预测值，一般会加一个softmax层。<br>　　softmax：分类器，应用于分类问题，位于卷积神经网络层的最后一层。<br>　　softmax意义：输出输入图片，对应概率最大的类别，以及属于该类别的可能性概率。</p><h2 id="三、CNN的特点"><a href="#三、CNN的特点" class="headerlink" title="三、CNN的特点"></a>三、CNN的特点</h2><p>　　这里主要讨论CNN相比与传统的神经网络的不同之处，CNN主要有三大特色，分别是<strong>局部感知</strong>、<strong>权重共享</strong>和<strong>多卷积核</strong>。</p><h3 id="1-局部感知"><a href="#1-局部感知" class="headerlink" title="1. 局部感知"></a><span style="font-size: 18px;">1. 局部感知</span></h3><p>　　局部感知就是我们上面说的感受野，实际上就是卷积核和图像卷积的时候，每次卷积核所覆盖的像素只是一小部分，是局部特征，所以说是局部感知。CNN是一个从局部到整体的过程（局部到整体的实现是在全连通层），而传统的神经网络是整体的过程。</p><h3 id="2-权重共享"><a href="#2-权重共享" class="headerlink" title="2. 权重共享"></a><span style="font-size: 18px;">2. 权重共享</span></h3><p>　　传统的神经网络的参数量是非常巨大的，比如1000X1000像素的图片，映射到和自己相同的大小，需要（1000X1000）的平方，也就是10的12次方，参数量太大了，而CNN除全连接层外，卷积层的参数完全取决于滤波器的设置大小，比如10x10的滤波器，这样只有100个参数，当然滤波器的个数不止一个，也就是下面要说的多卷积核。但与传统的神经网络相比，参数量小，计算量小。整个图片共享一组滤波器的参数。</p><h3 id="3-多卷积核"><a href="#3-多卷积核" class="headerlink" title="3. 多卷积核"></a><span style="font-size: 18px;">3. 多卷积核</span></h3><p>　　一种卷积核代表的是一种特征，为获得更多不同的特征集合，卷积层会有多个卷积核，生成不同的特征，这也是为什么卷积后的图片的高，每一个图片代表不同的特征。</p><h2 id="四、CNN实现架构"><a href="#四、CNN实现架构" class="headerlink" title="四、CNN实现架构"></a>四、CNN实现架构</h2><p>　　这里以LeNet-5为例，一个典型的用来识别数字的卷积网络，当年美国大多数银行就是用它来识别支票上面的手写数字的。能够达到这种商用的地步，它的准确性可想而知。<br>　　LeNet-5主要有7层（不包括输入和输出），具体框架如图：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/cnn_LeNet-5.png" alt="cnn_LeNet-5.png"><br>　　<strong>流程：</strong> 输入层——&gt;第一层卷积层——&gt;第一层池化层——&gt;第二层卷积层——&gt;第二层池化层——&gt;三层全连通层——&gt;输出层<br>　　<strong>详解：</strong> 输入是一个2维的图片，大小32X32，经过第一层卷积层，得到了C1层的6个28X28的特征映射图，6个说明了第一层卷积层用了6个卷积核。这里卷积后大小变成28X28，这是因为卷积有两种，一种有填充，卷积后与原图像大小一样，另一种不带填充，卷积后结果与原图像相比，小了一些。然后经过第一层池化层，28X28变成了14X14，一般是每邻域四个像素中的最大值变为一个像素，相应图片的长和宽各缩小两倍。然后又经过一个卷积层，变成了C3层的16个10X10的特征映射图，然后又经过一个池化层，得到S4层的16个5X5的特征映射，然后将这16个5X5的特征映射送到3层的常规神经网络，得出最后的结果。<br>　　<strong>总结：</strong> 我们可以这样想，前面的卷积层和池化层是为了提取输入的高级特征，送到全连通层的输入，然后训练出最后的结果。</p><h2 id="五、dropout"><a href="#五、dropout" class="headerlink" title="五、dropout"></a>五、dropout</h2><p>　　<strong>dropout</strong>是一种<strong>正则化</strong>的方法，应用在CNN中，主要解决<strong>CNN过拟合</strong>的问题。<br>　　怎么理解这个东西呢，首先我们要知道为什么过拟合？这是因为神经网络的神经元过多，参数过多，导致训练集拟合得太好了，为此，我们想dropout(丢掉)一些神经元，让它不产生影响。<br>　　<strong>具体做法:</strong> 在每个隐藏层的输入进行一个概率判决，比如我们设置概率为0.5（通常命名为keep_prob）,根据0.5，我们生成一个跟隐藏层神经元个数的向量，true:false的比例是1：1（因为keep_prob=0.5），与隐藏层的输入进行相乘，那么会有一半隐藏层的神经元被丢掉，不起作用，整个网络变得简单了，就会从过拟合过渡到just right 。这是组合派的说法，andrew也是这么讲的，文末链接中还有一派噪声派的说法，也很有意思，可以看看！<br>　　图形理解（这个keep_prob等于0.4，即2/5）：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/cnn_dropout.png" alt="cnn_dropout.png"></p><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>　　这篇主要是CNN初探后的学习笔记，理解一些基础概念、知道大体的运行流程。当中有很多地方需要进一步研究，第一步先了解到这里。</p><p class="reference"><br>参考<br><a href="https://www.cnblogs.com/fydeblog/p/7450413.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/fydeblog/p/7450413.html</a><br><a href="https://www.cnblogs.com/skyfsm/p/6790245.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/skyfsm/p/6790245.html</a><br><a href="https://www.cnblogs.com/zf-blog/p/7794490.html" rel="external nofollow noopener noreferrer" target="_blank">https://www.cnblogs.com/zf-blog/p/7794490.html</a><br><a href="https://blog.csdn.net/fate_fjh/article/details/52882134" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/fate_fjh/article/details/52882134</a><br></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【TF小记】线性回归案例</title>
      <link href="/blogs/tensorflow-basic-learning-2.html"/>
      <url>/blogs/tensorflow-basic-learning-2.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">【TensorFlow小记】线性回归案例</div><blockquote><p>本文是一个TensorFlow入门小案例，通过梯度下降来解决线性回归问题。</p></blockquote><h2 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h2><ul><li>开发环境<ul><li>Windows</li></ul></li><li>Python版本<ul><li>Python 3.5.4</li></ul></li><li>pip包<ul><li>tensorflow==1.5.0</li><li>numpy==1.16.3</li><li>matplotlib==3.0.3</li></ul></li></ul><h2 id="二、案例介绍"><a href="#二、案例介绍" class="headerlink" title="二、案例介绍"></a>二、案例介绍</h2><p>　　<span style="color: #FF0000;">线性回归</span>一般用于预测，比如：股票涨跌。<br>　　<span style="color: #FF0000;">梯度下降</span>是机器学习中最核心的优化算法。<br>　　目的：<br>　　用TensorFlow和梯度下降来解决线性回归问题，找到最佳拟合（穿过所有点，平均到所有点距离最短）的一条值线。之后，给定x值，这条直线可以预测y值。</p><h2 id="三、完整代码"><a href="#三、完整代码" class="headerlink" title="三、完整代码"></a>三、完整代码</h2><p>　　该案例的完整代码及相关注释如下LR_using_GD.py：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""用梯度下降的优化方法来快速解决线性回归问题需求：对于直线y=Wx+b，随机生成100个点，围绕在y=Wx+b直线周围；建立回归模型，学习并训练出W和b，能够更好地拟合出这些数据点"""</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token comment" spellcheck="true"># 构建数据</span>points_num <span class="token operator">=</span> <span class="token number">100</span>vectors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 用numpy的正太随机分布函数生成100个点</span><span class="token comment" spellcheck="true"># 这些点的(x,y)坐标值对应线性方程 y = 0.1 * x + 0.2</span><span class="token comment" spellcheck="true"># 权重（Weight）0.1，偏差（Bias）0.2</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>points_num<span class="token punctuation">)</span><span class="token punctuation">:</span>    x1 <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.66</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># # 0为均值，0.66为标准差</span>    y1 <span class="token operator">=</span> <span class="token number">0.1</span> <span class="token operator">*</span> x1 <span class="token operator">+</span> <span class="token number">0.2</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.04</span><span class="token punctuation">)</span>    vectors<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>x1<span class="token punctuation">,</span> y1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 生成一些样本</span>x_data <span class="token operator">=</span> <span class="token punctuation">[</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">for</span> v <span class="token keyword">in</span> vectors<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 真实的点的x坐标</span>y_data <span class="token operator">=</span> <span class="token punctuation">[</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> v <span class="token keyword">in</span> vectors<span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 真实的点的y坐标</span><span class="token comment" spellcheck="true"># 图像1：展示100个随机数据点</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_data<span class="token punctuation">,</span> y_data<span class="token punctuation">,</span> <span class="token string">'r*'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Original data'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 红色星形的点</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Linear Regression using Gradient Descent'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 构建线性回归模型</span>W <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>random_uniform<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'W'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 初始化权重（Weight）：生成1维的W矩阵，取值是[-1,1]之间的随机数</span>b <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'b'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 初始化偏差（Bias）：生成1维的b矩阵，初始值是0</span>y <span class="token operator">=</span> W <span class="token operator">*</span> x_data <span class="token operator">+</span> b  <span class="token comment" spellcheck="true"># 模型经过计算得出预估值y</span><span class="token comment" spellcheck="true"># 定义loss function（损失函数）或cost function（代价函数）</span><span class="token comment" spellcheck="true"># 以预估值y和实际值y_data之间的均方误差作为损失</span><span class="token comment" spellcheck="true"># 即对Tensor的所有维度计算 ((y - y_data) ^ 2) 之和 / N ，此处N为100</span>loss <span class="token operator">=</span> tf<span class="token punctuation">.</span>reduce_mean<span class="token punctuation">(</span>tf<span class="token punctuation">.</span>square<span class="token punctuation">(</span>y <span class="token operator">-</span> y_data<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'loss'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 用梯度下降的优化器来优化我们的loss function</span>optimizer <span class="token operator">=</span> tf<span class="token punctuation">.</span>train<span class="token punctuation">.</span>GradientDescentOptimizer<span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 设置学习率 0.5</span><span class="token comment" spellcheck="true"># 训练的过程就是最小化这个误差值</span>train <span class="token operator">=</span> optimizer<span class="token punctuation">.</span>minimize<span class="token punctuation">(</span>loss<span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'train'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建会话</span>sess <span class="token operator">=</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 初始化数据流图中的所有变量</span>init <span class="token operator">=</span> tf<span class="token punctuation">.</span>global_variables_initializer<span class="token punctuation">(</span><span class="token punctuation">)</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>init<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 打印初始化的W和b是多少</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Initial: Loss=%f, [Weight=%f Bias=%f]'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>loss<span class="token punctuation">)</span><span class="token punctuation">,</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>W<span class="token punctuation">)</span><span class="token punctuation">,</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 训练 20 步</span><span class="token keyword">for</span> step <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 优化每一步</span>    sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>train<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 打印出每一步的损失，权重和偏差</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Step=%d, Loss=%f, [Weight=%f Bias=%f]'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>step<span class="token punctuation">,</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>loss<span class="token punctuation">)</span><span class="token punctuation">,</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>W<span class="token punctuation">)</span><span class="token punctuation">,</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 图像2：绘制所有的点并且绘制出最佳拟合的直线</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_data<span class="token punctuation">,</span> y_data<span class="token punctuation">,</span> <span class="token string">'r*'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Original data'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 红色星形的点</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Linear Regression using Gradient Descent'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x_data<span class="token punctuation">,</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>W<span class="token punctuation">)</span> <span class="token operator">*</span> x_data <span class="token operator">+</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Fitted line'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 拟合的线</span>plt<span class="token punctuation">.</span>legend<span class="token punctuation">(</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>xlabel<span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>ylabel<span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关闭会话</span>sess<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="四、运行结果"><a href="#四、运行结果" class="headerlink" title="四、运行结果"></a>四、运行结果</h2><p>　　这里我使用的IDE是PyCharm，直接贴上运行结果图：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/tensorflow_lr_using_gd.png" alt="tensorflow_lr_using_gd.png"></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【TF小记】基础知识</title>
      <link href="/blogs/tensorflow-basic-learning-1.html"/>
      <url>/blogs/tensorflow-basic-learning-1.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">【TensorFlow小记】基础知识</div><blockquote><p>本文主要介绍一些TensorFlow的基础知识和基本概念，如果不了解这些，将很难上手使用这款开源机器学习框架。</p></blockquote><h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>　　TensorFlow是Google开源的基于<span style="color: #FF0000;">数据流图</span>的科学计算库，适用于机器学习。为什么叫这个名字呢？<br>　　<span style="color: #FF0000;">Tensor</span>的意思是张量，“张量”这个词平时生活中不会接触到，但在人工智能领域就像ABCD一样常见，先记住。它代表的是N维数组。<br>　　<span style="color: #FF0000;">Flow</span>的意思是流，代表基于数据流图（Data Flow Graph）的计算。<br>　　所谓数据流图，如下图所示。可以看到黑色的边一直在流动，即Tensor在数据流图中Flow。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/data_flow_graph.gif" alt="data_flow_graph.gif"></p><h2 id="二、各个机器学习库的对比"><a href="#二、各个机器学习库的对比" class="headerlink" title="二、各个机器学习库的对比"></a>二、各个机器学习库的对比</h2><table><thead><tr><th style="text-align:center">库名/对比项</th><th style="text-align:center">开发/支持</th><th style="text-align:center">主要开发语言</th><th style="text-align:center">支持分布式</th></tr></thead><tbody><tr><td style="text-align:center">TensorFlow</td><td style="text-align:center">Google</td><td style="text-align:center">Python, C++</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">MXNet</td><td style="text-align:center">社区/Apache/Amazon</td><td style="text-align:center">Python, C++</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">DL4J</td><td style="text-align:center">团队/Eclipse</td><td style="text-align:center">Java, Python</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">CNTK</td><td style="text-align:center">Microsoft</td><td style="text-align:center">Python, C#</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">(Py)Torch</td><td style="text-align:center">Facebook(个人)</td><td style="text-align:center">(Python)Lua</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">Caffe(2)</td><td style="text-align:center">贾扬清(Facebook)</td><td style="text-align:center">Python, C++</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">Theano</td><td style="text-align:center">加拿大蒙特利尔大学</td><td style="text-align:center">Python</td><td style="text-align:center">×</td></tr><tr><td style="text-align:center">Keras</td><td style="text-align:center">个人, 有被TF吸纳</td><td style="text-align:center">Python</td><td style="text-align:center">√</td></tr><tr><td style="text-align:center">Scikit Learn</td><td style="text-align:center">法国Inria, 有被TF吸纳</td><td style="text-align:center">Python</td><td style="text-align:center">×</td></tr></tbody></table><h2 id="三、TensorFlow的基础结构"><a href="#三、TensorFlow的基础结构" class="headerlink" title="三、TensorFlow的基础结构"></a>三、TensorFlow的基础结构</h2><h3 id="1-基础结构-数据流图"><a href="#1-基础结构-数据流图" class="headerlink" title="1. 基础结构-数据流图"></a><span style="font-size: 18px;">1. 基础结构-数据流图</span></h3><p>　　取上面数据流图中的一部分，得到简化的数据流图（Graph），如下图所示。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/simple_data_flow_graph.png" alt="simple_data_flow_graph.png"><br>　　边就是那些流动的 Tensor（张量），即Tensor在边里面流动。<br>　　每一个节点就是一个 Operation 操作，即数学计算或激励函数等的操作。<br>　　边和节点共同构成了 Graph 也就是数据流图。<br>　　数据流图会被放进 Session 会话中进行运行。会话可以在不同的设备上去运行，比如cpu和GPU。<br>　　所以数据流图（Graph）主要有两部分组成：<br>　　<strong>Tensor（张量）</strong> 边里流动的数据<br>　　<strong>Operation（操作）</strong><br>　　Tensor作为Operation的输入，Operation的输出又是Tensor。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/tensorflow_graph.png" alt="tensorflow_graph.png"></p><h3 id="2-TensorFlow的基础模型"><a href="#2-TensorFlow的基础模型" class="headerlink" title="2. TensorFlow的基础模型"></a><span style="font-size: 18px;">2. TensorFlow的基础模型</span></h3><p>　　数据模型 - Tensor（张量） 张量是TensorFlow中最重要的结构。<br>　　计算模型 - Graph（图）<br>　　运行模型 - Session（会话）</p><h3 id="3-TensorFlow程序的流程"><a href="#3-TensorFlow程序的流程" class="headerlink" title="3. TensorFlow程序的流程"></a><span style="font-size: 18px;">3. TensorFlow程序的流程</span></h3><p>　　1. 定义算法的计算图（Graph）结构<br>　　2. 使用会话（Session）执行图的一部分（计算）<br>　　注：一般不主动创建图的话，TensorFlow会有一个默认的图，可以直接用。通过 <code>tf.get_default_graph()</code> 可以得到这个默认的图。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tfc <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'const1'</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>tf<span class="token punctuation">.</span>int64<span class="token punctuation">)</span><span class="token keyword">if</span> c<span class="token punctuation">.</span>graph <span class="token keyword">is</span> tf<span class="token punctuation">.</span>get_default_graph<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'The graph of c is the default graph of the context'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出如下：</span><span class="token comment" spellcheck="true"># The graph of c is the default graph of the context</span></code></pre><h2 id="四、TensorFlow的数据结构（重要）"><a href="#四、TensorFlow的数据结构（重要）" class="headerlink" title="四、TensorFlow的数据结构（重要）"></a>四、TensorFlow的数据结构（重要）</h2><p>　　TensorFlow的主要数据结构是张量（Tensor），这点从TensorFlow的命名就可以看出来了。<br>　　前面说过，张量这个词在生活中比较陌生，但仔细想一下，它曾出现在大学物理的课本中（如果你学过“大物”）。没错，张量这一术语起源于力学，同时它也是几何与代数中的基本概念之一（大学里没学过没关系，忽略这段话即可）。</p><h3 id="1-Tensor的概念"><a href="#1-Tensor的概念" class="headerlink" title="1. Tensor的概念"></a><span style="font-size: 18px;">1. Tensor的概念</span></h3><p>　　TensorFlow里的数据都是Tensor。<br>　　既然前面说，Tensor代表的是N维数组，那么它就有<span style="color: #FF0000;">维度（秩）：Rand/Order</span>，如下图所示：<br>　　维度为0时，是一个标量（Scalar），即只有一个元素，称为<strong>0阶张量</strong>；维度为1时，是一个一维向量（Vector），称为<strong>1阶张量</strong>；维度为2时，就是矩阵（Matrix），称为<strong>2阶张量</strong>；维度N大于等于3时，就是一个<strong>N阶张量</strong>。<br>　　一个张量里面的元素类型都是一样的。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/tensor_dimension.png" alt="tensor_dimension.png"></p><h3 id="2-Tensor的属性"><a href="#2-Tensor的属性" class="headerlink" title="2. Tensor的属性"></a><span style="font-size: 18px;">2. Tensor的属性</span></h3><p>　　Tensor具有一些属性：<br>　　1）<strong>device</strong>：在哪个设备上被计算出来的<br>　　2）<strong>dtype</strong>：Tensor里面的元素具有一个共同的数据类型，各种数据类型参见：<br>　　　 <a href="https://tensorflow.google.cn/api_docs/python/tf/dtypes/DType" rel="external nofollow noopener noreferrer" target="_blank">https://tensorflow.google.cn/api_docs/python/tf/dtypes/DType</a><br>　　3）<strong>graph</strong>：这个Tensor所属的图<br>　　4）<strong>name</strong>：给这个Tensor起的名字<br>　　5）<strong>op</strong>：Operation的缩写，是产生这个Tensor的一个操作/运算，对应图上的节点<br>　　6）<strong>shape</strong>：描述张量的形状，例如一个四行三列的二维矩阵，它的shape就是(4, 3)<br>　　7）其它参见：<br>　　　 <a href="https://tensorflow.google.cn/api_docs/python/tf/Tensor" rel="external nofollow noopener noreferrer" target="_blank">https://tensorflow.google.cn/api_docs/python/tf/Tensor</a></p><h3 id="3-几种主要的Tensor"><a href="#3-几种主要的Tensor" class="headerlink" title="3. 几种主要的Tensor"></a><span style="font-size: 18px;">3. 几种主要的Tensor</span></h3><p>　　1）<strong>Constant</strong><br>　　　　常量，值不能改变的一种Tensor。详情见官方文档的 <code>tf.constant</code><br>　　2）<strong>Variable</strong><br>　　　　变量，值可以改变的一种Tensor。详情见官方文档的 <code>tf.Variable</code><br>　　3）<strong>Placeholder</strong><br>　　　　占位符，先占住一个固定的位置，等之后往里面添加值的一个Tensor。详情见官方文档的 <code>tf.placeholder</code><br>　　　　一般在正式运行图的时候，即sess.run()里面通过 <code>feed_dict()</code> 以字典形式赋值。<br>　　4）<strong>SparseTensor</strong><br>　　　　稀疏张量，一种“稀疏”的Tensor，类似线性代数里的稀疏矩阵的概念。详情见官方文档的 <code>tf.SparseTensor</code><br>　　　　<span style="font-size: 10px; color: #FF0000;">* </span><span style="font-size: 10px; color: #9e9e9e;">数值为0的元素数目远远多于非0元素的数目，并且非0元素分布没有规律的矩阵。</span></p><h3 id="4-Tensor的表示法"><a href="#4-Tensor的表示法" class="headerlink" title="4. Tensor的表示法"></a><span style="font-size: 18px;">4. Tensor的表示法</span></h3><p>　　当我们创建一个Tensor后，直接print()它，输出的不是实际值，而是一个表示法，该表示法如下结构所示：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/print_tensor.png" alt="print_tensor.png"><br>例如：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tfvar <span class="token operator">=</span> tf<span class="token punctuation">.</span>Variable<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2.0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出如下：</span><span class="token comment" spellcheck="true"># &lt;tf.Variable 'Variable_2:0' shape=(2, 1) dtype=float32_ref></span></code></pre><p>　　类型：指明是tf.Variable<br>　　名字：Variable_2，如果定义是没有指定名字，默认会以数据类型为名字。<br>　　索引：0，表示该Operation产生的第几个张量，因为每个Operation可能会产生多个张量<br>　　形状：(2, 1)表示2行1列的二维矩阵，如果是标量则为空()<br>　　数据类型：float32_ref表示数据类型为float32，32位浮点型</p><h2 id="五、小试牛刀"><a href="#五、小试牛刀" class="headerlink" title="五、小试牛刀"></a>五、小试牛刀</h2><p>　　写一个TensorFlow程序，实现两个矩阵的乘法</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> tensorflow <span class="token keyword">as</span> tf<span class="token comment" spellcheck="true"># 创建两个常量Tensor</span><span class="token comment" spellcheck="true"># 注意矩阵乘法要求前一个矩阵的列数等于后一个矩阵的行数</span>const1 <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>const2 <span class="token operator">=</span> tf<span class="token punctuation">.</span>constant<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 矩阵乘法</span>multiple <span class="token operator">=</span> tf<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>const1<span class="token punctuation">,</span> const2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 直接用print输出multiple的值</span><span class="token keyword">print</span><span class="token punctuation">(</span>multiple<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建Session对象</span><span class="token keyword">with</span> tf<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> sess<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 用Session的run方法来实际运行multiple这个矩阵乘法操作</span>    result <span class="token operator">=</span> sess<span class="token punctuation">.</span>run<span class="token punctuation">(</span>multiple<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出如下：</span><span class="token comment" spellcheck="true"># Tensor("MatMul:0", shape=(1, 1), dtype=int32)</span><span class="token comment" spellcheck="true"># [[16]]</span></code></pre><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>　　<a href="/static/tensorflow基础知识思维导图.png" title="TensorFlow基础知识思维导图">TensorFlow基础知识思维导图</a></p><p class="reference"><br>参考<br><a href="https://blog.csdn.net/xun527/article/details/79690226" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/xun527/article/details/79690226</a><br><a href="https://blog.csdn.net/u013521220/article/details/79721682" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/u013521220/article/details/79721682</a><br></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习术语表</title>
      <link href="/blogs/machine-learning-glossary.html"/>
      <url>/blogs/machine-learning-glossary.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">机器学习术语表</div><blockquote><p>介绍一些机器学习术语和 TensorFlow 专用术语的含义。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　最近工作需要，初学了一下机器学习。一开始对其中的很多名词都不理解，就在网上找了一些资料。这里简单整理下。</p><h2 id="一、AI、机器学习、深度学习"><a href="#一、AI、机器学习、深度学习" class="headerlink" title="一、AI、机器学习、深度学习"></a>一、AI、机器学习、深度学习</h2><h3 id="1-人工智能知识图谱"><a href="#1-人工智能知识图谱" class="headerlink" title="1. 人工智能知识图谱"></a><span style="font-size: 18px;">1. 人工智能知识图谱</span></h3><p>　　人工智能不是一门独立的学科，它和其它很多学科都有交集，如下为人工智能知识图谱。<br>　　总的来说，机器学习还是属于人工智能范围内的，深度学习也属于机器学习的一个子领域。<br>　　神经网络横穿其中，深度学习是基于神经网络的。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/ai_knowledge_graph.png" alt="ai_knowledge_graph.png" width="500" hegiht="300" align="center"></p><h3 id="2-人工智能、机器学习和深度学习的关系"><a href="#2-人工智能、机器学习和深度学习的关系" class="headerlink" title="2. 人工智能、机器学习和深度学习的关系"></a><span style="font-size: 18px;">2. 人工智能、机器学习和深度学习的关系</span></h3><p>　　机器学习是实现人工智能的一种方法，深度学习是机器学习的一个分支。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/ai_ml_dl.jpg" alt="ai_ml_dl.jpg"></p><h3 id="3-机器学习"><a href="#3-机器学习" class="headerlink" title="3. 机器学习"></a><span style="font-size: 18px;">3. 机器学习</span></h3><p>　　机器学习算法是一类从数据中自动分析获得规律（模型），并利用规律对未知数据进行预测的算法<br>　　<a href="/static/机器学习思维导图.png" title="机器学习思维导图">机器学习思维导图</a></p><h3 id="4-深度学习"><a href="#4-深度学习" class="headerlink" title="4. 深度学习"></a><span style="font-size: 18px;">4. 深度学习</span></h3><p>　　基于深度神经网络的学习研究称之为深度学习。<br>　　大于两个隐藏层的神经网络称为深度神经网络，深度指的隐藏层的层数。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/deep_neural_network.png" alt="deep_neural_network.png" width="500" hegiht="300" align="center"></p><h2 id="二、TensorFlow"><a href="#二、TensorFlow" class="headerlink" title="二、TensorFlow"></a>二、TensorFlow</h2><p>　　TensorFlow是Google在2015年年底开源的内部使用的深度学习框架。<br>　　它的流行让深度学习门槛变得越来越低，只要你有Python和机器学习基础，入门和使用神经网络模型变得非常简单。TensorFlow支持Python和C++两种编程语言，再复杂的多层神经网络模型都可以用Python来实现，如果业务使用其他编程也不用担心，使用跨语言的gRPC或者HTTP服务也可以访问使用TensorFlow训练好的智能模型。<br>　　为什么说TensorFlow强大呢？因为在使用TensorFlow训练模型时，我们不需要手动实现最小二乘法等算法，也无需通过if-else来控制代码逻辑，完全是由数据驱动并且根据选择的算法动态调整Loss值来学习。</p><h2 id="三、术语表"><a href="#三、术语表" class="headerlink" title="三、术语表"></a>三、术语表</h2><p>　　重复搬运文章没什么意思，这里只记录下两份中文版术语表的官方链接：<br>　　<span style="color: #3498db;">1. 《机器学习术语表》</span><br>　　<a href="https://developers.google.cn/machine-learning/glossary/?hl=zh-CN" rel="external nofollow noopener noreferrer" target="_blank">https://developers.google.cn/machine-learning/glossary/?hl=zh-CN</a><br>　　由Google官方的工程教育团队发布，该术语表中列出了一般的Machine Learning术语和 TensorFlow 专用术语的定义。语言版本包括西班牙语，法语，韩语和简体中文。<br>　　<span style="color: #3498db;">2. 《TensorFlow术语表》</span><br>　　<a href="http://www.tensorfly.cn/tfdoc/resources/glossary.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.tensorfly.cn/tfdoc/resources/glossary.html</a><br>　　由TensorFlow中文社区翻译官方文档。</p><h2 id="四、我们用机器学习做什么"><a href="#四、我们用机器学习做什么" class="headerlink" title="四、我们用机器学习做什么"></a>四、我们用机器学习做什么</h2><p>　　说到机器学习，一般人肯定会想，这是博士生做的事情，我们碰不了。其实并非如此，不同人群对于机器学习的应用也是不同的：</p><ul><li>对于数据科学家、研究生、院士：<ul><li>研究复杂模型的算法</li><li>改善和精进现有算法</li></ul></li><li>对于互联网公司机器学习工作、数据挖掘工程师岗位<ul><li>研究各种算法，设计高大上模型</li><li>深度学习的应用，N层神经网络</li><li>…</li></ul></li><li>对于大多数程序员<ul><li>跑数据，各种map-reduce，hive SQL，数据仓库搬砖</li><li>数据清洗</li><li>分析业务，分析case，找特征</li><li>常用算法跑模型</li></ul></li></ul><p class="reference"><br>参考<br><a href="https://blog.csdn.net/xun527/article/details/79482940" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/xun527/article/details/79482940</a><br><a href="https://blog.csdn.net/u013521220/article/details/79721682" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/u013521220/article/details/79721682</a><br></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch面试题汇总</title>
      <link href="/blogs/elasticsearch-interview-questions.html"/>
      <url>/blogs/elasticsearch-interview-questions.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">Elasticsearch面试题</div><blockquote><p>总结一些ES相关的面试题，既是对日常工作所学知识的回顾与梳理，也可以查漏补缺。<br>题目来自于网络，只整理一些我个人觉得还不错的，有些答案是我根据自己的理解给出的，仅供参考。<br>既然是面试题，每个人都会有自己的结合业务场景的答案，没有100分的标准的答案。<br>如果有不同的理解，欢迎大家在评论区留言指正，感谢大家！</p></blockquote><h3 id="1-什么是Elasticsearch？"><a href="#1-什么是Elasticsearch？" class="headerlink" title="1. 什么是Elasticsearch？"></a><span style="font-size: 18px;">1. 什么是Elasticsearch？</span></h3><p>　　Elasticsearch是一个基于Lucene的搜索引擎。它提供了具有HTTP Web界面和无架构JSON文档的分布式，多租户能力的全文搜索引擎。Elasticsearch是用Java开发的，根据Apache许可条款作为开源发布。</p><h3 id="2-ES中的倒排索引是什么？"><a href="#2-ES中的倒排索引是什么？" class="headerlink" title="2. ES中的倒排索引是什么？"></a><span style="font-size: 18px;">2. ES中的倒排索引是什么？</span></h3><p>　　传统的检索方式是通过文章，逐个遍历找到对应关键词的位置。<br>　　倒排索引，是通过分词策略，形成了词和文章的映射关系表，也称倒排表，这种词典+映射表即为倒排索引。<br>　　其中词典中存储词元，倒排表中存储该词元在哪些文中出现的位置。<br>　　有了倒排索引，就能实现O(1)时间复杂度的效率检索文章了，极大的提高了检索效率。<br>　　<span style="color: #FF0000;">加分项：</span><br>　　倒排索引的底层实现是基于：FST（Finite State Transducer）数据结构。<br>　　Lucene从4+版本后开始大量使用的数据结构是FST。FST有两个优点：<br>　　1）空间占用小。通过对词典中单词前缀和后缀的重复利用，压缩了存储空间；<br>　　2）查询速度快。O(len(str))的查询时间复杂度。</p><h3 id="3-ES是如何实现master选举的？"><a href="#3-ES是如何实现master选举的？" class="headerlink" title="3. ES是如何实现master选举的？"></a><span style="font-size: 18px;">3. ES是如何实现master选举的？</span></h3><p>　　<span style="color: #FF0000;">前置条件：</span><br>　　1）只有是候选主节点（master：true）的节点才能成为主节点。<br>　　2）最小主节点数（min_master_nodes）的目的是防止脑裂。</p><p>　　Elasticsearch的选主是ZenDiscovery模块负责的，主要包含Ping（节点之间通过这个RPC来发现彼此）和Unicast（单播模块包含一个主机列表以控制哪些节点需要ping通）这两部分；<br>　　获取主节点的核心入口为findMaster，选择主节点成功返回对应Master，否则返回null。<br>　　<span style="color: #FF0000;">选举流程大致描述如下：</span><br>　　第一步：确认候选主节点数达标，elasticsearch.yml设置的值discovery.zen.minimum_master_nodes;<br>　　第二步：对所有候选主节点根据nodeId字典排序，每次选举每个节点都把自己所知道节点排一次序，然后选出第一个（第0位）节点，暂且认为它是master节点。<br>　　第三步：如果对某个节点的投票数达到一定的值（候选主节点数n/2+1）并且该节点自己也选举自己，那这个节点就是master。否则重新选举一直到满足上述条件。</p><ul><li>补充：<ul><li>这里的id为string类型。</li><li>master节点的职责主要包括集群、节点和索引的管理，不负责文档级别的管理；data节点可以关闭http功能。</li></ul></li></ul><h3 id="4-如何解决ES集群的脑裂问题"><a href="#4-如何解决ES集群的脑裂问题" class="headerlink" title="4. 如何解决ES集群的脑裂问题"></a><span style="font-size: 18px;">4. 如何解决ES集群的脑裂问题</span></h3><p>　　所谓集群脑裂，是指Elasticsearch集群中的节点（比如共20个），其中的10个选了一个master，另外10个选了另一个master的情况。<br>　　当集群master候选数量不小于3个时，可以通过设置最少投票通过数量（discovery.zen.minimum_master_nodes）超过所有候选节点一半以上来解决脑裂问题；<br>　　当候选数量为两个时，只能修改为唯一的一个master候选，其他作为data节点，避免脑裂问题。</p><h3 id="5-详细描述一下ES索引文档的过程？"><a href="#5-详细描述一下ES索引文档的过程？" class="headerlink" title="5. 详细描述一下ES索引文档的过程？"></a><span style="font-size: 18px;">5. 详细描述一下ES索引文档的过程？</span></h3><p>　　这里的索引文档应该理解为文档写入ES，创建索引的过程。<br>　　第一步：客户端向集群某节点写入数据，发送请求。（如果没有指定路由/协调节点，请求的节点扮演协调节点的角色。）<br>　　第二步：协调节点接受到请求后，默认使用文档ID参与计算（也支持通过routing），得到该文档属于哪个分片。随后请求会被转到另外的节点。</p><pre class=" language-java"><code class="language-java"># 路由算法：根据文档id或路由计算目标的分片idshard <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>document_id<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token punctuation">(</span>num_of_primary_shards<span class="token punctuation">)</span></code></pre><p>　　第三步：当分片所在的节点接收到来自协调节点的请求后，会将请求写入到Memory Buffer，然后定时（默认是每隔1秒）写入到Filesystem Cache，这个从Momery Buffer到Filesystem Cache的过程就叫做refresh；<br>　　第四步：当然在某些情况下，存在Memery Buffer和Filesystem Cache的数据可能会丢失，ES是通过translog的机制来保证数据的可靠性的。其实现机制是接收到请求后，同时也会写入到translog中，当Filesystem cache中的数据写入到磁盘中时，才会清除掉，这个过程叫做flush；<br>　　第五步：在flush过程中，内存中的缓冲将被清除，内容被写入一个新段，段的fsync将创建一个新的提交点，并将内容刷新到磁盘，旧的translog将被删除并开始一个新的translog。<br>　　第六步：flush触发的时机是定时触发（默认30分钟）或者translog变得太大（默认为512M）时。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/elasticsearch_index_process.jpg" alt="elasticsearch_index_process.jpg"></p><ul><li>补充：关于Lucene的Segement<ul><li>Lucene索引是由多个段组成，段本身是一个功能齐全的倒排索引。</li><li>段是不可变的，允许Lucene将新的文档增量地添加到索引中，而不用从头重建索引。</li><li>对于每一个搜索请求而言，索引中的所有段都会被搜索，并且每个段会消耗CPU的时钟周、文件句柄和内存。这意味着段的数量越多，搜索性能会越低。</li><li>为了解决这个问题，Elasticsearch会合并小段到一个较大的段，提交新的合并段到磁盘，并删除那些旧的小段。（段合并）</li></ul></li></ul><h3 id="6-详细描述一下ES更新和删除文档的过程？"><a href="#6-详细描述一下ES更新和删除文档的过程？" class="headerlink" title="6. 详细描述一下ES更新和删除文档的过程？"></a><span style="font-size: 18px;">6. 详细描述一下ES更新和删除文档的过程？</span></h3><p>　　删除和更新也都是写操作，但是Elasticsearch中的文档是不可变的，因此不能被删除或者改动以展示其变更；<br>　　磁盘上的每个段都有一个相应的.del文件。当删除请求发送后，文档并没有真的被删除，而是在.del文件中被标记为删除。该文档依然能匹配查询，但是会在结果中被过滤掉。当段合并时，在.del文件中被标记为删除的文档将不会被写入新段。<br>　　在新的文档被创建时，Elasticsearch会为该文档指定一个版本号，当执行更新时，旧版本的文档在.del文件中被标记为删除，新版本的文档被索引到一个新段。旧版本的文档依然能匹配查询，但是会在结果中被过滤掉。</p><h3 id="7-详细描述一下ES搜索的过程？"><a href="#7-详细描述一下ES搜索的过程？" class="headerlink" title="7. 详细描述一下ES搜索的过程？"></a><span style="font-size: 18px;">7. 详细描述一下ES搜索的过程？</span></h3><p>　　搜索被执行成一个两阶段过程，即 Query Then Fetch；<br>　　<span style="color: #FF0000;">Query阶段：</span><br>　　查询会广播到索引中每一个分片拷贝（主分片或者副本分片）。每个分片在本地执行搜索并构建一个匹配文档的大小为 from + size 的优先队列。PS：在搜索的时候是会查询Filesystem Cache的，但是有部分数据还在Memory Buffer，所以搜索是近实时的。<br>　　每个分片返回各自优先队列中 <strong>所有文档的 ID 和排序值</strong> 给协调节点，它合并这些值到自己的优先队列中来产生一个全局排序后的结果列表。<br>　　<span style="color: #FF0000;">Fetch阶段：</span><br>　　协调节点辨别出哪些文档需要被取回并向相关的分片提交多个 GET 请求。每个分片加载并 丰富 文档，如果有需要的话，接着返回文档给协调节点。一旦所有的文档都被取回了，协调节点返回结果给客户端。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/elasticsearch_query_process.jpg" alt="elasticsearch_query_process.jpg"></p><h3 id="8-在并发情况下，ES如果保证读写一致？"><a href="#8-在并发情况下，ES如果保证读写一致？" class="headerlink" title="8. 在并发情况下，ES如果保证读写一致？"></a><span style="font-size: 18px;">8. 在并发情况下，ES如果保证读写一致？</span></h3><p>　　可以通过版本号使用乐观并发控制，以确保新版本不会被旧版本覆盖，由应用层来处理具体的冲突；<br>　　另外对于写操作，一致性级别支持quorum/one/all，默认为quorum，即只有当大多数分片可用时才允许写操作。但即使大多数可用，也可能存在因为网络等原因导致写入副本失败，这样该副本被认为故障，分片将会在一个不同的节点上重建。<br>　　对于读操作，可以设置replication为sync(默认)，这使得操作在主分片和副本分片都完成后才会返回；如果设置replication为async时，也可以通过设置搜索请求参数_preference为primary来查询主分片，确保文档是最新版本。</p><h3 id="9-ES对于大数据量（上亿量级）的聚合如何实现？"><a href="#9-ES对于大数据量（上亿量级）的聚合如何实现？" class="headerlink" title="9. ES对于大数据量（上亿量级）的聚合如何实现？"></a><span style="font-size: 18px;">9. ES对于大数据量（上亿量级）的聚合如何实现？</span></h3><p>　　Elasticsearch 提供的首个近似聚合是cardinality 度量。它提供一个字段的基数，即该字段的distinct或者unique值的数目。它是基于HLL算法的。HLL 会先对我们的输入作哈希运算，然后根据哈希运算的结果中的 bits 做概率估算从而得到基数。其特点是：可配置的精度，用来控制内存的使用（更精确 ＝ 更多内存）；小的数据集精度是非常高的；我们可以通过配置参数，来设置去重需要的固定内存使用量。无论数千还是数十亿的唯一值，内存使用量只与你配置的精确度相关。</p><h3 id="10-对于GC方面，在使用ES时要注意什么？"><a href="#10-对于GC方面，在使用ES时要注意什么？" class="headerlink" title="10. 对于GC方面，在使用ES时要注意什么？"></a><span style="font-size: 18px;">10. 对于GC方面，在使用ES时要注意什么？</span></h3><p>　　1）倒排词典的索引需要常驻内存，无法GC，需要监控data node上segment memory增长趋势。<br>　　2）各类缓存，field cache, filter cache, indexing cache, bulk queue等等，要设置合理的大小，并且要应该根据最坏的情况来看heap是否够用，也就是各类缓存全部占满的时候，还有heap空间可以分配给其他任务吗？避免采用clear cache等“自欺欺人”的方式来释放内存。<br>　　3）避免返回大量结果集的搜索与聚合。确实需要大量拉取数据的场景，可以采用scan &amp; scroll api来实现。<br>　　4）cluster stats驻留内存并无法水平扩展，超大规模集群可以考虑分拆成多个集群通过tribe node连接。<br>　　5）想知道heap够不够，必须结合实际应用场景，并对集群的heap使用情况做持续的监控。</p><h3 id="11-说说你们公司ES的集群架构，索引数据大小，分片有多少，以及一些调优手段？"><a href="#11-说说你们公司ES的集群架构，索引数据大小，分片有多少，以及一些调优手段？" class="headerlink" title="11. 说说你们公司ES的集群架构，索引数据大小，分片有多少，以及一些调优手段？"></a><span style="font-size: 18px;">11. 说说你们公司ES的集群架构，索引数据大小，分片有多少，以及一些调优手段？</span></h3><p>　　根据实际情况回答即可，如果是我的话会这么回答：<br>　　我司有多个ES集群，下面列举其中一个。该集群有20个节点，根据数据类型和日期分库，每个索引根据数据量分片，比如日均1亿+数据的，控制单索引大小在200GB以内。　<br>　　下面重点列举一些调优策略，仅是我做过的，不一定全面，如有其它建议或者补充欢迎留言。<br>　　<span style="color: #FF0000;">部署层面：</span><br>　　1）最好是64GB内存的物理机器，但实际上32GB和16GB机器用的比较多，但绝对不能少于8G，除非数据量特别少，这点需要和客户方面沟通并合理说服对方。<br>　　2）多个内核提供的额外并发远胜过稍微快一点点的时钟频率。<br>　　3）尽量使用SSD，因为查询和索引性能将会得到显著提升。<br>　　4）避免集群跨越大的地理距离，一般一个集群的所有节点位于一个数据中心中。<br>　　5）设置堆内存：节点内存/2，不要超过32GB。一般来说设置export ES_HEAP_SIZE=32g环境变量，比直接写-Xmx32g  -Xms32g更好一点。<br>　　6）关闭缓存swap。内存交换到磁盘对服务器性能来说是致命的。如果内存交换到磁盘上，一个100微秒的操作可能变成10毫秒。 再想想那么多10微秒的操作时延累加起来。不难看出swapping对于性能是多么可怕。<br>　　7）增加文件描述符，设置一个很大的值，如65535。Lucene使用了大量的文件，同时，Elasticsearch在节点和HTTP客户端之间进行通信也使用了大量的套接字。所有这一切都需要足够的文件描述符。<br>　　8）不要随意修改垃圾回收器（CMS）和各个线程池的大小。<br>　　9）通过设置gateway.recover_after_nodes、gateway.expected_nodes、gateway.recover_after_time可以在集群重启的时候避免过多的分片交换，这可能会让数据恢复从数个小时缩短为几秒钟。<br>　　<span style="color: #FF0000;">索引层面：</span><br>　　1）使用批量请求并调整其大小：每次批量数据 5–15 MB 大是个不错的起始点。<br>　　2）段合并：Elasticsearch默认值是20MB/s，对机械磁盘应该是个不错的设置。如果你用的是SSD，可以考虑提高到100-200MB/s。如果你在做批量导入，完全不在意搜索，你可以彻底关掉合并限流。另外还可以增加 index.translog.flush_threshold_size 设置，从默认的512MB到更大一些的值，比如1GB，这可以在一次清空触发的时候在事务日志里积累出更大的段。<br>　　3）如果你的搜索结果不需要近实时的准确度，考虑把每个索引的index.refresh_interval 改到30s。<br>　　4）如果你在做大批量导入，考虑通过设置index.number_of_replicas: 0 关闭副本。<br>　　5）需要大量拉取数据的场景，可以采用scan &amp; scroll api来实现，而不是from/size一个大范围。<br>　　<span style="color: #FF0000;">存储层面：</span><br>　　1）基于数据+时间滚动创建索引，每天递增数据。控制单个索引的量，一旦单个索引很大，存储等各种风险也随之而来，所以要提前考虑+及早避免。<br>　　2）冷热数据分离存储，热数据（比如最近3天或者一周的数据），其余为冷数据。对于冷数据不会再写入新数据，可以考虑定期force_merge加shrink压缩操作，节省存储空间和检索效率。</p><h2 id="未完待续…"><a href="#未完待续…" class="headerlink" title="未完待续…"></a><span style="font-size: 18px;">未完待续…</span></h2><p>　　以上是目前整理的面试题，结合自己的理解，可能对于一些回答每个人有不同的想法，可以在下面留言。<br>　　后续会定期更新，感谢阅读。</p>]]></content>
      
      
      <categories>
          
          <category> 面试小结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019知识星球学习笔记</title>
      <link href="/blogs/reading-notes-zhi-shi-xing-qiu-2019.html"/>
      <url>/blogs/reading-notes-zhi-shi-xing-qiu-2019.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">2019知识星球学习笔记</div><blockquote><p>本文是2019年度在知识星球的学习笔记，只有对各种案例及时复盘才能有效吸收。看过就忘等于花钱进去围观，毫无收获。</p></blockquote><h3 id="1-星球语录"><a href="#1-星球语录" class="headerlink" title="1. 星球语录"></a><span style="font-size: 18px;">1. 星球语录</span></h3><p>　　<span style="color: #159957;">即兴笔记，非刻意排序，整理过程中会部分去冗。</span></p><div class="ana"><br>　　如果你希望别人轻易记住你，要做一件事：把你在互联网上的昵称换掉，最好简单易记，搜索结果也没太多干扰信息，有辨识度。<br>　　曹大说过，最好的SEO是把品牌做成搜索词。类似，做个人品牌和影响力，最好要把自己的名字做成搜索结果页第一条，出现的第一个搜索结果就是跟你相关，比如Caoz 、Fenng、stormzhang、粥左罗。<br>　　但有些词，你再怎么努力也做不到第一条，比如“明白”。<br><span class="provenance">—— 生财有术</span><br></div><br><div class="ana"><br>　　一个人的“审美”能力决定他的做事水平。<br>　　这里的“审美”指广义的“审美”：见过的好的、高水平的、厉害的人或事。<br>　　见过越多好的设计，越有可能设计出好的作品；深交过越多有钱的朋友，越有可能赚到更多的钱；见过越多的赚钱案例，越有机会赚到钱。<br><span class="provenance">—— 生财有术</span><br></div><br><div class="ana"><br>　　“调研”深浅体现出能力高低。<br>　　做电商产品的设计，能不能做到闭着眼睛把别的电商网站画出来，细致到每一个小布局。<br>　　做竞争产品的调研，能不能对竞品的每一个更新、每一个运营活动、每一个用户评论都做到如数家珍，如果做不到，就还没到拼天赋的阶段。<br><span class="provenance">—— 生财有术</span><br></div><br><div class="ana"><br>　　不要用自己的视角去定义用户。<br>　　想象中觉得余额宝放100万的人喜欢的审美是高贵、优雅、流光溢彩，实际上呢，余额宝放100万的可以评论下。<br><span class="provenance">—— 生财有术</span><br></div><br><div class="ana"><br>　　设计的三个层次：好看 &lt; 差异化 &lt; 驱动产品。<br>　　好看是设计的题中之义，好看都做不到，直接不及格。跟公司运营一样，没有赚钱能力（排除战略性亏损），再人性化的管理、再好的团队氛围、再牛逼的资源整合，都是不及格。<br>　　差异化建立产品认知，你与别的产品哪里不一样？比别的产品好在什么地方？这些不一样的点构成了你，而不是那些一样的点。<br>　　审美是一种生产力，绝大部分产品走不到这一步，苹果做到了。<br><span class="provenance">—— 生财有术</span><br></div><br><div class="ana"><br>　　山寨是创新的开始，抄都抄不好，自己做更不行。<br>　　先抄后超，抄的基础上微创新。商业不是为了证明你有能力独立完成，而是看谁在最短的时间跑最快，是否独立不重要，这是一场开卷考试。<br><span class="provenance">—— 生财有术</span><br></div><br><div class="ana"><br>　　很多人赚不到钱是因为不好意思赚钱。<br>　　本质上是不自信，觉得做不好。但很多时候，收了钱，逼一下自己，就有机会做好，输出倒逼输入，收钱倒逼做好。<br><span class="provenance">—— 生财有术</span><br></div><br><div class="ana"><br>　　不要“最好”而是“更好”。<br>　　很多人觉得自己提供不了好的服务和价值，思考的出发点是“我是不是最好？”然而实际上，你要考虑的是，你能不能比你提供服务的那些人更好就行。<br>　　你是不是设计最厉害的不重要，你只需要比你提供服务的那些人设计厉害就行。<br><br>　　爬虫课有没有“技术含量”也不重要，重要的是这写爬虫课，是不是能让不懂爬虫的人学会抓数据解决问题，比他们更好就行。<br><span class="provenance">—— 生财有术</span><br></div><br><div class="ana"><br>　　不要为了差异化而差异化。<br>　　在面向市场和别人充分竞争时，需要考虑差异化切入市场。但如果已经有一批用户，考虑向他们提供价值时，差异化已经不重要了：他们需要什么，就给他们什么。<br><span class="provenance">—— 生财有术</span><br></div><br><div class="ana"><br>　　不要考虑太长期的事情。<br>　　有些人考虑离职时，在想出来要做的事情是不是长期可做、甚至可以做一辈子的事情，其实不用考虑那么远，人性没有变，需求不会有大变化，市场不会有大的变化，产品一波一波迭代就行。<br><span class="provenance">—— 生财有术</span><br></div><br><div class="ana"><br>　　千万不要玻璃心。<br>　　除非不做事情，只要做事情，就算做的再好，都会被人骂。而事实上，那些骂你的人，根本这辈子都不会跟你产生交集，别人一骂，就玻璃心碎了停下来，正好证实了他骂的是对的。正确的做法：别理他们，当他们不存在。他们骂累了，觉得很无趣，就会带着有意思的优越感去骂别人。<br><span class="provenance">—— 生财有术</span><br></div><br><div class="ana"><br>　　凡事都要抓重点。<br>　　一个新产品上线，美丑没那么重要，色彩搭配没那么重要，在需求被产品满足的情况下，才会注意到那些点。<br><span class="provenance">—— 生财有术</span><br></div><br><div class="ana"><br>　　做业务要大胆突破。<br>　　要敢于突破，主动突破，没有长期持续稳定赚钱的事情，要么变要么死。<br>　　回头看，绝大多数抓住的机会点，几乎都是主动选择的突破。<br><span class="provenance">—— 生财有术</span><br></div><br><div class="ana"><br>　　先把视野内的东西研究透。<br>　　连第一个十万、百万都没赚到，研究各种方法论意义不大，知道自己在什么层次，需要做的是什么。<br>　　正如别人的书单对你没有意义一样，除非你的视野和格局与他一致。<br><span class="provenance">—— 生财有术</span><br></div><br><div class="ana"><br>　　“与你有关”很重要。<br>　　不要自嗨，不管是写文案、做活动、做设计，关键一点：用户看到这些，能不能觉得，这事与我有关？<br><span class="provenance">—— 生财有术</span><br></div><br><div class="ana"><br>　　微信和QQ。<br>　　微信一开始就主打语音，就这一点，就是足够的创新了。<br>　　而QQ一直是个文字聊天工具而已，后面微信推出了公众号、朋友圈、摇一摇、附近的人、微信支付、红包等等，直接把微信推到了移动互联网第一霸主的地位。<br>　　所以，做产品的，一定要从一点进行切入，或许在逐渐的扩张与完善，如果产品没有一个亮点是你的特色，那很难脱颖而出的。<br><span class="provenance">—— 帅张和他的朋友们</span><br></div><br><div class="ana"><br>　　商业不要有偏见。<br>　　我常给大家说，看待问题的角度要够广，视野格局要够大。啥意思呢？作为用户，你关注了一个营销号，你觉得抖音消磨了用户大量的时间，你被裂变套路了，你觉得这些东西都很 low，都很没意义，这可以理解，因为这是你从用户角度出发的。<br>　　但是从商业的角度出发，有人通过营销号赚钱了，有人做抖音摸到了一些门道，有人专业搞裂变甚至成为一个事业了，这些都有值得我们学习的地方。<br>　　从不同的角度出发，你就会有不同的认知提升。<br>　　商业没有对错，更不该有偏见。有人愿意给你分享他自己真实的赚钱经历，这不是把你当做他的用户来对待的，而是把你当做同行分享来对待的，这点大家务必清楚。<br>　　很多套路你可以不去做，但是你不知道和你知道但你不去做，是两码事。要学习人家的商业思维和赚钱套路，但前提是，合法合规，违法的事可千万不要学。<br><span class="provenance">—— 帅张和他的朋友们</span><br></div><br><div class="ana"><br>　　不要试图去改变一个人的看法，也许他是对的，也许你是对的，但是为了让对方屈服于自己的观点，而发生争吵就是浪费时间。<br>　　这些看法不论对错，对你、对他很多时候也不会有什么影响，如果试图去说服别人的时候先想想为什么要说服他？说服他有什么好处？如果不是闲的蛋疼就去做点其他事吧，也省得会生气。<br>　　不说服别人，事一样可以做。<br><span class="provenance">—— 帅张和他的朋友们</span><br></div><br><div class="ana"><br>　　一条正常的陈述句，下面网友的评论结尾如果带着问好，大概率是个杠精。比如“要你这么说…那”。<br><span class="provenance">—— 互联网消息</span><br></div><br><div class="ana"><br>　　我觉得书籍是精神的慰藉，如果说只读技术相关，工作相关，认知相关的书籍的话，你的物质世界会越来越丰富，而精神世界却没有那么丰富。<br>　　然而如果这两者无法平衡的话，其实每个人还是无法幸福，带着目的地读书我接受，不带目的地读书我也接受，因为读书总是让我们越来越好，身体和灵魂，始终在路上。<br><span class="provenance">—— 帅张和他的朋友们</span><br></div><h3 id="2-案例拆解"><a href="#2-案例拆解" class="headerlink" title="2. 案例拆解"></a><span style="font-size: 18px;">2. 案例拆解</span></h3><style type="text/css">    .ana {      color:#888;      background-color: #f8f8f8;      padding: 0 1.5em;      font-family: 'Roboto', sans-serif;      text-indent: 35px;    }    .provenance {      display: block;      text-align: right;      padding-top: 0.5em;    }</style>]]></content>
      
      
      <categories>
          
          <category> 诗和远方 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript模块化编程</title>
      <link href="/blogs/javascript-module.html"/>
      <url>/blogs/javascript-module.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">JavaScript模块化编程</div><blockquote><p>扒一扒JavaScript模块化的历史，彻底搞清楚JavaScript中的require、import和export。</p></blockquote><h2 id="一、什么是模块化"><a href="#一、什么是模块化" class="headerlink" title="一、什么是模块化"></a>一、什么是模块化</h2><p>　　在做一些较为复杂的项目时，我们经常会引入一些模块，这些模块里封装了很多现成的“轮子”，在开发时直接使用会比从头开发轻松很多。</p><p>　　所谓模块，就是实现特定功能的一组方法，而模块化是将模块的代码创造自己的作用域，只向外部暴露公开的方法和变量，而这些方法之间高度解耦。</p><p>　　我们要<span style="color: #FF0000;">学习模块化这种思想</span>，因为如果不用模块化编写代码，会有以下问题：<br>　　●　代码杂乱无章，没有条理性，不便于维护，不便于复用<br>　　●　很多代码重复、逻辑重复<br>　　●　全局变量污染<br>　　●　不方便保护私有数据（闭包）</p><p>　　但是，JavaScript本身不是一种模块化编程语言，在ES6以前，它是不支持“类”（class）的，所以也就没有“模块”（module）了。</p><p>　　那么在那个时代开发者们怎么实现模块化的功能呢？下面来扒一扒JavaScript模块化的历史。</p><h2 id="二、命名空间时代"><a href="#二、命名空间时代" class="headerlink" title="二、命名空间时代"></a>二、命名空间时代</h2><p>　　我们知道，在ES6之前，JS是没有块作用域的，私有变量和方法的隔离主要靠函数作用域，公开变量和方法的隔离主要靠对象的属性引用。</p><h3 id="1-封装函数"><a href="#1-封装函数" class="headerlink" title="1. 封装函数"></a><span style="font-size: 18px; color: #27ae60;"><strong>1. 封装函数</strong></span></h3><p>　　在原始社会（最初的时候），<span style="color: #FF0000;">模块就是实现特定功能的一组方法</span>。<br>　　只要把不同的函数（以及记录状态的变量）简单地放在一起，就算是一个模块。<br>　　比如写一个 <code>utils.js</code> 工具函数文件。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">!==</span> <span class="token string">"number"</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> y <span class="token operator">!==</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">!==</span> <span class="token string">"number"</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　上面的函数 <code>add(x, y)</code> 和 <code>square(x)</code> 就组成一个模块。使用的时候，直接调用就行了：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./utils.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">square</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>　　这种做法的缺点很明显：<br>　　●　“污染”了全局变量。<br>　　　　৹　此时的公开函数其实是挂载到了全局对象window下，无法保证不与其他模块发生变量名冲突。<br>　　●　模块成员之间看不出直接关系。</p><h3 id="2-对象写法"><a href="#2-对象写法" class="headerlink" title="2. 对象写法"></a><span style="font-size: 18px; color: #27ae60;"><strong>2. 对象写法</strong></span></h3><p>　　为了解决上面的缺点，可以把模块写成一个对象，所有的模块成员都放到这个对象里面。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mathUtils <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  _count<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  add<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y  <span class="token punctuation">}</span><span class="token punctuation">,</span>  square<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> x  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　上面的函数 <code>add(x, y)</code> 和 <code>square(x)</code> ，都封装在 <code>mathUtils</code> 对象里。使用的时候，就是调用这个对象的属性：</p><pre class=" language-javascript"><code class="language-javascript">mathUtils<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mathUtils<span class="token punctuation">.</span><span class="token function">square</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　这样的写法缺点也很明显：<br>　　●　会暴露所有模块成员，内部状态可以被外部改写。<br>　　　　৹　比如外部代码可以直接改变内部<code>_count</code>的值：<code>mathUtils._count = 1</code></p><h3 id="3-立即执行函数写法"><a href="#3-立即执行函数写法" class="headerlink" title="3. 立即执行函数写法"></a><span style="font-size: 18px; color: #27ae60;"><strong>3. 立即执行函数写法</strong></span></h3><p>　　使用“立即执行函数”（Immediately-Invoked Function Expression，IIFE），创建闭包来封装私有变量，可以达到不暴露私有成员的目的。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 定义</span><span class="token keyword">var</span> mathUtils <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> _count <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    inc<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      _count <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">1</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    dec<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      _count <span class="token operator">+</span><span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 调用</span>mathUtils<span class="token punctuation">.</span><span class="token function">inc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>mathUtils<span class="token punctuation">.</span><span class="token function">dec</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>　　使用上面的写法，外部代码无法读取内部的 <code>_count</code> 变量。</p><pre class=" language-javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span>mathUtils<span class="token punctuation">.</span>_count<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span></code></pre><p>　　那如果模块需要引入其他依赖（比如jQuery）呢？可以这么改写代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> mathUtils <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>$<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> $body <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"body"</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> _count <span class="token operator">=</span> <span class="token number">0</span>  <span class="token keyword">var</span> add <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">var</span> square <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">*</span> x  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    add<span class="token punctuation">:</span> add<span class="token punctuation">,</span>    square<span class="token punctuation">:</span> square  <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>jQuery<span class="token punctuation">)</span></code></pre><p>　　以上封装模块的方式叫作：模块模式。<code>mathUtils</code> 就是一个module，这就是JavaScript模块的基本写法。</p><p>　　事实上在 jQuery 时代，大量使用了模块模式。详情可见我之前博客：<span class="series"><a href="/blogs/javascript-library-packaging-1.html" title="仿jQuery作JS库的封装">《仿jQuery作JS库的封装（系列）》</a></span></p><p>　　这样的缺点是：<br>　　●　jQuery 的插件必须在 <code>jquery.js</code> 文件之后，文件的加载顺序被严格限制住，依赖越多，依赖关系越混乱，越容易出错。<br>　　相信在使用boostrap，layui之类库的时候，大家都踩过坑。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jquery.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>underscore.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utils.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>base.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><h2 id="三、主流模块规范时代"><a href="#三、主流模块规范时代" class="headerlink" title="三、主流模块规范时代"></a>三、主流模块规范时代</h2><p>　　在ES6以前，还没有提出一套官方的规范，从社区和框架推广程度而言，目前通行的JavaScript模块规范有两种：CommonJS 和 AMD。</p><h3 id="1-CommonJS规范"><a href="#1-CommonJS规范" class="headerlink" title="1. CommonJS规范"></a><span style="font-size: 18px; color: #27ae60;"><strong>1. CommonJS规范</strong></span></h3><p><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/nodejs.jpg" alt="Node.js" width="200" hegiht="123" align="left/"><br>　　Nodejs 的出现，让 JavaScript 能够运行在服务端环境中。在当时，前端的复杂程度有限，没有模块也是可以的，但是在服务器端，一定要有模块，与操作系统和其他应用程序互动，否则根本没法编程。此时迫切需要建立一个标准来实现统一的模块系统，也就是后来的 <span style="color: #FF0000;">CommonJS</span>。<br>　　也是基于此，随后在浏览器端（前端），requirejs 和 seajs 之类的工具包也出现了，可以说在对应规范下，require统治了ES6之前的所有模块化编程。</p><p>　　CommonJS 规定每个模块内部，module 代表当前模块，这个模块是一个对象，有 id，filename，loaded，parent，children，exports 等属性，<code>module.exports</code> 属性表示当前模块对外输出的接口，其他文件加载该模块，实际上就是读取 <code>module.exports</code> 变量。<br>　　CommonJS 有一个全局性方法 <code>require()</code>，用于加载模块。</p><p>　　假定有一个工具类模块 <code>utils.js</code>，我们要在 <code>base.js</code> 中使用它里面的方法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 直接赋值给 module.exports 变量</span><span class="token comment" spellcheck="true">// utils.js</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I'm utils.js module"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// base.js</span><span class="token keyword">var</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./utils.js"</span><span class="token punctuation">)</span><span class="token function">util</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// I'm utils.js module</span><span class="token comment" spellcheck="true">// 或者挂载到 module.exports 对象下</span><span class="token comment" spellcheck="true">// utils.js</span>module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I'm utils.js module"</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// base.js</span><span class="token keyword">var</span> util <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./utils.js"</span><span class="token punctuation">)</span>util<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// I'm utils.js module</span></code></pre><p>　　正是由于 CommonJS 使用的 require 方式的推动，才有了后面的AMD、CMD 也采用的 require 方式来引用模块的风格。</p><p>　　扯一个题外话，对node不感兴趣的话可以直接跳过这一段，直接看下一节：<span style="color: #159957;">AMD规范</span>。<br>　　在 CommonJS 中，暴露模块使用 module.exports 和 exports ，很多人不明白暴露对象为什么会有两个，现在我们来看下它们的区别。</p><p>　　为了方便，Node 为每个模块提供一个 exports 自由变量，指向 module.exports。这等同在每个模块头部，有一行这样的命令。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> exports <span class="token operator">=</span> module<span class="token punctuation">.</span>exports</code></pre><p>　　exports 和 module.exports 共享了同个引用地址，如果直接对 exports 赋值会导致两者不再指向同一个内存地址，但最终不会对 module.exports 起效。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// module.exports 可以直接赋值</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">'Hello world'</span>  <span class="token comment" spellcheck="true">// exports 不能直接赋值</span>exports <span class="token operator">=</span> <span class="token string">'Hello world'</span></code></pre><p>　　<strong>CommonJS总结：</strong><br>　　CommonJS 规范加载模块是同步的，用于服务端，由于 CommonJS 会在启动时把内置模块加载到内存中，也会把加载过的模块放在内存中。所以在 Node 环境中用同步加载的方式不会有很大问题。</p><p>　　另外，CommonJS模块加载的是输出值的拷贝。也就是说，外部模块输出值变了，当前模块的导入值不会发生变化。</p><h3 id="2-AMD规范"><a href="#2-AMD规范" class="headerlink" title="2. AMD规范"></a><span style="font-size: 18px; color: #27ae60;"><strong>2. AMD规范</strong></span></h3><p><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/amd_requirejs.jpg" alt="AMD & Require.js" width="200" hegiht="125" align="left/"><br>　　CommonJS 规范的出现，使得 JS 模块化在 NodeJS 环境中得到了施展机会。但 CommonJS 如果应用在浏览器端，同步加载的机制会使得 JS 阻塞 UI 线程，造成页面卡顿。</p><p>　　怎么理解呢，举个例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> math <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'math'</span><span class="token punctuation">)</span>math<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span></code></pre><p>　　对于上述代码，如果在浏览器中运行，必须等第一行代码的math.js加载完成后才会执行第二行代码。也就是说，如果加载时间很长，整个应用就会停在那里等。</p><p>　　这对服务器端不是一个问题，因为所有的模块都存放在本地硬盘，可以同步加载完成，等待时间就是硬盘的读取时间。但是，对于浏览器，这却是一个大问题，因为模块都放在服务器端，等待时间取决于网速的快慢，可能要等很长时间，在此期间浏览器处于“假死”状态。<br>　　因此，浏览器端的模块，不能采用“同步加载”（synchronous），只能采用“异步加载”（asynchronous）。这就是 AMD 规范诞生的背景。</p><p>　　AMD 是“Asynchronous Module Definition”的缩写，意思就是“异步模块定义”。它采用异步方式加载模块，模块的加载不影响它后面语句的运行。所有依赖这个模块的语句，都定义在一个回调函数中，等到加载完成之后，这个回调函数才会运行。</p><p>　　模块必须采用特定的 <code>define()</code> 函数来定义。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">define</span><span class="token punctuation">(</span>id<span class="token operator">?</span><span class="token punctuation">,</span> dependencies<span class="token operator">?</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span></code></pre><p>　　●　id：字符串，模块名称（可选）<br>　　●　dependencies：是我们要载入的依赖模块（可选），使用相对路径，注意是数组格式<br>　　●　factory：工厂方法，返回一个模块函数</p><p>　　如果一个模块不依赖其它模块，那么可以直接定义在 <code>define()</code> 函数之中。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// math.js</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> add <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    add<span class="token punctuation">:</span> add  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>　　如果这个模块还依赖其它模块，那么 <code>define()</code> 函数的第一个参数，必须是一个数组，指明该模块的依赖性。<br>　　比如下面这个模块，当require()函数加载该模块的时候，就会先加载 Lib.js 文件。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"Lib"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>Lib<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    Lib<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    foo<span class="token punctuation">:</span> foo  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>　　AMD 也采用 <code>require()</code> 语句加载模块，但是不同于 CommonJS，它要求两个参数：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span>module<span class="token punctuation">]</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　●　[module]：第一个参数[module]，是一个数组，里面的成员就是要加载的模块<br>　　●　callback：第二个参数callback，则是加载成功之后的回调函数</p><p>　　如果将上面的代码改写成AMD形式，就是下面这样：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">require</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"math"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>math<span class="token punctuation">)</span> <span class="token punctuation">{</span>  math<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>　　<code>math.add()</code> 与 <code>math</code> 模块加载不是同步的，浏览器不会发生假死。所以很显然，AMD比较适合浏览器环境。</p><p>　　<strong>AMD 的特点：</strong><br>　　●　延迟加载<br>　　●　依赖前置</p><p>　　利用模块加载后执行回调的机制，目前，主要有两个JavaScript库实现了AMD规范：<a href="https://requirejs.org/" rel="external nofollow noopener noreferrer" target="_blank">require.js</a>和<a href="http://cujojs.com/" rel="external nofollow noopener noreferrer" target="_blank">cujo.js</a>。</p><h3 id="3-CMD规范"><a href="#3-CMD规范" class="headerlink" title="3. CMD规范"></a><span style="font-size: 18px; color: #27ae60;"><strong>3. CMD规范</strong></span></h3><p><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/seajs.jpg" alt="SeaJS" width="200" hegiht="150" align="left/"><br>　　CMD（Common Module Definition），是 SeaJS 推崇的规范。<br>　　归纳一下它的特点：<br>　　●　CMD 可以认为是 CommonJS 的前端实现<br>　　●　SeaJS 由阿里的（玉帛）编写<br>　　●　SeaJS 在几年前比较火，从去年（可能是2017年）开始已经停止更新</p><p>　　与AMD不同，CMD 则是依赖就近，用的时候再 require。它写起来是这样的：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> clock <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"clock"</span><span class="token punctuation">)</span>  clock<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>　　CMD 与 AMD 一样，也是采用特定的 <code>define()</code> 函数来定义，用 <code>require()</code> 语句加载模块。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">define</span><span class="token punctuation">(</span>id<span class="token operator">?</span><span class="token punctuation">,</span> dependencies<span class="token operator">?</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span></code></pre><p>　　●　id：字符串，模块名称（可选）<br>　　●　dependencies：是我们要载入的依赖模块(可选)，使用相对路径，注意是数组格式<br>　　●　factory：工厂方法，返回一个模块函数</p><p>　　如果一个模块不依赖其它模块，那么可以直接定义在 <code>define()</code> 函数之中。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 模块代码</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　如果这个模块还依赖其它模块：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token function">define</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"jquery"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 模块代码</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　<span style="font-size: 10px; color: #FF0000;">* </span><span style="font-size: 10px; color: #9e9e9e;">注意：带 id 和 dependencies 参数的 define 用法不属于 CMD 规范，而属于 Modules/Transport 规范。</span></p><p>　　<strong>CMD 和 AMD 的区别</strong>：<br>　　AMD 和 CMD 最大的区别是对依赖模块的执行时机处理不同，而不是加载的时机或者方式不同，二者皆为异步加载模块。</p><p>　　AMD 依赖前置，js可以方便知道依赖模块是谁，立即加载。</p><p>　　而 CMD 就近依赖，需要使用把模块变为字符串解析一遍才知道依赖了那些模块，这也是很多人诟病 CMD 的一点，牺牲性能来带来开发的便利性，实际上解析模块用的时间短到可以忽略。</p><p>　　举个例子：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// main.js</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>require<span class="token punctuation">,</span> exports<span class="token punctuation">,</span> module<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I'm main"</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> mod1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./mod1"</span><span class="token punctuation">)</span>  mod1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">var</span> mod2 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"./mod2"</span><span class="token punctuation">)</span>  mod2<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    hello<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"hello main"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// mod1.js</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I'm mod1"</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    say<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"say: I'm mod1"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// mod2.js</span><span class="token function">define</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"I'm mod2"</span><span class="token punctuation">)</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    say<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"say: I'm mod2"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>　　以上代码分别用 require.js 和 sea.js 执行，打印结果如下：<br>　　require.js:（先执行所有依赖中的代码）</p><pre class=" language-bash"><code class="language-bash">I<span class="token string">'m mod1I'</span>m mod2I<span class="token string">'m mainsay: I'</span>m mod1say: I'm mod2</code></pre><p>　　sea.js:（用到依赖时，再执行依赖中的代码）</p><pre class=" language-bash"><code class="language-bash">I<span class="token string">'m mainI'</span>m mod1say: I<span class="token string">'m mod1I'</span>m mod2say: I'm mod2</code></pre><h3 id="4-UMD规范"><a href="#4-UMD规范" class="headerlink" title="4. UMD规范"></a><span style="font-size: 18px; color: #27ae60;"><strong>4. UMD规范</strong></span></h3><p>　　UMD（Universal Module Definition）是 AMD 和 CommonJS 的兼容性处理，提出了跨平台的解决方案。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> factory<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> exports <span class="token operator">===</span> <span class="token string">"object"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// CommonJS</span>    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">"function"</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// AMD</span>    <span class="token function">define</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 挂载到全局</span>    root<span class="token punctuation">.</span>eventUtil <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">function</span> <span class="token function">myFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token punctuation">{</span>    foo<span class="token punctuation">:</span> myFunc  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>　　应用 UMD 规范的 JS 文件其实就是一个立即执行函数，通过检验 JS 环境是否支持 CommonJS 或 AMD 再进行模块化定义。</p><h2 id="四、ES6时代"><a href="#四、ES6时代" class="headerlink" title="四、ES6时代"></a>四、ES6时代</h2><p><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/ecmascript6_modules.jpg" alt="ECMAScript6 Modules" width="573" hegiht="150" align="center/"><br>　　ES6 标准发布后，module 成为标准，标准使用是以 <code>export</code> 指令导出接口，以 <code>import</code> 引入模块，但是在我们一贯的 node 模块中，依然采用的是 CommonJS 规范，使用 <code>require</code> 引入模块，使用 <code>module.exports</code> 导出接口。</p><p>　　下面来看一下 ES6 模块化的写法。</p><h3 id="1-export导出模块"><a href="#1-export导出模块" class="headerlink" title="1. export导出模块"></a><span style="font-size: 18px; color: #27ae60;"><strong>1. export导出模块</strong></span></h3><p>　　export 语法声明用于导出函数、对象、指定文件（或模块）的原始值，如下代码：<br>　　<span style="font-size: 10px; color: #FF0000;">* </span><span style="font-size: 10px; color: #9e9e9e;">注意：在 node 中使用的是 exports ,不要混淆了。</span></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token punctuation">{</span> name1<span class="token punctuation">,</span> name2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> nameN <span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token punctuation">{</span> variable1 <span class="token keyword">as</span> name1<span class="token punctuation">,</span> variable2 <span class="token keyword">as</span> name2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> nameN <span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">let</span> name1<span class="token punctuation">,</span> name2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> nameN <span class="token comment" spellcheck="true">// 也可以使用 var 关键字</span><span class="token keyword">export</span> <span class="token keyword">let</span> name1 <span class="token operator">=</span> …<span class="token punctuation">,</span> name2 <span class="token operator">=</span> …<span class="token punctuation">,</span> …<span class="token punctuation">,</span> nameN <span class="token comment" spellcheck="true">// 也可以使用 var 和 const 关键字</span><span class="token keyword">export</span> <span class="token keyword">default</span> expression<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>…<span class="token punctuation">)</span> <span class="token punctuation">{</span> … <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 也可以是 class，function*</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">name1</span><span class="token punctuation">(</span>…<span class="token punctuation">)</span> <span class="token punctuation">{</span> … <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 也可以是 class，function*</span><span class="token keyword">export</span> <span class="token punctuation">{</span> name1 <span class="token keyword">as</span> <span class="token keyword">default</span><span class="token punctuation">,</span> … <span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> …<span class="token keyword">export</span> <span class="token punctuation">{</span> name1<span class="token punctuation">,</span> name2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> nameN <span class="token punctuation">}</span> <span class="token keyword">from</span> …<span class="token keyword">export</span> <span class="token punctuation">{</span> import1 <span class="token keyword">as</span> name1<span class="token punctuation">,</span> import2 <span class="token keyword">as</span> name2<span class="token punctuation">,</span> …<span class="token punctuation">,</span> nameN <span class="token punctuation">}</span> <span class="token keyword">from</span> …</code></pre><p>　　●　name1… nameN－导出的“标识符”。导出后，可以通过这个“标识符”在另一个模块中使用import引用<br>　　●　default－设置模块的默认导出。设置后import不通过“标识符”而直接引用默认导入，需要注意的是，这时import命令后面，不使用大括号。<br>　　●　* 继承模块并导出继承模块所有的方法和属性<br>　　●　as－重命名导出“标识符”<br>　　●　from－从已经存在的模块、脚本文件…导出</p><p>　　export 有两种模块导出方式：<span style="color: #FF0000;">命名式导出</span>（名称导出）和 <span style="color: #FF0000;">默认导出</span>（定义式导出），命名式导出每个模块可以多个，而默认导出每个模块仅一个。</p><h4 id="a-命名式导出"><a href="#a-命名式导出" class="headerlink" title="a. 命名式导出"></a><span style="font-size: 18px; color: #159957;"><strong>a. 命名式导出</strong></span></h4><p>　　模块可以通过 <code>export</code> 前缀关键词声明导出对象，导出对象可以是多个。这些导出对象用名称进行区分，称之为命名式导出。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token punctuation">{</span> myFunction <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 导出一个已定义的函数</span><span class="token keyword">export</span> <span class="token keyword">const</span> foo <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 导出一个常量</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">multiply</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">}</span></code></pre><p>　　我们可以使用 <code>*</code> 和 <code>from</code> 关键字来实现模块的继承：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">export</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token string">'article'</span></code></pre><p>　　模块导出时，可以指定模块的导出成员。导出成员可以认为是类中的公有对象，而非导出成员可以认为是类中的私有对象：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'文渊博客'</span><span class="token keyword">var</span> domain <span class="token operator">=</span> <span class="token string">'https://www.wenyuanblog.com'</span><span class="token keyword">export</span> <span class="token punctuation">{</span>name<span class="token punctuation">,</span> domain<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 相当于导出{name:name,domain:domain}</span></code></pre><p>　　模块导出时，我们可以使用 <code>as</code> 关键字对导出成员进行重命名：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">'文渊博客'</span><span class="token keyword">var</span> domain <span class="token operator">=</span> <span class="token string">'https://www.wenyuanblog.com'</span><span class="token keyword">export</span> <span class="token punctuation">{</span>name <span class="token keyword">as</span> siteName<span class="token punctuation">,</span> domain<span class="token punctuation">}</span></code></pre><p>　　需要注意的是，通过 命名式导出 的模块，在引入时需要进行结构，也就是说，导出必须是 <code>export {a}</code> 的形式。而且大部分风格都建议，模块中最好<span style="color: #FF0000;">在末尾用一个export导出所有的接口</span>。<br>　　什么意思呢，看一组正反例：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* 错误的代码 - 导出变量 */</span><span class="token keyword">export</span> <span class="token number">1</span> <span class="token comment" spellcheck="true">// export在导出接口的时候，必须与模块内部的变量具有一一对应的关系，直接导出1没有任何意义</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">export</span> a <span class="token comment" spellcheck="true">// 无法完成解构</span><span class="token comment" spellcheck="true">/* 错误的代码 - 导出function */</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">export</span> f <span class="token comment" spellcheck="true">// 报错</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* 正确的写法 - 导出变量 */</span><span class="token keyword">export</span> <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">export</span> <span class="token punctuation">{</span>a<span class="token punctuation">}</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">export</span> <span class="token punctuation">{</span>b <span class="token keyword">as</span> y<span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 正确的写法 - 导出function */</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token punctuation">{</span>f<span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h4 id="b-默认导出"><a href="#b-默认导出" class="headerlink" title="b. 默认导出"></a><span style="font-size: 18px; color: #159957;"><strong>b. 默认导出</strong></span></h4><p>　　使用 <code>import</code> 命令的时候，用户需要知道所要加载的变量名或函数名，否则无法加载。但是，用户肯定希望快速上手，未必愿意通过阅读文档，去了解模块有哪些属性和方法。</p><p>　　为了给用户提供方便，让他们不用阅读文档就能加载模块，就要用到 <code>export default</code>命令，为模块指定默认输出。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// export-default.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><p>　　上面代码是一个模块文件 export-default.js，它的默认输出是一个函数。<br>　　其他模块加载该模块时，<code>import</code> 命令可以为该匿名函数指定任意名字。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// import-default.js</span><span class="token keyword">import</span> customName <span class="token keyword">from</span> <span class="token string">'./export-default'</span><span class="token function">customName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 'foo'</span></code></pre><p>　　上面代码的 <code>import</code> 命令，可以用任意名称指向 export-default.js 输出的方法，这时就不需要知道原模块输出的函数名。需要注意的是，<span style="color: #FF0000;">这时import命令后面，不使用大括号</span>。</p><p>　　<code>export default</code> 命令用在非匿名函数前，也是可以的。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// export-default.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 或者写成</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">default</span> foo</code></pre><p>　　上面代码中，foo函数的函数名foo，在模块外部是无效的。加载的时候，视同匿名函数加载。</p><h4 id="c-命名式导出与默认导出"><a href="#c-命名式导出与默认导出" class="headerlink" title="c. 命名式导出与默认导出"></a><span style="font-size: 18px; color: #159957;"><strong>c. 命名式导出与默认导出</strong></span></h4><p>　　默认导出可以理解为另一种形式的命名导出，默认导出可以认为是使用了default名称的命名导出。<br>　　下面两种导出方式是等价的：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> D <span class="token operator">=</span> <span class="token number">123</span><span class="token keyword">export</span> <span class="token keyword">default</span> D<span class="token keyword">export</span> <span class="token punctuation">{</span> D <span class="token keyword">as</span> <span class="token keyword">default</span> <span class="token punctuation">}</span></code></pre><h4 id="d-export使用示例"><a href="#d-export使用示例" class="headerlink" title="d. export使用示例"></a><span style="font-size: 18px; color: #159957;"><strong>d. export使用示例</strong></span></h4><p>　　使用名称导出一个模块时：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// "my-module.js" 模块</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">cube</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">*</span> x <span class="token operator">*</span> x<span class="token punctuation">}</span><span class="token keyword">const</span> foo <span class="token operator">=</span> Math<span class="token punctuation">.</span>PI <span class="token operator">+</span> Math<span class="token punctuation">.</span>SQRT2<span class="token keyword">export</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span></code></pre><p>　　在另一个模块（脚本文件）中，我们可以像下面这样引用：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span> cube<span class="token punctuation">,</span> foo <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'my-module'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">cube</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 27</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 4.555806215962888</span></code></pre><p>　　使用默认导出一个模块时：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// "my-module.js"模块</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">*</span> x <span class="token operator">*</span> x<span class="token punctuation">}</span></code></pre><p>　　在另一个模块（脚本文件）中，我们可以像下面这样引用，相对名称导出来说使用更为简单：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 引用 "my-module.js"模块</span><span class="token keyword">import</span> cube <span class="token keyword">from</span> <span class="token string">'my-module'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">cube</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 27</span></code></pre><h3 id="2-import引入模块"><a href="#2-import引入模块" class="headerlink" title="2. import引入模块"></a><span style="font-size: 18px; color: #27ae60;"><strong>2. import引入模块</strong></span></h3><p>　　import 语法声明用于从已导出的模块、脚本中导入函数、对象、指定文件（或模块）的原始值，如下代码：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> defaultMember <span class="token keyword">from</span> <span class="token string">"module-name"</span><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> name <span class="token keyword">from</span> <span class="token string">"module-name"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> member <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"module-name"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> member <span class="token keyword">as</span> alias <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"module-name"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> member1 <span class="token punctuation">,</span> member2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"module-name"</span><span class="token keyword">import</span> <span class="token punctuation">{</span> member1 <span class="token punctuation">,</span> member2 <span class="token keyword">as</span> alias2 <span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"module-name"</span><span class="token keyword">import</span> defaultMember<span class="token punctuation">,</span> <span class="token punctuation">{</span> member <span class="token punctuation">[</span> <span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"module-name"</span><span class="token keyword">import</span> defaultMember<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token keyword">as</span> name <span class="token keyword">from</span> <span class="token string">"module-name"</span><span class="token keyword">import</span> <span class="token string">"module-name"</span></code></pre><p>　　●　name－从将要导入模块中收到的导出值的名称<br>　　●　member, memberN－从导出模块，导入指定名称的多个成员<br>　　●　defaultMember－从导出模块，导入默认导出成员<br>　　●　alias, aliasN－别名，对指定导入成员进行的重命名<br>　　●　module-name－要导入的模块。是一个文件名<br>　　●　as－重命名导入成员名称（“标识符”）<br>　　●　from－从已经存在的模块、脚本文件等导入</p><p>　　import 模块导入与 export 模块导出功能相对应，也存在两种模块导入方式：<span style="color: #FF0000;">命名式导入</span>（名称导入）和 <span style="color: #FF0000;">默认导入</span>（定义式导入）。<br>　　import 的语法跟 require 不同，而且 import 必须放在文件的最开始，且前面不允许有其他逻辑代码，这和其他所有编程语言风格一致。</p><h4 id="a-命名式导入"><a href="#a-命名式导入" class="headerlink" title="a. 命名式导入"></a><span style="font-size: 18px; color: #159957;"><strong>a. 命名式导入</strong></span></h4><p>　　我们可以通过指定名称，就是将这些成员插入到当作用域中。导出时，可以导入单个成员或多个成员：<br>　　注意，<span style="color: #FF0000;">花括号里面的变量与 export 后面的变量一一对应</span>。 </p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>myMember<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"my-module"</span><span class="token keyword">import</span> <span class="token punctuation">{</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"my-module"</span></code></pre><p>　　通过 <code>*</code> 符号，我们可以导入模块中的全部属性和方法。当导入模块全部导出内容时，就是将导出模块（’my-module.js’）所有的导出绑定内容，插入到当前模块（’myModule’）的作用域中：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> myModule <span class="token keyword">from</span> <span class="token string">"my-module"</span></code></pre><p>　　导入模块对象时，也可以使用as对导入成员重命名，以方便在当前模块内使用：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>reallyReallyLongModuleMemberName <span class="token keyword">as</span> shortName<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"my-module"</span></code></pre><p>　　导入多个成员时，同样可以使用别名：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">{</span>reallyReallyLongModuleMemberName <span class="token keyword">as</span> shortName<span class="token punctuation">,</span> anotherLongModuleName <span class="token keyword">as</span> short<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"my-module"</span></code></pre><p>　　导入一个模块，但不进行任何绑定（仅仅执行my-module模块，但是不输入任何值）：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token string">"my-module"</span></code></pre><h4 id="b-默认导入"><a href="#b-默认导入" class="headerlink" title="b. 默认导入"></a><span style="font-size: 18px; color: #159957;"><strong>b. 默认导入</strong></span></h4><p>　　在模块导出时，可能会存在默认导出。同样的，在导入时可以使用 <code>import</code> 指令导入这些默认值。<br>　　直接导入默认值：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> myDefault <span class="token keyword">from</span> <span class="token string">"my-module"</span></code></pre><p>　　也可以在命名空间导入和名称导入中，同时使用默认导入：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> myDefault<span class="token punctuation">,</span> <span class="token operator">*</span> <span class="token keyword">as</span> myModule <span class="token keyword">from</span> <span class="token string">"my-module"</span> <span class="token comment" spellcheck="true">// myModule 做为命名空间使用</span></code></pre><p>　　或</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> myDefault<span class="token punctuation">,</span> <span class="token punctuation">{</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"my-module"</span> <span class="token comment" spellcheck="true">// 指定成员导入</span></code></pre><h4 id="c-import使用示例"><a href="#c-import使用示例" class="headerlink" title="c. import使用示例"></a><span style="font-size: 18px; color: #159957;"><strong>c. import使用示例</strong></span></h4><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// file.js</span><span class="token keyword">function</span> <span class="token function">getJSON</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  xhr<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">;</span>  xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span> url<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>  xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getUsefulContents</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token function">getJSON</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> data <span class="token operator">=</span><span class="token operator">></span> <span class="token function">callback</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// main.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span> getUsefulContents <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">"file"</span><span class="token function">getUsefulContents</span><span class="token punctuation">(</span><span class="token string">"http://itbilu.com"</span><span class="token punctuation">,</span> data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token function">doSomethingUseful</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="3-default关键字"><a href="#3-default关键字" class="headerlink" title="3. default关键字"></a><span style="font-size: 18px; color: #27ae60;"><strong>3. default关键字</strong></span></h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// d.js</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>　　等效于：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token punctuation">{</span>a <span class="token keyword">as</span> <span class="token keyword">default</span><span class="token punctuation">}</span></code></pre><p>　　在import的时候，可以这样用：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> a <span class="token keyword">from</span> <span class="token string">'./d'</span><span class="token comment" spellcheck="true">// 等效于，或者说就是下面这种写法的简写，是同一个意思</span><span class="token keyword">import</span> <span class="token punctuation">{</span><span class="token keyword">default</span> <span class="token keyword">as</span> a<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./d'</span></code></pre><p>　　这个语法糖的好处就是 import 的时候，可以省去花括号{}。</p><p>　　简单的说，如果 import 的时候，你发现某个变量没有花括号括起来（没有*号），那么你在脑海中应该把它还原成有花括号的as语法。</p><p>　　所以，下面这种写法你也应该理解了吧：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">import</span> $<span class="token punctuation">,</span><span class="token punctuation">{</span>each<span class="token punctuation">,</span>map<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'jquery'</span><span class="token comment" spellcheck="true">// import后面第一个$是{defalut as $}的替代写法。</span></code></pre><h3 id="4-as关键字"><a href="#4-as关键字" class="headerlink" title="4. as关键字"></a><span style="font-size: 18px; color: #27ae60;"><strong>4. as关键字</strong></span></h3><p>　　as 简单的说就是取一个别名，export 中可以用，import 中其实也可以用：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// a.js</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">export</span> <span class="token punctuation">{</span>a <span class="token keyword">as</span> fun<span class="token punctuation">}</span><span class="token comment" spellcheck="true">// b.js</span><span class="token keyword">import</span> <span class="token punctuation">{</span>fun <span class="token keyword">as</span> a<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'./a'</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>　　上面这段代码，export 的时候，对外提供的接口是 fun，它是 a.js 内部 a 这个函数的别名，但是在模块外面，认不到 a，只能认到 fun。</p><p>　　import 中的 as 就很简单，就是你在使用模块里面的方法的时候，给这个方法取一个别名，好在当前的文件里面使用。之所以是这样，是因为有的时候不同的两个模块可能通过相同的接口，比如有一个 c.js 也通过了 fun 这个接口：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// c.js</span><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>　　如果在 b.js 中同时使用 a 和 c 这两个模块，就必须想办法解决接口重名的问题，as 就解决了。</p><h3 id="5-总结ES6的模块机制"><a href="#5-总结ES6的模块机制" class="headerlink" title="5. 总结ES6的模块机制"></a><span style="font-size: 18px; color: #27ae60;"><strong>5. 总结ES6的模块机制</strong></span></h3><p>　　CommonJS 和 AMD 规范都只能在运行时确定依赖。而 ES6 在语言层面提出了模块化方案, ES6 module 模块编译时就能确定模块的依赖关系，以及输入和输出的变量。ES6 模块化这种加载称为“编译时加载”或者静态加载。</p><p>　　运行机制：JS引擎对脚本静态分析的时候，遇到模块加载命令import，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。原始值变了，import加载的值也会跟着变。因此，ES6 模块是动态引用，并且不会缓存值，模块里面的变量绑定其所在的模块。</p><p>　　另外，在 webpack 对 ES Module 打包的时候， ES Module 会编译成 require/exports 来执行。</p><h2 id="五、全文总结"><a href="#五、全文总结" class="headerlink" title="五、全文总结"></a>五、全文总结</h2><p>　　JavaScript的模块化规范经过了命名空间/模块模式、CommonJS、AMD/CMD、ES6 的演进，利用现在常用的 gulp、webpack 打包工具，非常方便我们编写模块化代码。</p><p>　　掌握这几种模块化规范的区别和联系有助于提高代码的模块化质量，比如，CommonJS 输出的是值拷贝，ES6 Module 在静态代码解析时输出只读接口，AMD 是异步加载，推崇依赖前置；CMD 是依赖就近，延迟执行，在使用到模块时才去加载相应的依赖。</p><p>　　而在当代的三大框架中，vue 、angular、react已经将模块化的思想植入在里面，都集成了各自的模块化；webpack也有模块化的解决方案。</p><p>　　最后给出一张结论图：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/javascript_modules_history.jpg" alt="JavaScript模块化编程"></p><div style="text-align: center;"><a href="/medias/blogimages/javascript_modules_history.jpg" title="JavaScript模块化编程">点击这里查看大图</a></div><p class="reference"><br>参考<br>MDN<br>若干文章<br></p><style type="text/css">    .series a {        text-decoration:none !important;    }</style>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML坐标系与鼠标事件坐标</title>
      <link href="/blogs/html-coordinate-system-and-mouse-event.html"/>
      <url>/blogs/html-coordinate-system-and-mouse-event.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">HTML坐标系与鼠标事件坐标</div><blockquote><p>在开发中处理鼠标事件时，经常会碰到 offset、scroll、client 这几个关键字，每次处理页面元素的坐标和偏移前，都要网上去搜资料，还会踩一些坑，影响开发效率。这里总结一下，一劳永逸。</p></blockquote><h2 id="一、图解HTML的四个坐标系统"><a href="#一、图解HTML的四个坐标系统" class="headerlink" title="一、图解HTML的四个坐标系统"></a>一、图解HTML的四个坐标系统</h2><p>　　HTML有四个常见的坐标系统：screen，page，client和offset，用于描述DOM元素的Box尺寸和MouseEvent中的位置。<br>　　如下图所示：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/html_coordinate_system_height.png" alt="图解html坐标系"></p><p><div style="text-align: center;"><a href="/medias/blogimages/html_coordinate_system_height.png" title="图解html坐标系">点击这里查看大图</a></div><br><span style="font-size: 18px; color:#FF6827;"><strong>1. screen坐标系</strong></span><br>　　参照点：用户显示器屏幕左上角。<br>　　screenX：鼠标点击位置相对于电脑屏幕左上角的水平偏移量。<br>　　screenY：鼠标点击位置相对于电脑屏幕左上角的垂直偏移量。<br>　　screen坐标的最大范围是 (screen.width, screen.height)，最大值不会超过屏幕分辨率。</p><p>　　补充：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// 屏幕宽度。</span>    screen<span class="token punctuation">.</span>width    <span class="token comment" spellcheck="true">// 屏幕高度。</span>    screen<span class="token punctuation">.</span>height    <span class="token comment" spellcheck="true">// 屏幕可用宽度。即屏幕宽度减去左右任务栏后的宽度，可表示为浏览器最大化时的宽度。</span>　　screen<span class="token punctuation">.</span>availWidth    <span class="token comment" spellcheck="true">// 屏幕可用高度。即屏幕高度减去上下任务栏后的高度，可表示为浏览器最大化时的高度。</span>　　screen<span class="token punctuation">.</span>availHeight    <span class="token comment" spellcheck="true">// 任务栏高/宽度。如：任务栏高/宽度 = 屏幕高/宽度 - 屏幕可用高/宽度。</span>　　screen<span class="token punctuation">.</span>height <span class="token operator">-</span> screen<span class="token punctuation">.</span>availHeight</code></pre><p><span style="font-size: 18px; color:#FF6827;"><strong>2. page坐标系</strong></span><br>　　参照点：整个页面的左上角（整个页面的意思就是你整个网页的全部，按照<span style="color:#FF6827;">整个html文档</span>的长度和宽度来计算）。<br>　　pageX：鼠标点击位置相对于网页左上角的水平偏移量，也就是 <span style="color:#FF6827;">clientX + 水平滚动条滚动的距离。</span><br>　　pageY：鼠标点击位置相对于网页左上角的垂直平偏移量，也就是 <span style="color:#FF6827;">clientY + 垂直滚动条滚动的距离。</span><br>　　<span style="font-size: 10px; color: #FF0000;">* </span><span style="font-size: 10px; color: #9e9e9e;">因此，坐标系上某一个元素的pageX/pageY <span style="color:#FF6827;">不会</span> 随着滚动条滚动而改变。</span><br>　　page坐标的最大范围是 (document.body.clientWidth + 垂直滚动条宽度, document.body.clientHeight + 水平滚动条高度)。<br>　　<span style="font-size: 10px; color: #FF0000;">* </span><span style="font-size: 10px; color: #9e9e9e;">比如说网页很宽很长，宽2000px，高3000px，那 pageX/pageY 的最大值就是它们了。</span></p><p>　　补充：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// 浏览器宽度。</span>    window<span class="token punctuation">.</span>outerWidth    <span class="token comment" spellcheck="true">// 浏览器高度。</span>    window<span class="token punctuation">.</span>outerHeight    <span class="token comment" spellcheck="true">// 浏览器内页面可用宽度，此宽度包含了垂直滚动条的宽度(若存在)。可表示为浏览器当前宽度去除浏览器边框后的宽度。</span>　　window<span class="token punctuation">.</span>innerWidth    <span class="token comment" spellcheck="true">// 浏览器内页面可用高度，此高度包含了水平滚动条的高度(若存在)。可表示为浏览器当前高度去除浏览器边框、工具条后的高度。</span>　　window<span class="token punctuation">.</span>innerHeight    <span class="token comment" spellcheck="true">// 工具栏高/宽度，包含了地址栏、书签栏、浏览器边框等范围。如：工具栏高度 = 浏览器高度 - 页面可用高度。</span>　　window<span class="token punctuation">.</span>outerHeight <span class="token operator">-</span> window<span class="token punctuation">.</span>innerHeight</code></pre><p><span style="font-size: 18px; color:#FF6827;"><strong>3. client</strong></span><br>　　参照点：浏览器内容区域左上角（即浏览器中<span style="color:#FF6827;">用户所看到区域</span>的左上角，内容区域不包括工具栏和滚动条）。<br>　　clientX：鼠标点击位置相对于浏览器可视区域的水平偏移量（不会计算水平滚动的距离）。<br>　　clientY：鼠标点击位置相对于浏览器可视区域的垂直偏移量（不会计算垂直滚动的距离）。<br>　　<span style="font-size: 10px; color: #FF0000;">* </span><span style="font-size: 10px; color: #9e9e9e;">因此，坐标系上某一个元素的clientX/clientY <span style="color:#FF6827;">会</span> 随着滚动条滚动而改变。</span><br>　　client坐标的最大范围是 (window.innerWidth - 垂直滚动条宽度, window.innerHeight - 水平滚动条高度)。<br>　　<span style="font-size: 10px; color: #FF0000;">* </span><span style="font-size: 10px; color: #9e9e9e;">计算这个坐标时，由于是基于浏览器窗口中用来显示网页的可视区域，那么也就是说需要拖动滚动条才能看到的区域不算；当你将浏览器窗口缩小时，clientX/clientY 的最大值也会缩小，但始终，它们的最大值不会超过你浏览器可视区域。</span></p><p>　　补充：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// body展示的宽度，表示body在浏览器内显示的区域宽度。</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientWidth    <span class="token comment" spellcheck="true">// body展示的高度，表示body在浏览器内显示的区域高度。</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>clientHeight</code></pre><p><span style="font-size: 18px; color:#FF6827;"><strong>4. offset</strong></span><br>　　参照点：父级中最近的一个带有CSS定位（position为absolute/relative）的父元素，如果当前元素的父级元素中没有进行CSS定位，那么就是body。<br>　　offsetX：鼠标点击位置相对于触发事件对象的水平距离。<br>　　offsetY：鼠标点击位置相对于触发事件对象的垂直距离。<br>　　offset坐标的最大范围是 (document.body.offsetWidth, document.body.offsetHeight)。</p><p>　　补充：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// body总宽度。</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>offsetWidth    <span class="token comment" spellcheck="true">// body总高度。</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>offsetHeight</code></pre><h2 id="二、图解鼠标事件坐标"><a href="#二、图解鼠标事件坐标" class="headerlink" title="二、图解鼠标事件坐标"></a>二、图解鼠标事件坐标</h2><p>　　鼠标事件都是在特定位置发生的，我们可以通过event事件对象的各种属性来获得事件发生的坐标位置。<br>　　常见的鼠标事件有下面这几种：<br><span style="font-size: 18px; color:#FF6827;"><strong>1. onclick</strong></span><br>　　鼠标点击事件</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">let</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#element-id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  el<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p><span style="font-size: 18px; color:#FF6827;"><strong>2. onmousedown</strong></span><br>　　鼠标按下事件</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">let</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#element-id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  el<span class="token punctuation">.</span>onmousedown <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p><span style="font-size: 18px; color:#FF6827;"><strong>3. onmouseup</strong></span><br>　　鼠标松开事件</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">let</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#element-id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  el<span class="token punctuation">.</span>onmouseup <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p><span style="font-size: 18px; color:#FF6827;"><strong>4. onmousemove</strong></span><br>　　鼠标移动事件</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">let</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#element-id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  el<span class="token punctuation">.</span>onmousemove <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p><span style="font-size: 18px; color:#FF6827;"><strong>5. onmouseover</strong></span><br>　　鼠标经过事件</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">let</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#element-id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  el<span class="token punctuation">.</span>onmouseover <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p><span style="font-size: 18px; color:#FF6827;"><strong>6. onmouseout</strong></span><br>　　鼠标划出事件</p><pre class=" language-javascript"><code class="language-javascript">  <span class="token keyword">let</span> el <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#element-id'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  el<span class="token punctuation">.</span>onmouseout <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>  <span class="token punctuation">}</span></code></pre><p>　　根据以上打印的e的信息，大致为：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/mouse_event_console.png" alt="鼠标点击打印的MouseEvent信息"></p><p><div style="text-align: center;"><a href="/medias/blogimages/mouse_event_console.png" title="鼠标点击打印的MouseEvent信息">点击这里查看大图</a></div><br>　　由鼠标事件（MouseEvent）可以发现：其中包含了许多的坐标，且每个坐标的含义都不一样。下面我们来挨个介绍常用的坐标，以及它们的含义。<br>　　如图所示，假设页面中灰色圆点是鼠标点击处，棕色区域是鼠标触发事件对象。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/html_coordinate_system _event_position.png" alt="图解鼠标事件坐标"></p><p><div style="text-align: center;"><a href="/medias/blogimages/html_coordinate_system _event_position.png" title="图解鼠标事件坐标">点击这里查看大图</a></div><br>　　结合前面的图，我们可以看到：e.x，e.y分别和e.clientX，e.clientY相等。</p><p>　　事实上，<span style="color: #FF6827;">e.layerX/e.layerY 与 e.x/e.y 这两个属性比较特殊</span>。<strong>考虑到它们不那么常见</strong>（因为受浏览器种类影响），<strong>而且使用时需要考虑的情况相对复杂</strong>（layerX/layerY对于absolute绝对定位元素，参考点是当前点击元素的左上角；对于relative相对定位元素，通常与pageX/pageY的值是相同的），<strong>这里不展开讨论</strong>（实用主义，感兴趣的可以单独拎出来尝试）。</p><h2 id="三、不同浏览器对这些属性的支持"><a href="#三、不同浏览器对这些属性的支持" class="headerlink" title="三、不同浏览器对这些属性的支持"></a>三、不同浏览器对这些属性的支持</h2><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">Chrome</th><th style="text-align:center">Firefox</th><th style="text-align:center">IE8 -</th><th style="text-align:center">IE9</th><th style="text-align:center">IE10 +</th></tr></thead><tbody><tr><td style="text-align:center">offsetX</td><td style="text-align:center"><span style="color: #27ae60;">√</span></td><td style="text-align:center"><span style="color: #FF6827;">×</span></td><td style="text-align:center"><span style="color: #27ae60;">√</span></td><td style="text-align:center"><span style="color: #27ae60;">√</span></td><td style="text-align:center"><span style="color: #27ae60;">√</span></td></tr><tr><td style="text-align:center">clientX</td><td style="text-align:center"><span style="color: #27ae60;">√</span></td><td style="text-align:center"><span style="color: #27ae60;">√</span></td><td style="text-align:center"><span style="color: #27ae60;">√</span></td><td style="text-align:center"><span style="color: #27ae60;">√</span></td><td style="text-align:center"><span style="color: #27ae60;">√</span></td></tr><tr><td style="text-align:center">pageX</td><td style="text-align:center"><span style="color: #27ae60;">√</span></td><td style="text-align:center"><span style="color: #27ae60;">√</span></td><td style="text-align:center"><span style="color: #FF6827;">×</span></td><td style="text-align:center"><span style="color: #27ae60;">√</span></td><td style="text-align:center"><span style="color: #27ae60;">√</span></td></tr><tr><td style="text-align:center">screenX</td><td style="text-align:center"><span style="color: #27ae60;">√</span></td><td style="text-align:center"><span style="color: #27ae60;">√</span></td><td style="text-align:center"><span style="color: #27ae60;">√</span></td><td style="text-align:center"><span style="color: #27ae60;">√</span></td><td style="text-align:center"><span style="color: #27ae60;">√</span></td></tr><tr><td style="text-align:center">layerX</td><td style="text-align:center"><span style="color: #27ae60;">√</span></td><td style="text-align:center"><span style="color: #27ae60;">√</span></td><td style="text-align:center"><span style="color: #FF6827;">×</span></td><td style="text-align:center"><span style="color: #27ae60;">√</span></td><td style="text-align:center"><span style="color: #27ae60;">√</span></td></tr><tr><td style="text-align:center">x</td><td style="text-align:center"><span style="color: #27ae60;">√</span></td><td style="text-align:center"><span style="color: #FF6827;">×</span></td><td style="text-align:center"><span style="color: #27ae60;">√</span></td><td style="text-align:center"><span style="color: #27ae60;">√</span></td><td style="text-align:center"><span style="color: #27ae60;">√</span></td></tr></tbody></table><p>　　上面列举的这些浏览器都在不断迭代版本，而且市面上还有很多其它浏览器，所以这部分内容需要实时参考MDN上的<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MouseEvent/offsetX#Browser_compatibility" title="浏览器兼容性表格" rel="external nofollow noopener noreferrer" target="_blank">浏览器兼容性表格</a>。</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>　　上面那些属性都是很容易搞混的，常用的记在这里方便以后速查。一些特殊的属性尤其要注意不同的浏览器中可能存在的差别，使用的时候测试一下就能更准确的应用了。</p><p>　　整理这篇文章的契机，就是我在编写cceditor这个项目的时候。</p><p>　　如有异议，可以在留言区评论，或直接发送您宝贵的意见至我的邮箱。</p><p class="reference"><br>参考<br>MDN<br>若干文章<br></p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最全跨域问题解决方案</title>
      <link href="/blogs/ajax-cross-domain-solution.html"/>
      <url>/blogs/ajax-cross-domain-solution.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">最全跨域问题解决方案</div><blockquote><p>详细解释什么是跨域，总结各种解决跨域问题的有效方案。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　随着前后端分离模式的渐渐普及，前后端数据交互经常会碰到请求跨域，本文详细解释什么是跨域，并总结了各种有效的解决方案。</p><h2 id="一、什么是跨域"><a href="#一、什么是跨域" class="headerlink" title="一、什么是跨域"></a>一、什么是跨域</h2><h3 id="1-什么是同源策略及其限制内容"><a href="#1-什么是同源策略及其限制内容" class="headerlink" title="1. 什么是同源策略及其限制内容"></a><span style="font-size: 18px;">1. 什么是同源策略及其限制内容</span></h3><p>　　同源策略是一种约定，它是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到XSS、CSRF等攻击。所谓同源是指”协议+域名+端口”三者相同，即便两个不同的域名指向同一个ip地址，也非同源。<br>　　一个域名地址的组成如下图所示：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/url_items.png" alt="url_items.png"></p><p>　　同源策略限制的内容有：<br>　　●　Cookie、LocalStorage、IndexedDB 等存储性内容<br>　　●　DOM 节点<br>　　●　AJAX 请求发送后，结果被浏览器拦截了</p><h3 id="2-常见跨域场景"><a href="#2-常见跨域场景" class="headerlink" title="2. 常见跨域场景"></a><span style="font-size: 18px;">2. 常见跨域场景</span></h3><p>　　<span style="color: #FF0000;">当协议、子域名、主域名、端口号中任意一个不相同时，都算作不同域。</span>不同域之间相互请求资源，就算作“跨域”。<br>　　常见跨域场景如下图所示：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/cross_domain_condition.png" alt="cross_domain_condition.png"><br>　　特别说明两点：<br>　　① <strong>如果是协议和端口造成的跨域问题“前端”是无能为力的。</strong><br>　　② <strong>在跨域问题上，仅仅是通过“URL的首部”来识别而不会根据域名对应的IP地址是否相同来判断。“URL的首部”可以理解为“协议、域名和端口必须匹配”。</strong></p><p>　　这里你或许有个疑问：<strong>请求跨域了，那么请求到底发出去没有？</strong><br>　　<span style="color: #FF0000;">跨域并不是请求发不出去，请求能发出去，服务端能收到请求并正常返回结果，只是结果被浏览器拦截了。</span>你可能会疑问明明通过表单的方式可以发起跨域请求，为什么 Ajax 就不会?因为归根结底，跨域是为了阻止用户读取到另一个域名下的内容，Ajax 可以获取响应，浏览器认为这不安全，所以拦截了响应。但是表单并不会获取新的内容，所以可以发起跨域请求。同时也说明了跨域并不能完全阻止 CSRF，因为请求毕竟是发出去了。</p><h2 id="二、跨域解决方案"><a href="#二、跨域解决方案" class="headerlink" title="二、跨域解决方案"></a>二、跨域解决方案</h2><h3 id="1-JSONP"><a href="#1-JSONP" class="headerlink" title="1. JSONP "></a><span style="font-size: 18px;">1. JSONP </span></h3><h4 id="1-JSONP原理"><a href="#1-JSONP原理" class="headerlink" title="1) JSONP原理"></a><span style="font-size: 16px;">1) JSONP原理</span></h4><p>　　利用 <code>&lt;script&gt;</code> 标签没有跨域限制的漏洞，网页可以得到从其他来源动态产生的 JSON 数据。JSONP请求一定需要对方的服务器做支持才可以。</p><h4 id="2-JSONP和AJAX对比"><a href="#2-JSONP和AJAX对比" class="headerlink" title="2) JSONP和AJAX对比"></a><span style="font-size: 16px;">2) JSONP和AJAX对比</span></h4><p>　　JSONP和AJAX相同，都是客户端向服务器端发送请求，从服务器端获取数据的方式。但AJAX属于同源策略，JSONP属于非同源策略（跨域请求）</p><h4 id="3-JSONP优缺点"><a href="#3-JSONP优缺点" class="headerlink" title="3) JSONP优缺点"></a><span style="font-size: 16px;">3) JSONP优缺点</span></h4><p>　　JSONP优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。<span style="color: #FF0000;">缺点是仅支持get方法具有局限性，不安全可能会遭受XSS攻击。</span></p><h4 id="4-JSONP的实现流程"><a href="#4-JSONP的实现流程" class="headerlink" title="4) JSONP的实现流程"></a><span style="font-size: 16px;">4) JSONP的实现流程</span></h4><p>　　●　声明一个回调函数，其函数名（如show）当做参数值，要传递给跨域请求数据的服务器，函数形参为要获取目标数据（服务器返回的data）。<br>　　●　创建一个 <code>&lt;script&gt;</code> 标签，把那个跨域的API数据接口地址，赋值给script的src，还要在这个地址中向服务器传递该函数名（可以通过问号传参:?callback=show）。<br>　　●　服务器接收到请求后，需要进行特殊的处理：把传递进来的函数名和它需要给你的数据拼接成一个字符串,例如：传递进去的函数名是show，它准备好的数据是 show(‘我不爱你’)。<br>　　●　最后服务器把准备的数据通过HTTP协议返回给客户端，客户端再调用执行之前声明的回调函数（show），对返回的数据进行操作。<br>　　在开发中可能会遇到多个 JSONP 请求的回调函数名是相同的，这时候就需要自己封装一个 JSONP函数。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// index.html</span><span class="token keyword">function</span> <span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token punctuation">{</span> url<span class="token punctuation">,</span> params<span class="token punctuation">,</span> callback <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">let</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span>    window<span class="token punctuation">[</span>callback<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">removeChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span>    <span class="token punctuation">}</span>    params <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>params<span class="token punctuation">,</span> callback <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">// wd=b&amp;callback=show</span>    <span class="token keyword">let</span> arrs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> params<span class="token punctuation">)</span> <span class="token punctuation">{</span>      arrs<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>key<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>params<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    script<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>url<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>arrs<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token function">jsonp</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  url<span class="token punctuation">:</span> <span class="token string">'http://localhost:3000/say'</span><span class="token punctuation">,</span>  params<span class="token punctuation">:</span> <span class="token punctuation">{</span> wd<span class="token punctuation">:</span> <span class="token string">'Iloveyou'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>  callback<span class="token punctuation">:</span> <span class="token string">'show'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>data <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>　　上面这段代码相当于向 <a href="http://localhost:3000/say?wd=Iloveyou&amp;callback=show" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:3000/say?wd=Iloveyou&amp;callback=show</a> 这个地址请求数据，然后后台返回 show(‘我不爱你’)，最后会运行show()这个函数，打印出’我不爱你’</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// server.js</span><span class="token keyword">let</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/say'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> <span class="token punctuation">{</span> wd<span class="token punctuation">,</span> callback <span class="token punctuation">}</span> <span class="token operator">=</span> req<span class="token punctuation">.</span>query  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>wd<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// Iloveyou</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// show</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>callback<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">('我不爱你')`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span></code></pre><h4 id="5-jQuery的jsonp形式"><a href="#5-jQuery的jsonp形式" class="headerlink" title="5) jQuery的jsonp形式"></a><span style="font-size: 16px;">5) jQuery的jsonp形式</span></h4><p>　　JSONP都是GET和异步请求的，不存在其他的请求方式和同步请求，且jQuery默认就会给JSONP的请求清除缓存。</p><pre class=" language-javascript"><code class="language-javascript">$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>url<span class="token punctuation">:</span><span class="token string">"http://crossdomain.com/jsonServerResponse"</span><span class="token punctuation">,</span>dataType<span class="token punctuation">:</span><span class="token string">"jsonp"</span><span class="token punctuation">,</span>type<span class="token punctuation">:</span><span class="token string">"get"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 可以省略</span>jsonpCallback<span class="token punctuation">:</span><span class="token string">"show"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 自定义传递给服务器的函数名，而不是使用jQuery自动生成的，可省略</span>jsonp<span class="token punctuation">:</span><span class="token string">"callback"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 把传递函数名的那个形参callback，可省略</span>success<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-CORS"><a href="#2-CORS" class="headerlink" title="2. CORS"></a><span style="font-size: 18px;">2. CORS</span></h3><p>　　<span style="color: #FF0000;">CORS 需要浏览器和后端同时支持。IE 8 和 9 需要通过 XDomainRequest 来实现。</span><br>　　浏览器会自动进行 CORS 通信，实现 CORS 通信的关键是后端。只要后端实现了 CORS，就实现了跨域。<br>　　服务端设置 Access-Control-Allow-Origin 就可以开启 CORS。 该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源。<br>　　虽然设置 CORS 和前端没什么关系，但是通过这种方式解决跨域问题的话，会在发送请求时出现两种情况，分别为<span style="color: #FF0000;">简单请求</span>和<span style="color: #FF0000;">复杂请求</span>。</p><h4 id="1-简单请求"><a href="#1-简单请求" class="headerlink" title="1) 简单请求"></a><span style="font-size: 16px;">1) 简单请求</span></h4><p>　　只要同时满足以下两大条件，就属于简单请求：<br>　　条件1：使用下列方法之一：<br>　　●　GET<br>　　●　HEAD<br>　　●　POST<br>　　条件2：Content-Type 的值仅限于下列三者之一：<br>　　●　text/plain<br>　　●　multipart/form-data<br>　　●　application/x-www-form-urlencoded<br>　　请求中的任意 XMLHttpRequestUpload 对象均没有注册任何事件监听器； XMLHttpRequestUpload 对象可以使用 XMLHttpRequest.upload 属性访问。</p><h4 id="2-复杂请求"><a href="#2-复杂请求" class="headerlink" title="2) 复杂请求"></a><span style="font-size: 16px;">2) 复杂请求</span></h4><p>　　不符合以上条件的请求就肯定是复杂请求了。<br>　　复杂请求的CORS请求，会在正式通信之前，增加一次HTTP查询请求，称为”预检”请求，该请求是 option 方法的，通过该请求来知道服务端是否允许跨域请求。<br>　　我们用 <span style="color: #FF0000;">PUT</span> 向后台请求时，属于复杂请求，后台需做如下配置：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 允许哪个方法访问我</span>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Methods'</span><span class="token punctuation">,</span> <span class="token string">'PUT'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 预检的存活时间</span>res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Max-Age'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// OPTIONS请求不做任何处理</span><span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'OPTIONS'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 定义后台返回的内容</span>app<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'/getData'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'我不爱你'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>　　接下来我们看下一个完整复杂请求的例子，并且介绍下CORS请求相关的字段。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// index.html</span><span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token string">'name=xiamen'</span>  <span class="token comment" spellcheck="true">// cookie不能跨域</span>xhr<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span>  <span class="token comment" spellcheck="true">// 前端设置是否带cookie</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'PUT'</span><span class="token punctuation">,</span> <span class="token string">'http://localhost:4000/getData'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'xiamen'</span><span class="token punctuation">)</span>xhr<span class="token punctuation">.</span>onreadystatechange <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>readyState <span class="token operator">===</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>status <span class="token operator">>=</span> <span class="token number">200</span> <span class="token operator">&amp;&amp;</span> xhr<span class="token punctuation">.</span>status <span class="token operator">&lt;</span> <span class="token number">300</span><span class="token punctuation">)</span> <span class="token operator">||</span> xhr<span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token number">304</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span>response<span class="token punctuation">)</span>      <span class="token comment" spellcheck="true">// 得到响应头，后台需设置Access-Control-Expose-Headers</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>xhr<span class="token punctuation">.</span><span class="token function">getResponseHeader</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// server1.js</span><span class="token keyword">let</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// server2.js</span><span class="token keyword">let</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">let</span> whitList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://localhost:3000'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">//设置白名单</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">let</span> origin <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>origin  <span class="token keyword">if</span> <span class="token punctuation">(</span>whitList<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 设置哪个源可以访问我</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">,</span> origin<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 允许携带哪个头访问我</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Headers'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 允许哪个方法访问我</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Methods'</span><span class="token punctuation">,</span> <span class="token string">'PUT'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 允许携带cookie</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Allow-Credentials'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 预检的存活时间</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Max-Age'</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 允许返回的头</span>    res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'Access-Control-Expose-Headers'</span><span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">===</span> <span class="token string">'OPTIONS'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// OPTIONS请求不做任何处理</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>  <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">'/getData'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'jw'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//返回一个响应头，后台需设置</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'我不爱你'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">'/getData'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">)</span>  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'我不爱你'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>express<span class="token punctuation">.</span><span class="token keyword">static</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">)</span><span class="token punctuation">)</span>app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">)</span></code></pre><p>　　上述代码由 <a href="http://localhost:3000/index.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:3000/index.html</a> 向 <a href="http://localhost:4000/" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:4000/</a> 跨域请求，正如我们上面所说的，后端是实现 CORS 通信的关键。</p><h3 id="3-postMessage"><a href="#3-postMessage" class="headerlink" title="3. postMessage"></a><span style="font-size: 18px;">3. postMessage</span></h3><p>　　postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：<br>　　●　页面和其打开的新窗口的数据传递<br>　　●　多窗口之间消息传递<br>　　●　页面与嵌套的iframe消息传递<br>　　●　上面三个场景的跨域数据传递<br>　　<span style="color: #FF0000;">postMessage()方法允许来自不同源的脚本采用异步方式进行有限的通信，可以实现跨文本档、多窗口、跨域消息传递。</span></p><blockquote><p>otherWindow.postMessage(message, targetOrigin, [transfer]);　　</p></blockquote><p>　　●　message: 将要发送到其他 window的数据。<br>　　●　targetOrigin:通过窗口的origin属性来指定哪些窗口能接收到消息事件，其值可以是字符串”*”（表示无限制）或者一个URI。在发送消息的时候，如果目标窗口的协议、主机地址或端口这三者的任意一项不匹配targetOrigin提供的值，那么消息就不会被发送；只有三者完全匹配，消息才会被发送。<br>　　●　transfer(可选)：是一串和message 同时传递的 Transferable 对象. 这些对象的所有权将被转移给消息的接收方，而发送一方将不再保有所有权。<br>　　接下来我们看个例子： <a href="http://localhost:3000/a.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:3000/a.html</a> 页面向 <a href="http://localhost:4000/b.html" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:4000/b.html</a> 传递“我爱你”，然后后者传回“我不爱你”。</p><pre class=" language-html"><code class="language-html">// a.html  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://localhost:4000/b.html<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>frame<span class="token punctuation">"</span></span> <span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>load()<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>  // 等它加载完触发一个事件  // 内嵌在http://localhost:3000/a.html    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      <span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> frame <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'frame'</span><span class="token punctuation">)</span>        frame<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">'我爱你'</span><span class="token punctuation">,</span> <span class="token string">'http://localhost:4000'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 发送数据</span>        window<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 接受返回数据</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 我不爱你</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// b.html</span>  window<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 我爱你</span>    e<span class="token punctuation">.</span>source<span class="token punctuation">.</span><span class="token function">postMessage</span><span class="token punctuation">(</span><span class="token string">'我不爱你'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>origin<span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre><h3 id="4-websocket"><a href="#4-websocket" class="headerlink" title="4. websocket"></a><span style="font-size: 18px;">4. websocket</span></h3><p>　　Websocket是HTML5的一个持久化的协议，它实现了浏览器与服务器的全双工通信，同时也是跨域的一种解决方案。WebSocket和HTTP都是应用层协议，都基于 TCP 协议。<span style="color: #FF0000;">但是 WebSocket 是一种双向通信协议，在建立连接之后，WebSocket 的 server 与 client 都能主动向对方发送或接收数据。</span>同时，WebSocket 在建立连接时需要借助 HTTP 协议，连接建立好了之后 client 与 server 之间的双向通信就与 HTTP 无关了。<br>　　原生WebSocket API使用起来不太方便，我们使用 <span style="color: #FF0000;">Socket.io</span>，它很好地封装了webSocket接口，提供了更简单、灵活的接口，也对不支持webSocket的浏览器提供了向下兼容。<br>　　我们先来看个例子：本地文件socket.html向 localhost:3000 发送数据和接收数据。</p><pre class=" language-html"><code class="language-html">// socket.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">let</span> socket <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://localhost:3000'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    socket<span class="token punctuation">.</span>onopen <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      socket<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'我爱你'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//向服务器发送数据</span>    <span class="token punctuation">}</span>    socket<span class="token punctuation">.</span>onmessage <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//接收服务器返回的数据</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// server.js</span><span class="token keyword">let</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">let</span> WebSocket <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ws'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 记得安装ws</span><span class="token keyword">let</span> wss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket<span class="token punctuation">.</span>Server</span><span class="token punctuation">(</span><span class="token punctuation">{</span>port<span class="token punctuation">:</span><span class="token number">3000</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>wss<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'connection'</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>ws<span class="token punctuation">)</span> <span class="token punctuation">{</span>  ws<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'message'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    ws<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">'我不爱你'</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="5-Node中间件代理（两次跨域）"><a href="#5-Node中间件代理（两次跨域）" class="headerlink" title="5. Node中间件代理（两次跨域）"></a><span style="font-size: 18px;">5. Node中间件代理（两次跨域）</span></h3><p>　　实现原理：<span style="color: #FF0000;">同源策略是浏览器需要遵循的标准，而如果是服务器向服务器请求就无需遵循同源策略。</span>代理服务器，需要做以下几个步骤：<br>　　●　接受客户端请求。<br>　　●　将请求转发给服务器。<br>　　●　拿到服务器响应数据。<br>　　●　将响应转发给客户端。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/cross_domain_twice.png" alt="cross_domain_twice.png"><br>　　我们先来看个例子：本地文件index.html文件，通过代理服务器 <a href="http://localhost:3000" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:3000</a> 向目标服务器 <a href="http://localhost:4000" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:4000</a> 请求数据。</p><pre class=" language-html"><code class="language-html">// index.html(http://127.0.0.1:5500) <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">      $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        url<span class="token punctuation">:</span> <span class="token string">'http://localhost:3000'</span><span class="token punctuation">,</span>        type<span class="token punctuation">:</span> <span class="token string">'post'</span><span class="token punctuation">,</span>        data<span class="token punctuation">:</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">'xiamen'</span><span class="token punctuation">,</span> password<span class="token punctuation">:</span> <span class="token string">'123456'</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>        contentType<span class="token punctuation">:</span> <span class="token string">'application/json;charset=utf-8'</span><span class="token punctuation">,</span>        success<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// {"title":"fontend","password":"123456"}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        error<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span>     </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// server1.js 代理服务器(http://localhost:3000)</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 第一步：接受客户端请求</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 代理服务器，直接和浏览器直接交互，需要设置CORS 的首部字段</span>  response<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>    <span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">:</span> <span class="token string">'*'</span><span class="token punctuation">,</span>    <span class="token string">'Access-Control-Allow-Methods'</span><span class="token punctuation">:</span> <span class="token string">'*'</span><span class="token punctuation">,</span>    <span class="token string">'Access-Control-Allow-Headers'</span><span class="token punctuation">:</span> <span class="token string">'Content-Type'</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 第二步：将请求转发给服务器</span>  <span class="token keyword">const</span> proxyRequest <span class="token operator">=</span> http    <span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>      <span class="token punctuation">{</span>        host<span class="token punctuation">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>        port<span class="token punctuation">:</span> <span class="token number">4000</span><span class="token punctuation">,</span>        url<span class="token punctuation">:</span> <span class="token string">'/'</span><span class="token punctuation">,</span>        method<span class="token punctuation">:</span> request<span class="token punctuation">.</span>method<span class="token punctuation">,</span>        headers<span class="token punctuation">:</span> request<span class="token punctuation">.</span>headers      <span class="token punctuation">}</span><span class="token punctuation">,</span>      serverResponse <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 第三步：收到服务器的响应</span>        <span class="token keyword">var</span> body <span class="token operator">=</span> <span class="token string">''</span>        serverResponse<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> chunk <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          body <span class="token operator">+</span><span class="token operator">=</span> chunk        <span class="token punctuation">}</span><span class="token punctuation">)</span>        serverResponse<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>          console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The data is '</span> <span class="token operator">+</span> body<span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">// 第四步：将响应结果转发给浏览器</span>          response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>      <span class="token punctuation">}</span>    <span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The proxyServer is running at http://localhost:3000'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// server2.js(http://localhost:4000)</span><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">const</span> data <span class="token operator">=</span> <span class="token punctuation">{</span> title<span class="token punctuation">:</span> <span class="token string">'fontend'</span><span class="token punctuation">,</span> password<span class="token punctuation">:</span> <span class="token string">'123456'</span> <span class="token punctuation">}</span><span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>url <span class="token operator">===</span> <span class="token string">'/'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    response<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">4000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'The server is running at http://localhost:4000'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>　　上述代码经过两次跨域，值得注意的是浏览器向代理服务器发送请求，也遵循同源策略，最后在index.html文件打印出{“title”:”fontend”,”password”:”123456”}</p><h3 id="6-nginx反向代理"><a href="#6-nginx反向代理" class="headerlink" title="6. nginx反向代理"></a><span style="font-size: 18px;">6. nginx反向代理</span></h3><p>　　实现原理类似于Node中间件代理，需要你搭建一个中转nginx服务器，用于转发请求。<br>　　使用nginx反向代理实现跨域，是最简单的跨域方式。只需要修改nginx的配置即可解决跨域问题，支持所有浏览器，支持session，不需要修改任何代码，并且不会影响服务器性能。<br>　　实现思路：通过nginx配置一个代理服务器（域名与domain1相同，端口不同）做跳板机，反向代理访问domain2接口，并且可以顺便修改cookie中domain信息，方便当前域cookie写入，实现跨域登录。<br>　　先下载nginx，然后将nginx目录下的nginx.conf修改如下：</p><pre class=" language-bash"><code class="language-bash">// proxy服务器server <span class="token punctuation">{</span>    listen       80<span class="token punctuation">;</span>    server_name  www.domain1.com<span class="token punctuation">;</span>    location / <span class="token punctuation">{</span>        proxy_pass   http://www.domain2.com:8080<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 反向代理</span>        proxy_cookie_domain www.domain2.com www.domain1.com<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 修改cookie里域名</span>        index  index.html index.htm<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># 当用webpack-dev-server等中间件代理接口访问nignx时，此时无浏览器参与，故没有同源限制，下面的跨域配置可不启用</span>        add_header Access-Control-Allow-Origin http://www.domain1.com<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 当前端只跨域不带cookie时，可为*</span>        add_header Access-Control-Allow-Credentials <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　最后重启nginx。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// index.html</span><span class="token keyword">var</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 前端开关：浏览器是否读写cookie</span>xhr<span class="token punctuation">.</span>withCredentials <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 访问nginx中的代理服务器</span>xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'get'</span><span class="token punctuation">,</span> <span class="token string">'http://www.domain1.com:81/?user=admin'</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// server.js</span><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> qs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'querystring'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'request'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> params <span class="token operator">=</span> qs<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 向前台写cookie</span>    res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>        <span class="token string">'Set-Cookie'</span><span class="token punctuation">:</span> <span class="token string">'l=a123456;Path=/;Domain=www.domain2.com;HttpOnly'</span>   <span class="token comment" spellcheck="true">// HttpOnly:脚本无法读取</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>params<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token string">'8080'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Server is running at port 8080...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="7-window-name-iframe"><a href="#7-window-name-iframe" class="headerlink" title="7. window.name + iframe"></a><span style="font-size: 18px;">7. window.name + iframe</span></h3><p>　　window.name属性的独特之处：name值在不同的页面（甚至不同域名）加载后依旧存在，并且可以支持非常长的 name 值（2MB）。<br>　　其中a.html和b.html是同域的，都是 <a href="http://localhost:3000" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:3000</a> ；而c.html是 <a href="http://localhost:4000" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:4000</a></p><pre class=" language-html"><code class="language-html">// a.html(http://localhost:3000/b.html)  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://localhost:4000/c.html<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>load()<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>iframe<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">let</span> first <span class="token operator">=</span> <span class="token boolean">true</span>    <span class="token comment" spellcheck="true">// onload事件会触发2次，第1次加载跨域页，并留存数据于window.name</span>    <span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 第1次onload(跨域页)成功后，切换到同域代理页面</span>        <span class="token keyword">let</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://localhost:3000/b.html'</span><span class="token punctuation">;</span>        first <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 第2次onload(同域b.html页)成功后，读取同域window.name中数据</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>iframe<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>　　b.html为中间代理页，与a.html同域，内容为空。</p><pre class=" language-html"><code class="language-html">// c.html(http://localhost:4000/c.html)  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    window<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">'我不爱你'</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>　　总结：通过iframe的src属性由外域转向本地域，跨域数据即由iframe的window.name从外域传递到本地域。这个就巧妙地绕过了浏览器的跨域访问限制，但同时它又是安全操作。</p><h3 id="8-location-hash-iframe"><a href="#8-location-hash-iframe" class="headerlink" title="8. location.hash + iframe"></a><span style="font-size: 18px;">8. location.hash + iframe</span></h3><p>　　实现原理：a.html欲与c.html跨域相互通信，通过中间页b.html来实现。三个页面，不同域之间利用iframe的location.hash传值，相同域之间直接js访问来通信。<br>　　具体实现步骤：一开始a.html给c.html传一个hash值，然后c.html收到hash值后，再把hash值传递给b.html，最后b.html将结果放到a.html的hash值中。<br>　　同样的，a.html和b.html是同域的，都是 <a href="http://localhost:3000" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:3000</a> ;而c.html是 <a href="http://localhost:4000" rel="external nofollow noopener noreferrer" target="_blank">http://localhost:4000</a></p><pre class=" language-html"><code class="language-html">// a.html  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://localhost:4000/c.html#iloveyou<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    window<span class="token punctuation">.</span>onhashchange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//检测hash的变化</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html">// b.html  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    window<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>parent<span class="token punctuation">.</span>location<span class="token punctuation">.</span>hash <span class="token operator">=</span> location<span class="token punctuation">.</span>hash     <span class="token comment" spellcheck="true">//b.html将结果放到a.html的hash值中，b.html可通过parent.parent访问a.html页面</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// c.html</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>location<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">let</span> iframe <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'iframe'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  iframe<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://localhost:3000/b.html#idontloveyou'</span><span class="token punctuation">;</span>  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>iframe<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="9-document-domain-iframe"><a href="#9-document-domain-iframe" class="headerlink" title="9. document.domain + iframe"></a><span style="font-size: 18px;">9. document.domain + iframe</span></h3><p>　　该方式只能用于二级域名相同的情况下，比如 a.test.com 和 b.test.com 适用于该方式。<br>　　只需要给页面添加 document.domain =’test.com’ 表示二级域名都相同就可以实现跨域。<br>　　实现原理：两个页面都通过js强制设置document.domain为基础主域，就实现了同域。<br>　　我们看个例子：页面 a.zf1.cn:3000/a.html 获取页面 b.zf1.cn:3000/b.html 中a的值。</p><pre class=" language-html"><code class="language-html">// a.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> helloa  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>iframe</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://b.zf1.cn:3000/b.html<span class="token punctuation">"</span></span> <span class="token attr-name">frameborder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">onload</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>load()<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>frame<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>iframe</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    document<span class="token punctuation">.</span>domain <span class="token operator">=</span> <span class="token string">'zf1.cn'</span>    <span class="token keyword">function</span> <span class="token function">load</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>frame<span class="token punctuation">.</span>contentWindow<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><pre class=" language-html"><code class="language-html">// b.html<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>   hellob   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">     document<span class="token punctuation">.</span>domain <span class="token operator">=</span> <span class="token string">'zf1.cn'</span>     <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>   </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></code></pre><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>　　●　CORS支持所有类型的HTTP请求，是跨域HTTP请求的根本解决方案。<br>　　●　JSONP只支持GET请求，JSONP的优势在于支持老式浏览器，以及可以向不支持CORS的网站请求数据。<br>　　●　不管是Node中间件代理还是nginx反向代理，主要是通过同源策略对服务器不加限制。<br>　　●　日常工作中，用得比较多的跨域方案是cors和nginx反向代理。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>命令行测试WebSocket</title>
      <link href="/blogs/websocket-testing-by-command-in-linux.html"/>
      <url>/blogs/websocket-testing-by-command-in-linux.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">使用命令测试WebSocket</div><blockquote><p>Linux环境下，分别使用curl和wscat命令测试websocket连接。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　有时候我们需要从后台验证WebSocket连接是否正常，判断防火墙是否开通，反向代理是否配置正确等。我一般用下面两种方式进行快速简单的测试。</p><h2 id="一、使用wscat测试WebSocket连接是否正常"><a href="#一、使用wscat测试WebSocket连接是否正常" class="headerlink" title="一、使用wscat测试WebSocket连接是否正常"></a>一、使用wscat测试WebSocket连接是否正常</h2><p>　　wscat是一个用来连接websocket的命令行工具，nodejs开发的。<br>　　故需要先使用npm安装，然后执行一下即可：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g wscatwscat -c ws://echo.websocket.org</code></pre><p>　　正常情况下输出如下：</p><pre class=" language-bash"><code class="language-bash">connected <span class="token punctuation">(</span>press CTRL+C to quit<span class="token punctuation">)</span></code></pre><p><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/test_websocket_by_wscat.jpg" alt="test_websocket_by_wscat.jpg"></p><h2 id="二、使用curl测试WebSocket连接是否正常"><a href="#二、使用curl测试WebSocket连接是否正常" class="headerlink" title="二、使用curl测试WebSocket连接是否正常"></a>二、使用curl测试WebSocket连接是否正常</h2><p>　　curl-websocket.sh</p><pre class=" language-bash"><code class="language-bash">curl --include \     --no-buffer \     --header <span class="token string">"Connection: Upgrade"</span> \     --header <span class="token string">"Upgrade: websocket"</span> \     --header <span class="token string">"Host: echo.websocket.org"</span> \     --header <span class="token string">"Origin: https://echo.websocket.org"</span> \     --header <span class="token string">"Sec-WebSocket-Key: NVwjmQUcWCenfWu98asDmg=="</span> \     --header <span class="token string">"Sec-WebSocket-Version: 13"</span> \     http://echo.websocket.org</code></pre><p>　　注意这里不需要特定的密钥（Sec-WebSocket-Key），所以随便取一个都可以。该头文件的作用是防止缓存websocket请求。<br>　　正常情况下输出如下：</p><pre class=" language-bash"><code class="language-bash">HTTP/1.1 101 Web Socket Protocol HandshakeAccess-Control-Allow-Credentials: <span class="token boolean">true</span>Access-Control-Allow-Headers: content-typeAccess-Control-Allow-Headers: authorizationAccess-Control-Allow-Headers: x-websocket-extensionsAccess-Control-Allow-Headers: x-websocket-versionAccess-Control-Allow-Headers: x-websocket-protocolAccess-Control-Allow-Origin: https://echo.websocket.orgConnection: UpgradeDate: Tue, 09 Apr 2019 09:57:52 GMTSec-WebSocket-Accept: oPhRcOTYgRvrC0D+cTPcN3XYC1k<span class="token operator">=</span>Server: Kaazing GatewayUpgrade: websocket</code></pre><p><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/test_websocket_by_curl.jpg" alt="test_websocket_by_curl.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> WebSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web实时消息推送技术总结</title>
      <link href="/blogs/realtime-messaging-and-websocket.html"/>
      <url>/blogs/realtime-messaging-and-websocket.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">Web实时消息推送技术总结</div><blockquote><p>通过轮询、长轮询、iframe流和WebSocket等多种方式实现网页消息的实时推送功能。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　消息推送（Push），是指从服务端实时发送信息到客户端，最早诞生于 Email 中，用于提醒新的消息，想必大家都不陌生。<br>　　随着互联网技术的发展，很多网站和移动端应用开始追求用户体验，所以消息推送技术得到了更广泛的应用，常见的有：新闻客户端的热点新闻推荐，IM 工具的聊天消息提醒，电商产品促销信息，企业应用的通知和审批流程等等。<br>　　通过一些学习和了解，下面我主要总结下几种常用的网页消息推送技术。<br>　　针对这几个技术实现，我写过几个很简单的Demo，见 <a href="https://github.com/winyuan/py_websocket.git" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/winyuan/py_websocket.git</a></p><h2 id="一、双向通信"><a href="#一、双向通信" class="headerlink" title="一、双向通信"></a>一、双向通信</h2><p>　　HTTP 协议有一个特点：被动性。<br>　　何为被动性呢，其实就是，服务端不能主动联系客户端，只能由客户端发起。<br>　　举例来说，我们想获得某个数据，就得是客户端（如浏览器）向服务器发出请求，服务器返回查询结果。HTTP 协议做不到服务器主动向客户端推送信息，比如收到新邮件的提示。这种单向请求的特点，注定了如果服务器有连续的状态变化，客户端要获知就非常麻烦。<br>　　在WebSocket协议之前，有三种实现双向通信的方式：轮询（polling）、长轮询（long-polling）和iframe流（streaming）。</p><h3 id="1-轮询（polling）"><a href="#1-轮询（polling）" class="headerlink" title="1. 轮询（polling）"></a><span style="font-size: 18px;">1. 轮询（polling）</span></h3><p>　　轮询的原理非常简单，让浏览器隔个几秒就发送一次请求，询问服务器是否有新信息。<br>　　用大白话举例就是：<br>　　<span style="color: #27ae60;">while True:</span><br>　　　　<span style="color: #9e9e9e;">客户端：妹子，请你吃饭有空吗？</span><span style="color: #FF0000;">（Request）</span><br>　　　　<span style="color: #9e9e9e;">服务端：没有！</span><span style="color: #FF0000;">（Response）</span><br>　　　　<span style="color: #9e9e9e;">客户端：妹子，请你吃饭有空吗？</span><span style="color: #FF0000;">（Request）</span><br>　　　　<span style="color: #9e9e9e;">服务端：没有。。</span><span style="color: #FF0000;">（Response）</span><br>　　　　<span style="color: #9e9e9e;">客户端：妹子，请你吃饭有空吗？</span><span style="color: #FF0000;">（Request）</span><br>　　　　<span style="color: #9e9e9e;">服务端：你好烦啊，没有啊。。</span><span style="color: #FF0000;">（Response）</span><br>　　　　<span style="color: #9e9e9e;">客户端：妹子，请你吃饭有空吗？</span><span style="color: #FF0000;">（Request）</span><br>　　　　<span style="color: #9e9e9e;">服务端：好啦好啦，有啦。</span><span style="color: #FF0000;">（Response）</span><br>　　　　<span style="color: #9e9e9e;">客户端：妹子，请你吃饭有空吗？</span><span style="color: #FF0000;">（Request）</span><br>　　　　<span style="color: #9e9e9e;">服务端：。。。。。没。。。。没。。。没有</span><span style="color: #FF0000;">（Response）</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/polling.jpg" alt="polling.jpg"><br>　　可以看到，使用轮询的方式，客户端和服务器之间会一直进行连接，每隔一段时间就询问一次。其缺点也很明显：连接数会很多，一个接受，一个发送。而且每次发送请求都会有Http的Header，会很耗流量，也会消耗CPU的利用率。</p><ul><li>优点：实现简单，无需做过多的更改</li><li>缺点：轮询的间隔过长，会导致用户不能及时接收到更新的数据；轮询的间隔过短，会导致查询请求过多，增加服务器端的负担</li></ul><h3 id="2-长轮询（long-polling）"><a href="#2-长轮询（long-polling）" class="headerlink" title="2. 长轮询（long-polling）"></a><span style="font-size: 18px;">2. 长轮询（long-polling）</span></h3><p>　　长轮询其实原理跟轮询差不多，都是采用轮询的方式，不过采取的是阻塞模型（一直打电话，没收到就不挂电话），也就是说，客户端发起连接后，如果没消息，就一直不返回Response给客户端。直到有消息才返回，返回完之后，客户端再次建立连接，周而复始。<br>　　还是用大白话举例：<br>　　<span style="color: #27ae60;">while True:</span><br>　　　　<span style="color: #9e9e9e;">客户端：妹子，请你吃饭有空吗？没有的话就等有了再返回给我吧！</span><span style="color: #FF0000;">（Request）</span><br>　　　　<span style="color: #9e9e9e;">服务端：（额。。现在好忙，先不回复他，电话先不挂。）</span><br>　　　　<span style="color: #9e9e9e;">服务端：现在有空了。</span><span style="color: #FF0000;">（Response）</span><br>　　　　<span style="color: #9e9e9e;">客户端：妹子，请你吃饭有空吗？没有的话就等有了再返回给我吧！</span><span style="color: #FF0000;">（Request）</span><br>　　　　<span style="color: #9e9e9e;">服务端：（额。。现在好忙，先不回复他，电话先不挂。）</span><br>　　　　<span style="color: #9e9e9e;">服务端：现在有空了。</span><span style="color: #FF0000;">（Response）</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/long_polling.jpg" alt="long_polling.jpg"><br>　　本质上，长轮询是对轮询的改进版，客户端发送HTTP给服务器之后，看有没有新消息，如果没有新消息，就一直等待。当有新消息的时候，才会返回给客户端。在某种程度上减小了网络带宽和CPU利用率等问题。由于http数据包的头部数据量往往很大（通常有400多个字节），但是真正被服务器需要的数据却很少（有时只有10个字节左右），这样的数据包在网络上周期性的传输，难免对网络带宽是一种浪费。</p><ul><li>优点：比 polling 做了优化，有较好的时效性</li><li>缺点：保持连接会消耗资源；服务器没有返回有效数据，程序超时。</li></ul><h3 id="3-iframe流（streaming）"><a href="#3-iframe流（streaming）" class="headerlink" title="3. iframe流（streaming）"></a><span style="font-size: 18px;">3. iframe流（streaming）</span></h3><p>　　iframe流的服务器开销很大，而且IE、Chrome等浏览器一直会处于loading状态。这里先大致看下实现原理。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/iframe_streaming.jpg" alt="iframe_streaming.jpg"><br>　　iframe流方式是在页面中插入一个隐藏的iframe，利用其src属性在服务器和客户端之间创建一条长连接，服务器向iframe传输数据（通常是HTML，内有负责插入信息的javascript），来实时更新页面。</p><ul><li>优点：消息能够实时到达；浏览器兼容好</li><li>缺点：服务器维护一个长连接会增加开销；IE、chrome、Firefox会显示加载没有完成，图标会不停旋转。</li></ul><p>　　从上面很容易看出来，不管怎么样，这几种都是非常消耗资源的。<br>　　轮询（polling）需要服务器有很快的处理速度和资源。<br>　　长轮询（long-polling）需要有很高的并发。<br>　　所以它们都有可能发生这种情况：<br>　　<span style="color: #27ae60;">while True:</span><br>　　　　<span style="color: #9e9e9e;">客户端：妹子，请你吃饭有空吗？</span><span style="color: #FF0000;">（Request）</span><br>　　　　<span style="color: #9e9e9e;">服务端：您好，您所拨打的用户正在通话中，请稍后再拨。</span><span style="color: #FF0000;">（503 Server Unavailable）</span><br>　　　　<span style="color: #9e9e9e;">客户端：妹子，请你吃饭有空吗？</span><span style="color: #FF0000;">（Request）</span><br>　　　　<span style="color: #9e9e9e;">服务端：您好，您所拨打的用户正在通话中，请稍后再拨。</span><span style="color: #FF0000;">（503 Server Unavailable）</span><br>　　　　<span style="color: #9e9e9e;">服务端忙的要死：（我要更多的资源，资源。。。）</span></p><h2 id="二、WebSocket"><a href="#二、WebSocket" class="headerlink" title="二、WebSocket"></a>二、WebSocket</h2><p>　　通过上面这个例子，我们可以看出，这些都不是最好的方式，需要很多资源。<br>　　轮询需要更快的速度，长轮询需要更多的“手机”，iframe流我没有实际用过，但显然也不好。它们都会导致“手机”的需求越来越高。<br>　　于是，我们再次总结下 HTTP 的两个短板：</p><ul><li>被动性<br>　　服务端不能主动联系客户端，只能由客户端发起。</li><li>无状态协议<br>　　对于事务处理没有记忆能力。通俗的说就是，服务器因为每天要接待太多客户了，是个健忘鬼，你一挂电话，她就把你的东西全忘光了，把你的东西全丢掉了。你第二次还得再告诉服务器一遍。</li></ul><p>　　<strong>所以在这种情况下出现了，WebSocket出现了。</strong><br>　　他解决了HTTP的这几个难题。<br>　　首先，被动性，当服务器完成协议升级后（HTTP→WebSocket），服务端就可以主动推送信息给客户端啦。所以上面的情景可以做如下修改：<br>　　<span style="color: #9e9e9e;">客户端：我要建立WebSocket协议，需要的服务：chat，WebSocket协议版本：17</span><span style="color: #FF0000;">（HTTP Request）</span><br>　　<span style="color: #9e9e9e;">服务端：ok，确认，已升级为WebSocket协议</span><span style="color: #FF0000;">（HTTP Protocols Switched）</span><br>　　<span style="color: #9e9e9e;">客户端：你有事的时候记得要找我噢！</span><br>　　<span style="color: #9e9e9e;">服务端：ok，有事的时候会找你的。</span><br>　　<span style="color: #9e9e9e;">服务端：我想吃炸鸡了。</span><br>　　<span style="color: #9e9e9e;">服务端：我想喝奶茶了。</span><br>　　<span style="color: #9e9e9e;">服务端：我不开心了。</span><br>　　<span style="color: #9e9e9e;">服务端：balabalabalabala。。。</span></p><p>　　就变成了这样，只需要经过一次HTTP请求，就可以做到源源不断的信息传送了。<br>　　这样的协议解决了上面同步有延迟，而且还非常消耗资源的这种情况。那么为什么他会解决服务器上消耗资源的问题呢？<br>　　<span style="color: #FF0000;">下面开始举个啰嗦的例子：</span><br>　　一般生产环境我们所用的程序是要经过两层代理的，即HTTP协议在Nginx等服务器的解析下，然后再传送给相应的Handler（Python等）来处理。<br>　　简单地说，我们有一个非常快速的接线员（Nginx），他负责把问题转交给相应的客服（Handler）。本身接线员基本上速度是足够的，但是每次都卡在客服（Handler）了，老有客服处理速度太慢，导致客服不够。<br>　　WebSocket就解决了这样一个难题，建立后，可以直接跟接线员建立持久连接，有信息的时候客服想办法通知接线员，然后接线员在统一转交给客户。<br>　　这样就可以解决客服处理速度过慢的问题了。<br>　　同时，在传统的方式上，要不断的建立，关闭HTTP协议，由于HTTP是非状态性的，每次都要重新传输identity info（鉴别信息），来告诉服务端你是谁。<br>　　虽然接线员很快速，但是每次都要听这么一堆，效率也会有所下降的，同时还得不断把这些信息转交给客服，不但浪费客服的处理时间，而且还会在网路传输中消耗过多的流量/时间。<br>　　但是WebSocket只需要一次HTTP握手，所以说整个通讯过程是建立在一次连接/状态中，也就避免了HTTP的非状态性，服务端会一直知道你的信息，直到你关闭请求，这样就解决了接线员要反复解析HTTP协议，还要查看identity info的信息。<br>　　同时由客户主动询问，转换为服务器（推送）有信息的时候就发送（当然客户端还是等主动发送信息过来的。。），没有信息的时候就交给接线员（Nginx），不需要占用本身速度就慢的客服（Handler）了。</p><h3 id="1-WebSocket的概念"><a href="#1-WebSocket的概念" class="headerlink" title="1. WebSocket的概念"></a><span style="font-size: 18px;">1. WebSocket的概念</span></h3><p>　　<span style="color: #FF0000;">啰嗦了一大段话后，重新梳理下WebSocket的概念。</span><br>　　WebSocket是HTML5出的东西（协议），也就是说HTTP协议没有变化，或者说没关系，但HTTP是不支持持久连接的（长连接，循环连接的不算）。<br>　　首先HTTP有 1.1 和 1.0 之说，也就是所谓的keep-alive，把多个HTTP请求合并为一个，但是WebSocket其实是一个新协议，跟HTTP协议基本没有关系，只是为了兼容现有浏览器的握手规范而已，也就是说它是HTTP协议上的一种补充，可以理解为：WebSocket和HTTP之间有交集，但是并不是全部。<br>　　另外HTML5是指的一系列新的API，或者说新规范，新技术。HTML协议本身只有1.0和1.1，而且跟HTML本身没有直接关系。。通俗来说，你可以用HTTP协议传输非Html数据，再简单来说，层级不一样。<br>　　关于WebSocket更进一步的内容，我会再另外整理，篇幅限制，这里就不多写了。</p><h3 id="2-WebSocket的特点"><a href="#2-WebSocket的特点" class="headerlink" title="2. WebSocket的特点"></a><span style="font-size: 18px;">2. WebSocket的特点</span></h3><ul><li>支持双向通信，实时性更强</li><li>可以发送文本，也可以发送二进制数据</li><li>减少通信量：只要建立起WebSocket连接，就希望一直保持连接状态。和HTTP相比，不但每次连接时的总开销减少，而且由于WebSocket的首部信息很小，通信量也相应减少了<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/websocket.jpg" alt="websocket.jpg"><br>　　相对于传统的HTTP每次请求-应答都需要客户端与服务端建立连接的模式，WebSocket是类似Socket的TCP长连接的通讯模式，一旦WebSocket连接建立后，后续数据都以帧序列的形式传输。在客户端断开WebSocket连接或Server端断掉连接前，不需要客户端和服务端重新发起连接请求。<br>　　<strong>在海量并发和客户端与服务器交互负载流量大的情况下，极大的节省了网络带宽资源的消耗，有明显的性能优势，且客户端发送和接受消息是在同一个持久连接上发起，实时性优势明显。</strong></li></ul><h2 id="三、Web实时消息推送技术的比较"><a href="#三、Web实时消息推送技术的比较" class="headerlink" title="三、Web实时消息推送技术的比较"></a>三、Web实时消息推送技术的比较</h2><table><thead><tr><th style="text-align:center">方式</th><th style="text-align:center">类型</th><th style="text-align:center">技术实现</th><th style="text-align:center">优点</th><th style="text-align:center">缺点</th><th style="text-align:center">试用场景</th></tr></thead><tbody><tr><td style="text-align:center">轮询（polling）</td><td style="text-align:center">client→server</td><td style="text-align:center">客户端循环请求</td><td style="text-align:center">1.实现简单 2.支持跨域</td><td style="text-align:center">1.浪费带宽和服务器资源 2.一次请求信息大半是无用（完整http头信息） 3.有延迟 4.大部分无效请求</td><td style="text-align:center">适于小型应用</td></tr><tr><td style="text-align:center">长轮询（long-polling）</td><td style="text-align:center">client→server</td><td style="text-align:center">服务器hold住连接，一直到有数据或者超时才返回，减少重复请求次数</td><td style="text-align:center">1.实现简单 2.不会频繁发请求 3.节省流量 4.延迟低</td><td style="text-align:center">1.服务器hold住连接，会消耗资源 2.一次请求信息大半是无用</td><td style="text-align:center">WebQQ、Hi网页版、Facebook IM</td></tr><tr><td style="text-align:center">iframe流</td><td style="text-align:center">client→server</td><td style="text-align:center">在页面里嵌入一个隐蔵iframe，将这个iframe的src属性设为对一个长连接的请求，服务器端就能源源不断地往客户端输入数据。</td><td style="text-align:center">1.数据实时送达 2.不发无用请求，一次链接，多次“推送”</td><td style="text-align:center">1.服务器增加开销 2.无法准确知道连接状态 3.IE、Chrome等一直会处于loading状态</td><td style="text-align:center">Gmail聊天</td></tr><tr><td style="text-align:center">WebSocket</td><td style="text-align:center">client⇌server</td><td style="text-align:center">new WebSocket()</td><td style="text-align:center">1.支持双向通信，实时性更强 2.可发送二进制文件 3.减少通信量</td><td style="text-align:center">1.浏览器支持程度不一致 2.不支持断开重连</td><td style="text-align:center">网络游戏、银行交互和支付</td></tr></tbody></table><p>　　综上所述：Websocket协议不仅解决了HTTP协议中服务端的被动性，即通信只能由客户端发起，也解决了数据同步有延迟的问题，同时还带来了明显的性能优势，所以WebSocket是Web实时消息推送技术的比较理想的方案，但如果要兼容低版本浏览器，可以考虑用轮询来实现。</p><p>　　<strong>以上几种技术的代码实现，我写过几个很简单的Demo，见</strong> <a href="https://github.com/winyuan/py_websocket.git" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/winyuan/py_websocket.git</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> WebSocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>各种浏览器存储方式总结</title>
      <link href="/blogs/learn-more-about-browser-storage.html"/>
      <url>/blogs/learn-more-about-browser-storage.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">各种浏览器存储方式总结</div><blockquote><p>总结cookie、localStorage、sessionStorage、indexedDB这几种浏览器存储方式的差异和优缺点。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　近年来，随着浏览器存储技术的提升，出现了多种前端存储方式。比如：cookie、localStorage、sessionStorage、indexedDB。<br>　　对于前三种方式想必大家耳熟能详，因为cookie、localStorage、sessionStorage都属于js语言的本地存贮，而indexedDB则是一种前端存储数据库。<br>　　这篇文章会分别介绍这四种方式，以及他们之间的差异和优缺点。</p><h2 id="一、cookie"><a href="#一、cookie" class="headerlink" title="一、cookie"></a>一、cookie</h2><h3 id="1-什么是cookie"><a href="#1-什么是cookie" class="headerlink" title="1. 什么是cookie"></a><span style="font-size: 18px;">1. 什么是cookie</span></h3><p>　　cookie以“键值对”的形式存在，是一些数据，存储于你电脑上的文本文件中。<br>　　当web服务器向浏览器发送web页面时，在连接关闭后，服务端不会记录用户的信息，而cookie的作用就是用于解决“如何记录客户端的用户信息”：<br>　　当用户访问web页面时，他的名字可以记录在cookie中。在用户下一次访问该网站时，可以在cookie中读取用户访问记录。比如，下次访问同一网站时，用户不必输入用户名和密码就已经登录了（排除用户手动删除cookie情况）。<br>　　大致原理如下图所示：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/cookie.png" alt="cookie.png"></p><h3 id="2-cookie的用法"><a href="#2-cookie的用法" class="headerlink" title="2. cookie的用法"></a><span style="font-size: 18px;">2. cookie的用法</span></h3><p>　　将cookie的增删改查封装一下，如下：</p><pre class=" language-javascript"><code class="language-javascript"> <span class="token comment" spellcheck="true">// 添加cookie</span><span class="token keyword">function</span> <span class="token function">setCookie</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> iDay<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> oDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    oDate<span class="token punctuation">.</span><span class="token function">setDate</span><span class="token punctuation">(</span>oDate<span class="token punctuation">.</span><span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> iDay<span class="token punctuation">)</span><span class="token punctuation">;</span>    document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> key <span class="token operator">+</span> <span class="token string">'='</span> <span class="token operator">+</span> value <span class="token operator">+</span> <span class="token string">';expires='</span> <span class="token operator">+</span> oDate<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 删除cookie</span><span class="token keyword">function</span> <span class="token function">removeCookie</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">setCookie</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//这里只需要把Cookie保质期退回一天便可以删除</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 获取cookie</span><span class="token keyword">function</span> <span class="token function">getCookie</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> cookieArr <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'; '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cookieArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> arr <span class="token operator">=</span> cookieArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>具体用法可参见<a href="https://www.runoob.com/js/js-cookies.html" title="菜鸟教程" rel="external nofollow noopener noreferrer" target="_blank">Cookie详解</a></p><h3 id="3-cookie的缺陷"><a href="#3-cookie的缺陷" class="headerlink" title="3. cookie的缺陷"></a><span style="font-size: 18px;">3. cookie的缺陷</span></h3><ul><li>每个cookie的大小限制为4KB（每一个name=value为一个cookie），每个站点最多存放20个cookie，每个浏览器一般只允许存放300个cookie。</li><li>过多的cookie会带来巨大的性能浪费，因为cookie是紧跟域名的，同一个域名下的所有请求，都会携带cookie。（可以通过存储静态文件的CDN的域名和主站的域名分开来解决）</li><li>在http请求中的cookie是明文传递的，所以有安全性问题，除非用https。</li></ul><h3 id="4-cookie的典型应用场景"><a href="#4-cookie的典型应用场景" class="headerlink" title="4. cookie的典型应用场景"></a><span style="font-size: 18px;">4. cookie的典型应用场景</span></h3><ul><li>记住密码，下次自动登录。</li><li>购物车功能。</li><li>记录用户浏览数据，进行商品（广告）推荐。</li></ul><h2 id="二、localStorage"><a href="#二、localStorage" class="headerlink" title="二、localStorage"></a>二、localStorage</h2><h3 id="1-什么是localStorage"><a href="#1-什么是localStorage" class="headerlink" title="1. 什么是localStorage"></a><span style="font-size: 18px;">1. 什么是localStorage</span></h3><p>　　localStorage保存的数据，以“键值对”的形式长期存在。也就是说，每一项数据都有一个键名和对应的值，所有的数据都是以文本格式保存。保存的数据没有过期时间，直到手动去除。<br>　　localStorage可以作为浏览器本地缓存方案，用来提升网页首屏渲染速度（第一次请求返回时，将一些不变信息直接存储在本地）</p><h3 id="2-localStorage的用法"><a href="#2-localStorage的用法" class="headerlink" title="2. localStorage的用法"></a><span style="font-size: 18px;">2. localStorage的用法</span></h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 存储</span>localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"lastname"</span><span class="token punctuation">,</span> <span class="token string">"Smith"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 检索</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"lastname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>具体用法可参见<a href="https://www.runoob.com/jsref/obj-storage.html" title="菜鸟教程" rel="external nofollow noopener noreferrer" target="_blank">JavaScript 存储对象</a></p><h3 id="3-localStorage的特点"><a href="#3-localStorage的特点" class="headerlink" title="3. localStorage的特点"></a><span style="font-size: 18px;">3. localStorage的特点</span></h3><ul><li>保存的数据长期存在，下一次访问该网站的时候，网页可以直接读取以前保存的数据。</li><li>大小为5M左右。</li><li>仅在客户端使用，不和服务端进行通信。</li><li>接口封装较好。</li></ul><h3 id="4-localStorage的典型应用场景"><a href="#4-localStorage的典型应用场景" class="headerlink" title="4. localStorage的典型应用场景"></a><span style="font-size: 18px;">4. localStorage的典型应用场景</span></h3><p>　　考虑到localStorage的特点之一是持久，有时我们更倾向于用它来存储一些内容稳定的资源。比如图片内容丰富的电商网站会用它来存储base64格式的图片字符串。</p><h2 id="三、sessionStorage"><a href="#三、sessionStorage" class="headerlink" title="三、sessionStorage"></a>三、sessionStorage</h2><h3 id="1-什么是sessionStorage"><a href="#1-什么是sessionStorage" class="headerlink" title="1. 什么是sessionStorage"></a><span style="font-size: 18px;">1. 什么是sessionStorage</span></h3><p>　　sessionStorage保存的数据用于浏览器的一次会话，当会话结束（通常是关闭窗口或标签页），数据被清空。<br>　　sessionStorage特别的一点在于，即便是相同域名下的两个页面，只要它们不在同一个浏览器窗口中打开，那么它们的sessionStorage内容便无法共享；localStorage在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。除了保存期限的长短不同，sessionStorage的属性和方法与localStorage完全一样。</p><h3 id="2-sessionStorage的用法"><a href="#2-sessionStorage的用法" class="headerlink" title="2. sessionStorage的用法"></a><span style="font-size: 18px;">2. sessionStorage的用法</span></h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 存储</span>sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">"lastname"</span><span class="token punctuation">,</span> <span class="token string">"Smith"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 检索</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"result"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML <span class="token operator">=</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">"lastname"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>具体用法可参见<a href="https://www.runoob.com/jsref/obj-storage.html" title="菜鸟教程" rel="external nofollow noopener noreferrer" target="_blank">JavaScript 存储对象</a></p><h3 id="3-sessionStorage的特点"><a href="#3-sessionStorage的特点" class="headerlink" title="3. sessionStorage的特点"></a><span style="font-size: 18px;">3. sessionStorage的特点</span></h3><ul><li>会话级别的浏览器存储。</li><li>大小为5M左右。</li><li>仅在客户端使用，不和服务端进行通信。</li><li>接口封装较好。</li></ul><h3 id="4-sessionStorage的典型应用场景"><a href="#4-sessionStorage的典型应用场景" class="headerlink" title="4. sessionStorage的典型应用场景"></a><span style="font-size: 18px;">4. sessionStorage的典型应用场景</span></h3><ul><li>维护表单信息，比如刷新时，表单信息不丢失。</li><li>微博的sessionStorage存储了本次会话的浏览足迹，lasturl对应的就是你上一次访问的url地址，这个地址是即时的。当你切换url 时，它随之更新，当你关闭页面时，留着它也确实没有什么意义了，于是可以释放掉。</li></ul><h2 id="四、cookie、localStorage、sessionStorage对比"><a href="#四、cookie、localStorage、sessionStorage对比" class="headerlink" title="四、cookie、localStorage、sessionStorage对比"></a>四、cookie、localStorage、sessionStorage对比</h2><h3 id="1-相同点"><a href="#1-相同点" class="headerlink" title="1. 相同点"></a><span style="font-size: 18px;">1. 相同点</span></h3><ul><li>都是保存在浏览器端，且都是字符串类型的键值对。</li><li>都遵循同源策略</li></ul><h3 id="2-不同点"><a href="#2-不同点" class="headerlink" title="2. 不同点"></a><span style="font-size: 18px;">2. 不同点</span></h3><ul><li>传递方式不同<br>cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。sessionStorage和loaclStorage不会自动把数据发给服务器，仅在本地保存。</li><li>数据大小不同<br>cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下。存储大小限制也不同，cookie数据不能超过4KB，同时因为每次http请求都会携带cookie，所以cookie只适合保存很小的数据，如会话标识。<br>sessionStorage和localStorage虽然也有存储大小的限制，但比cookie大得多，可以达到5M或者更大。</li><li>数据有效期不同<br>cookie：只在设置cookie过期时间之前一直有效，即使窗口或浏览器关闭；<br>localStorage：始终有效，窗口或浏览器关闭也一直保存，除非手动删除，因此用作持久数据；<br>sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持。</li><li>作用域不同<br>cookie：在所有同源窗口中都是共享的；<br>localStorage：在所有同源窗口中也都是共享的；<br>sessionStorage：不在不同的浏览器窗口中共享，即使是同一个页面。</li></ul><h2 id="五、indexedDB"><a href="#五、indexedDB" class="headerlink" title="五、indexedDB"></a>五、indexedDB</h2><h3 id="1-什么是indexedDB"><a href="#1-什么是indexedDB" class="headerlink" title="1. 什么是indexedDB"></a><span style="font-size: 18px;">1. 什么是indexedDB</span></h3><p>　　为了弥补cookie的局限性，HTML5中新增了本地存储的解决方案：Web Storage（localStorage和sessionStorage）。<br>　　可事实上无论是cookie还是Web Storage，都只能用于存储少量的简单数据。当遇到大规模的、结构复杂的数据时，我们就需要用到indexedDB了。<br>　　indexedDB是一个运行在浏览器上的非关系型数据库，用于客户端存储大量结构化数据（包括文件和blobs）。因为它是nosql的，数据形式使用的是json。理论上来说，indexedDB是没有存储上限的（一般来说不会小于250M）。它不仅可以存储字符串，还可以存储二进制数据。</p><h3 id="2-indexedDB的用法"><a href="#2-indexedDB的用法" class="headerlink" title="2. indexedDB的用法"></a><span style="font-size: 18px;">2. indexedDB的用法</span></h3><p>　　具体用法可参见<a href="http://www.tfan.org/using-indexeddb/" title="IndexedDB中文文档" rel="external nofollow noopener noreferrer" target="_blank">IndexedDB中文文档</a></p><h3 id="3-indexedDB的特点"><a href="#3-indexedDB的特点" class="headerlink" title="3. indexedDB的特点"></a><span style="font-size: 18px;">3. indexedDB的特点</span></h3><ul><li>键值对储存</li><li>异步</li><li>支持事务</li><li>同源限制</li><li>储存空间大</li><li>支持二进制储存</li></ul><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>　　近年来随着浏览器存储、缓存技术的出现和发展，为前端应用带来了无限的转机，此外还衍生出了PWA这样优秀的Web应用模型。<br>　　总结下本文几个核心观点：</p><ul><li>cookie的本职工作并非本地存储，而是“维持状态”；</li><li>Web Storage是HTML5专门为浏览器存储而提供的数据存储机制，不与服务端发生通信；</li><li>indexedDB 用于客户端存储大量结构化数据。</li></ul><p class="reference"><br>原文出处<br><a href="https://github.com/ljianshu/Blog/issues/55" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/ljianshu/Blog/issues/55</a><br><a href="https://segmentfault.com/a/1190000011145364" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000011145364</a><br></p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS库的封装之四：代码整合</title>
      <link href="/blogs/javascript-library-packaging-4.html"/>
      <url>/blogs/javascript-library-packaging-4.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">JS库的封装之四：代码整合</div><blockquote><p>参考jQuery，使用JavaScript实现库的封装。本文为第四部分：代码整合。</p></blockquote><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><p>　　在之前，我们模仿jQuery源码的实现来尝试自己封装一个JS库，最终完成了入口函数、工具类方法/DOM操作方法、jQuery的事件绑定。<br>　　现在我们需要将之前写的代码进行分类，将每一块功能拆分到不同的文件，类似于以模块为单位，最终可以通过webpack等工具将多个js文件合并成一个js文件。<br>　　在我们未将它们合并之前，如果要调用，需要依次手动引入（注意先后顺序，先引入jquery.core.js、再引入jquery.util.js，最后引入其它的文件）。<br>　　文件分类后的结构如下图所示：</p><pre class=" language-bash"><code class="language-bash">    <span class="token keyword">.</span>    ├── js    <span class="token operator">|</span>   ├── jquery.core.js    // jquery框架基本结构    <span class="token operator">|</span>   ├── jquery.util.js    // jquery的工具类方法    <span class="token operator">|</span>   ├── jquery.style.js    // jquery的样式操作方法    <span class="token operator">|</span>   ├── jquery.event.js    // jquery的事件框架    <span class="token operator">|</span></code></pre><p>　　下面是文件内的具体代码实现。</p><h2 id="二、jquery-core-js"><a href="#二、jquery-core-js" class="headerlink" title="二、jquery.core.js"></a>二、jquery.core.js</h2><p>　　jquery框架基本结构。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>global<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">function</span> <span class="token function">jQuery</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>init</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    jQuery<span class="token punctuation">.</span>fn <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>        constructor<span class="token punctuation">:</span> jQuery<span class="token punctuation">,</span>        init<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>jQuery<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 选择器</span>                <span class="token keyword">const</span> elements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>selector<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// DOM元素</span>                <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> selector<span class="token punctuation">;</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>prototype <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>    jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>extend <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>extend <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 接收数据的对象</span>        <span class="token keyword">let</span> target<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 提供数据的对象</span>        <span class="token keyword">let</span> sources <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 参数个数为1：</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            sources<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 参数个数>1：</span>            target <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            sources<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>            sources<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 完成拷贝的逻辑</span>        sources<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>source<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取对象中的每一个属性：</span>            Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>                target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 告知用户拷贝的结果</span>        <span class="token keyword">return</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    global<span class="token punctuation">.</span>$ <span class="token operator">=</span> global<span class="token punctuation">.</span>jQuery <span class="token operator">=</span> jQuery<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span></code></pre><p>　　关于 <code>$.extend</code> 和 <code>$.fn.extend</code> 两个方法，比较重要，这里再详细讲下。</p><h3 id="1-extend"><a href="#1-extend" class="headerlink" title="1. $.extend"></a><span style="font-size: 18px;">1. $.extend</span></h3><p>　　① 如果有一个参数，把参数对象里面的属性依次拷贝给$</p><pre class=" language-javascript"><code class="language-javascript">    $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span><span class="token string">"abc"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">18</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// --> $.name="abc"</span>    <span class="token comment" spellcheck="true">// --> $.age=18</span></code></pre><p>　　② 如果有多个参数，把第二个参数及其后面的所有参数中的属性依次遍历给第一个参数</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> p<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>b<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>c<span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// --> p.a=10;</span>    <span class="token comment" spellcheck="true">// --> p.b=20;</span>    <span class="token comment" spellcheck="true">// --> p.c=30</span></code></pre><h3 id="2-fn-extend"><a href="#2-fn-extend" class="headerlink" title="2. $.fn.extend"></a><span style="font-size: 18px;">2. $.fn.extend</span></h3><p>　　① 如果有一个参数，把参数对象中的属性依次遍历给$.fn</p><pre class=" language-javascript"><code class="language-javascript">    $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span> css<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>on<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// --> $.fn.css=function(){}</span>    <span class="token comment" spellcheck="true">// --> $.fn.on=function(){}</span></code></pre><p>　　② 如果有多个参数，功能等价于$.extend的第二个功能</p><pre class=" language-javascript"><code class="language-javascript">    $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>b<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>c<span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span><span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>b<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span>c<span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// --> p.a=10 p.b=20 p.c=30;</span></code></pre><h3 id="3-fn-extend与-extend共同点"><a href="#3-fn-extend与-extend共同点" class="headerlink" title="3. $.fn.extend与$.extend共同点"></a><span style="font-size: 18px;">3. $.fn.extend与$.extend共同点</span></h3><p>　　① <code>$.fn.extend</code> 和 <code>$.extend</code> 多参数功能是完全一样的<br>　　② <code>$.fn.extend</code> 和 <code>$.extend</code> 一个参数的功能其实都是为了把参数里面的属性依次遍历给 <code>this</code><br>　　③ 这2大功能最终的目的都是为了进行对象的拷贝——&gt;实现拷贝继承–&gt;思考：能不能重用拷贝的逻辑（简化代码，代码见上）<br>　　　　寻找共同点：<br>　　　　a）都是为了拷贝<br>　　　　b）拷贝其实只要确定：提供数据的对象、接收数据的对象<br>　　　　c）第一大功能提供数据的对象：第二个参数及其后面的参数；接收数据的对象是第一个参数<br>　　　　d）第二大功能提供数据的对象：第一个参数；接收数据的对象：this</p><h2 id="三、jquery-util-js"><a href="#三、jquery-util-js" class="headerlink" title="三、jquery.util.js"></a>三、jquery.util.js</h2><p>　　jquery的工具类方法。</p><pre class=" language-javascript"><code class="language-javascript">jQuery<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 可以遍历数组和对象</span>    <span class="token function">each</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 有2种情况，数组使用for循环，对象使用for...in循环</span>        <span class="token comment" spellcheck="true">// 不仅仅可以遍历数组，也可以遍历伪数组</span>        <span class="token comment" spellcheck="true">// { length:0 }</span>        <span class="token comment" spellcheck="true">// { 0:100,length:1 }</span>        <span class="token comment" spellcheck="true">// { 0:"a",1:"b",2:"c",length:3 }</span>        <span class="token comment" spellcheck="true">// 在这里，由于存在数组、伪数组2种情况，只能使用一种约定俗成的方式来通过他们的特征来进行判断：length属性，并且值>=0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>length <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> obj<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                callback<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// callback.apply(obj[i],[i,obj[i]])</span>                <span class="token comment" spellcheck="true">// 没有必要使用bind，bind的实现相对繁琐</span>                <span class="token comment" spellcheck="true">// callback.bind(obj[i])(i,obj[i])</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>                callback<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">type</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断data的数据类型</span>        <span class="token comment" spellcheck="true">// --> Object.prototype.toString.call(1)</span>        <span class="token comment" spellcheck="true">// --> "[object Number]"</span>        <span class="token keyword">var</span> type <span class="token operator">=</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> type            <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"[object "</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token function">each</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//this：jquery对象</span>        jQuery<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="四、jquery-style-js"><a href="#四、jquery-style-js" class="headerlink" title="四、jquery.style.js"></a>四、jquery.style.js</h2><p>　　jquery的样式操作方法。</p><pre class=" language-javascript"><code class="language-javascript">jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1、获取样式$("div").css("color")  只能获取到第一个div的颜色</span>    <span class="token comment" spellcheck="true">// 2、设置样式</span>    <span class="token comment" spellcheck="true">//      $("div").css("color","red") 设置每一个div的字体颜色</span>    <span class="token comment" spellcheck="true">//      $("div").css({ color:"red","backgroundColor","blue" })</span>    <span class="token function">css</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> arg1 <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            arg2 <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 参数个数：1</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>jQuery<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// a、获取样式：只能获取第一个元素的样式</span>                <span class="token keyword">let</span> firstDom <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">let</span> domStyleObj <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>firstDom<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> domStyleObj<span class="token punctuation">[</span>arg1<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// b、设置多个样式  </span>                <span class="token comment" spellcheck="true">// arg1:{ color:"red",fontSize:"20px" }</span>                <span class="token keyword">var</span> _that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 遍历出所有要添加的样式</span>                jQuery<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 遍历每一个DOM元素，添加指定的样式</span>                    _that<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> _that<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 参数个数：2  设置单个样式</span>            <span class="token comment" spellcheck="true">// 第一步：遍历每一个DOM</span>            <span class="token comment" spellcheck="true">// 第二步：给DOM添加样式</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> dom<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//this：表示一个DOM元素  ===   dom</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">[</span>arg1<span class="token punctuation">]</span> <span class="token operator">=</span> arg2<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"display"</span><span class="token punctuation">,</span> <span class="token string">"block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"display"</span><span class="token punctuation">,</span> <span class="token string">"none"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 判断每一个元素，如果隐藏就显示，如果显示就隐藏</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> $<span class="token keyword">this</span> <span class="token operator">=</span> <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            $<span class="token keyword">this</span><span class="token punctuation">[</span>$<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"display"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"none"</span> <span class="token operator">?</span> <span class="token string">"show"</span> <span class="token punctuation">:</span> <span class="token string">"hide"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="五、jquery-event-js"><a href="#五、jquery-event-js" class="headerlink" title="五、jquery.event.js"></a>五、jquery.event.js</h2><p>　　jquery的事件框架。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 将会保存曾经绑定过的所有的事件处理函数</span>    <span class="token comment" spellcheck="true">// 以DOM元素为区分，</span>    <span class="token keyword">const</span> events <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">// { ele:div1,type:"click",callback:function(){} },</span>        <span class="token comment" spellcheck="true">// { ele:div1,type:"click",callback:function(){} },</span>        <span class="token comment" spellcheck="true">// { ele:div1,type:"keydown",callback:functioN(){} },</span>        <span class="token comment" spellcheck="true">// { ele:div3,type:"click",callback:function(){} }</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// $("div").on("click",function(){})</span>        <span class="token function">on</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 给当前jquery对象中的每一个DOM元素绑定事件</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>                element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>                events<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ele<span class="token punctuation">:</span> element<span class="token punctuation">,</span> type<span class="token punctuation">,</span> callback<span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 实现链式编程</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 解绑绑定：$("div").off("click")：表示解除当前元素的所有的单击事件</span>        <span class="token function">off</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 找到该元素曾经绑定过type类型的事件</span>                <span class="token keyword">var</span> evts <span class="token operator">=</span> events<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>evtObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 是否是该元素绑定的该类型的事件</span>                    <span class="token keyword">var</span> isCurrent <span class="token operator">=</span> evtObj<span class="token punctuation">.</span>ele <span class="token operator">===</span> element <span class="token operator">&amp;&amp;</span> evtObj<span class="token punctuation">.</span>type <span class="token operator">===</span> type<span class="token punctuation">;</span>                    <span class="token keyword">return</span> isCurrent<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 进行事件解绑操作</span>                evts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>evt<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">var</span> <span class="token punctuation">{</span>callback<span class="token punctuation">}</span> <span class="token operator">=</span> evt<span class="token punctuation">;</span>                    element<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="六、调用方式"><a href="#六、调用方式" class="headerlink" title="六、调用方式"></a>六、调用方式</h2><p>　　调用时，需要注意先后顺序，先引入jquery.core.js、再引入jquery.util.js，最后引入其它的文件。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width, initial-scale<span class="token punctuation">=</span>1.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ie<span class="token punctuation">=</span>edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>100<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>200<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>300<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./jquery.core.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./jquery.util.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>./jquery.event.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token punctuation">{</span>aaa<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>bbb<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>ccc<span class="token punctuation">:</span> <span class="token number">300</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click div1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"mouseover"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'mouseover div1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 实现解绑div元素的click事件</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 找到该元素该类型的事件总和</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><p>　　总用写了四篇博客来学习JS库的封装，这是最后一篇：主要对前面的所有内容进行复盘和整理。</p><p>　　这个系列的文章，主要是通过仿照jQuery来学习JS库的封装，共写了如下几篇博客：<br>　　1. <span class="series"><a href="/blogs/javascript-library-packaging-1.html" title="JS库的封装之一：入口函数">《JS库的封装之一：入口函数》</a></span><br>　　2. <span class="series"><a href="/blogs/javascript-library-packaging-2.html" title="JS库的封装之二：添加方法">《JS库的封装之二：添加方法》</a></span><br>　　3. <span class="series"><a href="/blogs/javascript-library-packaging-3.html" title="JS库的封装之三：添加事件">《JS库的封装之三：添加事件》</a></span><br>　　4. <span class="series"><a href="/blogs/javascript-library-packaging-4.html" title="JS库的封装之四：代码整合">《JS库的封装之四：代码整合》</a></span></p><style type="text/css">    .series a {        text-decoration:none !important;    }</style>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS库的封装之三：添加事件</title>
      <link href="/blogs/javascript-library-packaging-3.html"/>
      <url>/blogs/javascript-library-packaging-3.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">JS库的封装之三：添加事件</div><blockquote><p>参考jQuery，使用JavaScript实现库的封装。本文为第三部分：事件封装。</p></blockquote><h2 id="一、需求"><a href="#一、需求" class="headerlink" title="一、需求"></a>一、需求</h2><p>　　参考jQuery中的实现逻辑，通过JavaScript代码手动实现：</p><p>　　●　jQuery的on方法<br>　　　　৹　$(selector).on(“click”,function(){})<br>　　●　jQuery的off方法<br>　　　　৹　$(selector).off(“click”)</p><h2 id="二、on方法"><a href="#二、on方法" class="headerlink" title="二、on方法"></a>二、on方法</h2><p>　　on方法用于给当前jQuery对象中的每一个DOM元素绑定事件<br>　　使用方法：<code>$(&quot;div&quot;).on(&quot;click&quot;,function(){})</code><br>　　它有两个参数：事件类型（”click”等，字符串格式），回调函数。<br>　　下面我们来实现on方法，此处我们只考虑IE8以上的浏览器。</p><pre class=" language-javascript"><code class="language-javascript">    jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">on</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 给当前jQuery对象中的每一个DOM元素绑定事件</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>                element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 实现链式编程</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>　　测试代码：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取点击的元素</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// this指向当前元素</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="三、off方法"><a href="#三、off方法" class="headerlink" title="三、off方法"></a>三、off方法</h2><p>　　off方法用于解除当前元素的所有指定事件<br>　　使用方法：<code>$(&quot;div&quot;).off(&quot;click&quot;)</code><br>　　它只有一个参数：事件类型（”click”等，字符串格式）。</p><p>　　此时会遇到一个问题，当我们调用 <code>element.removeEventListener(type, callback);</code> 时发现，我们并不能得到之前绑定事件的回调函数的地址。<br>　　要想解决这个问题，必须在当初绑定事件的时候，把事件回调函数的内存地址保存起来。<br>　　我们需要定义一个const数组（该变量对用户来说应该是私密的），在每次绑定事件时，将callback函数存进去。</p><p>　　下面我们来实现off方法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 采用模块化的形式，使该变量称为这个模块的局部变量</span>    <span class="token comment" spellcheck="true">// events变量将会保存曾经绑定过的所有的事件处理函数</span>    <span class="token comment" spellcheck="true">// 由于事件处理函数在绑定好之后，是保存在浏览器的事件池中，这里只是引用了这个事件处理函数，所以这里不用担心内存浪费的问题，只有events对象占用了一小部分内存</span>    <span class="token comment" spellcheck="true">// 以DOM元素为区分，</span>    <span class="token keyword">const</span> events <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token comment" spellcheck="true">// { ele:div1,type:"click",callback:function(){} },</span>        <span class="token comment" spellcheck="true">// { ele:div1,type:"click",callback:function(){} },</span>        <span class="token comment" spellcheck="true">// { ele:div1,type:"keydown",callback:functioN(){} },</span>        <span class="token comment" spellcheck="true">// { ele:div3,type:"click",callback:function(){} }</span>    <span class="token punctuation">]</span><span class="token punctuation">;</span>    jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// $("div").on("click",function(){})</span>        <span class="token function">on</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 给当前jquery对象中的每一个DOM元素绑定事件</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>                element<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>                events<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>ele<span class="token punctuation">:</span> element<span class="token punctuation">,</span> type<span class="token punctuation">,</span> callback<span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 实现链式编程</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 解绑绑定：$("div").off("click")：表示解除当前元素的所有的单击事件</span>        <span class="token function">off</span><span class="token punctuation">(</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> element<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 找到该元素曾经绑定过type类型的事件</span>                <span class="token keyword">var</span> evts <span class="token operator">=</span> events<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>evtObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 是否是该元素绑定的该类型的事件</span>                    <span class="token keyword">var</span> isCurrent <span class="token operator">=</span> evtObj<span class="token punctuation">.</span>ele <span class="token operator">===</span> element <span class="token operator">&amp;&amp;</span> evtObj<span class="token punctuation">.</span>type <span class="token operator">===</span> type<span class="token punctuation">;</span>                    <span class="token keyword">return</span> isCurrent<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 进行事件解绑操作</span>                evts<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>evt<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">var</span> <span class="token punctuation">{</span>callback<span class="token punctuation">}</span> <span class="token operator">=</span> evt<span class="token punctuation">;</span>                    element<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span>type<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>　　测试代码：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click div'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click div1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 实现解绑div1元素的click事件</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#div1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">off</span><span class="token punctuation">(</span><span class="token string">"click"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 找到该元素该类型的事件总和</span></code></pre><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>　　本文主要是仿照jQuery源码的功能，完成了on和off两个事件的封装。<br>　　至此，框架封装的内容已经基本上结束了，后面将写一篇博客来对前面的所有内容进行复盘和整理。</p><p>　　这个系列的文章，主要是通过仿照jQuery来学习JS库的封装，共写了如下几篇博客：<br>　　1. <span class="series"><a href="/blogs/javascript-library-packaging-1.html" title="JS库的封装之一：入口函数">《JS库的封装之一：入口函数》</a></span><br>　　2. <span class="series"><a href="/blogs/javascript-library-packaging-2.html" title="JS库的封装之二：添加方法">《JS库的封装之二：添加方法》</a></span><br>　　3. <span class="series"><a href="/blogs/javascript-library-packaging-3.html" title="JS库的封装之三：添加事件">《JS库的封装之三：添加事件》</a></span><br>　　4. <span class="series"><a href="/blogs/javascript-library-packaging-4.html" title="JS库的封装之四：代码整合">《JS库的封装之四：代码整合》</a></span></p><style type="text/css">    .series a {        text-decoration:none !important;    }</style>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS库的封装之二：添加方法</title>
      <link href="/blogs/javascript-library-packaging-2.html"/>
      <url>/blogs/javascript-library-packaging-2.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">JS库的封装之二：添加方法</div><blockquote><p>参考jQuery，使用JavaScript实现库的封装。本文为第二部分：extend方法、工具类方法和DOM操作方法的封装。</p></blockquote><h2 id="一、需求"><a href="#一、需求" class="headerlink" title="一、需求"></a>一、需求</h2><p>　　参考jQuery中的实现逻辑，通过JavaScript代码手动实现：</p><p>　　●　jQuery的拷贝继承方法<br>　　　　৹　$.extend(target,source1,source2)<br>　　　　৹　$.fn.extend(object)<br>　　●　jQuery的工具类方法<br>　　　　৹　$.each<br>　　　　৹　$.type<br>　　●　jQuery的DOM操作方法<br>　　　　৹　$(selector).css<br>　　　　৹　$(selector).show、$(selector).hide、$(selector).toggle</p><h2 id="二、extend方法"><a href="#二、extend方法" class="headerlink" title="二、extend方法"></a>二、extend方法</h2><h3 id="1-extend"><a href="#1-extend" class="headerlink" title="1. $.extend"></a><span style="font-size: 18px;">1. $.extend</span></h3><p>　　首先实现jQuery中的第一个拷贝继承方法：<code>$.extend</code>。</p><pre class=" language-javascript"><code class="language-javascript">    jQuery<span class="token punctuation">.</span>extend <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里的extend方法参数并不确定</span>        <span class="token comment" spellcheck="true">// 所以建议不要指定形参，通过函数内置对象arguments来进行操作</span>        <span class="token keyword">const</span> target <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 进行对象拷贝，需要将第二个参数及其后面的所有参数中的属性遍历添加到第一个参数中</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 每一个实参：对象</span>            <span class="token keyword">let</span> arg <span class="token operator">=</span> args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 取出对象中的每一个属性</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 把该属性添加到第一个参数中</span>                target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> arg<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="2-fn-extend"><a href="#2-fn-extend" class="headerlink" title="2. $.fn.extend"></a><span style="font-size: 18px;">2. $.fn.extend</span></h3><p>　　这是jQuery中的第二个拷贝继承方法，也是编写jQuery插件的核心方法。<br>　　一般用于编写工具函数的时候，功能就是把这些方法添加到原型中，这样jQuery对象就能直接访问了，比如：</p><pre class=" language-javascript"><code class="language-javascript">    $<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">dateTimePicker</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">getDate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>　　接下来我们实现jQuery中的第二个拷贝继承方法：<code>$.fn.extend</code>。</p><p>　　在jQuery中 <code>jQuery.fn.extend</code> 与 <code>jQuery.extend</code> 是<span style="color: #FF0000;">相同的实现代码</span>，但执行过程有所不同。<br>　　2个extend方法<span style="color: #FF0000;">区别在于</span>：<br>　　① 接收数据的对象发生了变化<br>　　　　$.extend：第一个实参<br>　　　　$.fn.extend：this（也就是 $.fn）<br>　　② 提供数据的对象发生了变化：<br>　　　　$.extend：第二个参数及其后面的参数<br>　　　　$.fn.extend：所有的参数<br>　　后面的拷贝过程都是一样的。</p><pre class=" language-javascript"><code class="language-javascript">    jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>extend <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>extend <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> target<span class="token punctuation">,</span> source <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        source <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>args<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断2种情况</span>        <span class="token comment" spellcheck="true">// $.extend({}) 给$添加属性</span>        <span class="token comment" spellcheck="true">// $.fn.extend({}) 给$.fn添加属性</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 参数个数=1，目标对象等于this</span>            target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 参数个数>1，就是给第一个实参添加属性</span>            target <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 目标对象就是第一个实参</span>            source<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 删除第一个元素，源对象就是第二个及其后面的实参</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 实现拷贝部分的逻辑：</span>        source<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// item：就是每一个数据源对象（提供数据的对象）</span>            <span class="token comment" spellcheck="true">// 取出item对象中的每一个属性：for...in</span>            Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// key就是对象中每一个属性名</span>                target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> item<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 验证：添加DOM操作方法</span>    <span class="token comment" spellcheck="true">// DOM操作方法要放在原型中，即init实例的原型，就是jQuery.prototype，也就是jQuery.fn</span>    <span class="token comment" spellcheck="true">// 往jQuery.fn对象中添加方法，可以通过jQuery.fn.extend()传入一个参数，相当于往jQuery.fn身上添加属性和方法</span>    jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">attr</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'attr方法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">on</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'on方法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="三、工具类方法"><a href="#三、工具类方法" class="headerlink" title="三、工具类方法"></a>三、工具类方法</h2><p>　　添加工具类方法例如 <code>$.each</code>、<code>$.type</code> 时。可以通过</p><pre class=" language-javascript"><code class="language-javascript">    jQuery<span class="token punctuation">.</span>each<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    jQuery<span class="token punctuation">.</span>ajax<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><p>来定义。<br>　　可是代码冗余过多（<code>jQuery.xxx</code>），于是我们可以利用上面的拷贝继承来简化代码。<br>　　由于此时是<a href="/blogs/javascript-4-ways-to-call-a-function.html#toc-heading-2">方法调用模式</a>，故函数内部的 <code>this</code> 指向调用该方法的对象 <code>jQuery</code>。</p><pre class=" language-javascript"><code class="language-javascript">    jQuery<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">each</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'each方法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'ajax方法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="1-each"><a href="#1-each" class="headerlink" title="1. $.each"></a><span style="font-size: 18px;">1. $.each</span></h3><p>　　<code>$.each</code> 即遍历函数，例如：<br>　　遍历数组，<code>$.each([1,3,4], function(index, value){})</code><br>　　遍历对象，<code>$.each({age:18,height:200}, function(key, value){})</code></p><p>　　在实现过程中，数组我们使用for循环，对象使用for…in循环</p><pre class=" language-javascript"><code class="language-javascript">    jQuery<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">each</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 不仅仅可以遍历数组，也可以遍历伪数组{ length:0 }或{ 0:"a",1:"b",2:"c",length:3 }形式</span>            <span class="token comment" spellcheck="true">// 在这里，由于存在数组、伪数组2种情况，只能使用一种约定俗成的方式来通过他们的特征来进行判断：length属性，并且值>=0</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>length <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> obj<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">callback</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token function">callback</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>　　调用时只需 <code>$.each([1, 3, 5], function (index, value) {});</code>，但此时如果在回调函数中打印 <code>this</code> 值，会发现它指向window。而在jQuery中，它修改了这里的this值，使之指向每一个遍历项。<br>　　下面来实现这一步：</p><pre class=" language-javascript"><code class="language-javascript">    jQuery<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">each</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 不仅仅可以遍历数组，也可以遍历伪数组{ length:0 }或{ 0:"a",1:"b",2:"c",length:3 }形式</span>            <span class="token comment" spellcheck="true">// 在这里，由于存在数组、伪数组2种情况，只能使用一种约定俗成的方式来通过他们的特征来进行判断：length属性，并且值>=0</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>length <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>length <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> obj<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    callback<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token keyword">in</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    callback<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">,</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>　　上面我们实现了 <code>each</code> 方法遍历数组和对象，接下来我们实现第二个 <code>each</code> 方法。它<span style="color: #FF0000;">不属于工具类方法</span>，但很有意义，它常用于遍历jQuery选择器选中的每一个标签。<br>　　例如：<code>$(&quot;div&quot;).each(function (index, element) {})</code>。<br>　　具体的实现如下：<br>　　我们将它放到原型中，依然是一个 <code>each</code> 方法，但此时要遍历的对象不再是 <code>obj</code>，只需要指定一个 <code>callback</code>。</p><pre class=" language-javascript"><code class="language-javascript">    jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">each</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// this：jquery对象，是个伪数组</span>            jQuery<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="2-type"><a href="#2-type" class="headerlink" title="2. $.type"></a><span style="font-size: 18px;">2. $.type</span></h3><p>　　<code>$.type</code> 用于判断数据类型，也是jQuery中典型的工具类方法。，例如：<br>　　判断数字，<code>console.log($.type(1));  // &quot;number&quot;</code><br>　　判断字符串，<code>console.log($.type(&quot;abc&quot;));  // &quot;string&quot;</code><br>　　判断数组，<code>console.log($.type([1, 3, 5]));  // &quot;array&quot;</code><br>　　判断函数1，<code>console.log($.type(function () {}));  // &quot;function&quot;</code><br>　　判断函数2，<code>console.log($.type(Number));  // &quot;function&quot;</code></p><p>　　在实现过程中，我们需要传递一个参数，即需要判断的数据data。<br>　　我们使用 <code>Object.prototype.toString.call()</code> 来判断数据类型，如果传递数字<code>1</code>时，将产生这样的输出：<code>&quot;[object Number]&quot;</code>，接着我们需要对输出的字符串转换一下，获取后半部分的小写形式这里就是 <code>number</code>。</p><pre class=" language-javascript"><code class="language-javascript">    jQuery<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">each</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 代码省略，见上面 $.each 部分的代码</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">type</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> type <span class="token operator">=</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> type                <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"[object "</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="四、DOM操作方法"><a href="#四、DOM操作方法" class="headerlink" title="四、DOM操作方法"></a>四、DOM操作方法</h2><h3 id="1-selector-css"><a href="#1-selector-css" class="headerlink" title="1. $(selector).css"></a><span style="font-size: 18px;">1. $(selector).css</span></h3><p>　　在<a href="/blogs/javascript-library-packaging-1.html">JS库的封装之入口函数</a>一文中我们编写过一个简单的CSS方法，当时备注了<span style="color: #FF0000;">该CSS方法还是雏形</span>，现在我们进行完善。<br>　　这里我们的CSS方法可以不跟前面提到的 <strong>第二个 <code>each</code> 方法</strong> 放在一起，因为它是通用的，可以作为单独的模块进行划分。</p><p>　　例如将样式操作部分放在一起，有css方法、show方法、hide方法。后面如果有属性操作、事件操作，再把它们各自的api放在一起。</p><p>　　对于css方法，功能主要有两大类：<br>　　① 获取样式，<code>$(&quot;div&quot;).css(&quot;color&quot;)  // 只能获取到第一个div的颜色</code><br>　　② 设置样式，<br>　　　　　　　　<code>$(&quot;div&quot;).css(&quot;color&quot;,&quot;red&quot;)  // 设置每一个div的字体颜色</code><br>　　　　　　　　<code>$(&quot;div&quot;).css({ color:&quot;red&quot;,&quot;background-color&quot;:&quot;blue&quot; })</code><br>　　我们通过参数个数来区分这三大功能。</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// 样式操作部分</span>    jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">css</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> arg1 <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                arg2 <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 参数个数：1</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>args<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>jQuery<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>arg1<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 获取样式：只能获取第一个元素的样式</span>                    <span class="token keyword">let</span> firstDom <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 错误写法</span>                    <span class="token comment" spellcheck="true">// return firstDom.style[arg1];  只能获取行内样式</span>                    <span class="token comment" spellcheck="true">// 正确的写法</span>                    <span class="token keyword">let</span> domStyleObj <span class="token operator">=</span> window<span class="token punctuation">.</span><span class="token function">getComputedStyle</span><span class="token punctuation">(</span>firstDom<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    <span class="token keyword">return</span> domStyleObj<span class="token punctuation">[</span>arg1<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 设置多个样式</span>                    <span class="token comment" spellcheck="true">// arg1：{ color:"red",font-size:"20px" }</span>                    <span class="token keyword">var</span> _that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 遍历出所有要添加的样式</span>                    jQuery<span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span>arg1<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">// 遍历每一个DOM元素，添加指定的样式</span>                        _that<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 返回对象本身，便于实现链式编程</span>                    <span class="token keyword">return</span> _that<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 参数个数：2，设置单个样式</span>                <span class="token comment" spellcheck="true">// 第一步：遍历每一个DOM</span>                <span class="token comment" spellcheck="true">// 第二步：给DOM添加样式</span>                <span class="token comment" spellcheck="true">// this：表示一个jQuery对象</span>                <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>index<span class="token punctuation">,</span> dom<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// this：表示一个DOM元素，等价于dom</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>style<span class="token punctuation">[</span>arg1<span class="token punctuation">]</span> <span class="token operator">=</span> arg2<span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 返回对象本身，便于实现链式编程</span>                <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>　　小结上述代码的几个知识点：<br>　　① 获取样式不能使用 xxx.style.color 因为只能获取行内样式<br>　　② 获取样式的正确方式：<br>　　　　现代浏览器：window.getComputedStyle(dom,null)<br>　　　　IE6-8：dom.currentStyle</p><h3 id="2-selector-show和-selector-hide"><a href="#2-selector-show和-selector-hide" class="headerlink" title="2. $(selector).show和$(selector).hide"></a><span style="font-size: 18px;">2. $(selector).show和$(selector).hide</span></h3><p>　　jQuery源码中的show和hide是支持动画的，这里我们略过，仅做样式的变换。<br>　　让所有的元素显示，<code>$(&quot;div&quot;).show()</code><br>　　让所有的元素隐藏，<code>$(&quot;div&quot;).hide()</code><br>　　判断每一个元素，如果隐藏就显示，如果显示就隐藏，<code>$(&quot;div&quot;).toggle()</code></p><pre class=" language-javascript"><code class="language-javascript">    jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">css</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 代码省略，见上面 $(selector).css 部分的代码</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"display"</span><span class="token punctuation">,</span> <span class="token string">"block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"display"</span><span class="token punctuation">,</span> <span class="token string">"none"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// this：dom元素，并不能直接访问到css方法</span>                <span class="token comment" spellcheck="true">// 需要将dom元素转换为jQuery对象（这部分代码在《JS库的封装之入口函数》一文的最后补充过）</span>                <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"display"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"none"</span> <span class="token operator">?</span> <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>　　<span style="color: #FF0000;">代码优化</span>：<br>　　在上述代码中，每一次使用 <code>jQuery(this)</code> 都会产生一个新的jquery对象，每一次产生一个新的jQuery对象都会开辟一块新的内存，而这里的dom元素是唯一的，所以导致了一些不必要的内存浪费。<br>　　<span style="color: #FF0000;">解决方案</span>：<br>　　① 只创建一个jQuery对象就可以了，没有必要创建那么多次：创建一个变量 <code>$this</code> 保存这个jQuery对象。<br>　　② 不管是show还是hide方法，都是对 <code>$this</code> 执行的操作，可以通过<strong>变化方法名</strong>和<strong>中括号语法</strong> <code>$this[xxx]</code> 来决定执行哪个方法。</p><pre class=" language-javascript"><code class="language-javascript">    jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        <span class="token function">css</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 代码省略，见上面 $(selector).css 部分的代码</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"display"</span><span class="token punctuation">,</span> <span class="token string">"block"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"display"</span><span class="token punctuation">,</span> <span class="token string">"none"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token function">toggle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> $<span class="token keyword">this</span> <span class="token operator">=</span> <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// $this.css("display") === "none" ? $this.show() : $this.hide()  // 等价于下方代码，性能上差异不大</span>                $<span class="token keyword">this</span><span class="token punctuation">[</span>$<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token string">"display"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"none"</span> <span class="token operator">?</span> <span class="token string">"show"</span> <span class="token punctuation">:</span> <span class="token string">"hide"</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>　　有了 <code>$.extend</code> 方法和 <code>$.fn.extend</code> 方法后，<br>　　如果需要添加工具类方法，就使用 <code>jQuery.extend()</code>；<br>　　如果需要添加DOM操作方法，就使用 <code>jQuery.fn.extend()</code>。</p><p>　　本文主要是完成了extend方法、工具类方法和DOM操作方法的封装，接下来将添加事件。</p><p>　　这个系列的文章，主要是通过仿照jQuery来学习JS库的封装，共写了如下几篇博客：<br>　　1. <span class="series"><a href="/blogs/javascript-library-packaging-1.html" title="JS库的封装之一：入口函数">《JS库的封装之一：入口函数》</a></span><br>　　2. <span class="series"><a href="/blogs/javascript-library-packaging-2.html" title="JS库的封装之二：添加方法">《JS库的封装之二：添加方法》</a></span><br>　　3. <span class="series"><a href="/blogs/javascript-library-packaging-3.html" title="JS库的封装之三：添加事件">《JS库的封装之三：添加事件》</a></span><br>　　4. <span class="series"><a href="/blogs/javascript-library-packaging-4.html" title="JS库的封装之四：代码整合">《JS库的封装之四：代码整合》</a></span></p><style type="text/css">    .series a {        text-decoration:none !important;    }</style>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS库的封装之一：入口函数</title>
      <link href="/blogs/javascript-library-packaging-1.html"/>
      <url>/blogs/javascript-library-packaging-1.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">JS库的封装之一：入口函数</div><blockquote><p>参考jQuery，使用JavaScript实现库的封装。本文为第一部分：入口函数的编写。</p></blockquote><h2 id="一、需求"><a href="#一、需求" class="headerlink" title="一、需求"></a>一、需求</h2><p>　　参考jQuery中的实现逻辑，通过JavaScript代码手动实现：<br>　　●　jQuery选择器和css设置<br>　　　　৹　$(“div”).css(“color”,”red”)<br>　　●　要封装的这个库应该是一个独立的单元：模块化<br>　　　　৹　不依赖任何其他第三方库<br>　　　　৹　里面的东西大部分也是与世隔绝的，只有:$、jQuery</p><h2 id="二、入口函数"><a href="#二、入口函数" class="headerlink" title="二、入口函数"></a>二、入口函数</h2><p>　　首先要用一个入口函数，编写一个自执行函数。<code>global</code> 保存了window对象的引用。</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>global<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">function</span> jQuery <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        window<span class="token punctuation">.</span>$ <span class="token operator">=</span> window<span class="token punctuation">.</span>jQuery <span class="token operator">=</span> jQuery<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span></code></pre><h2 id="三、选择器"><a href="#三、选择器" class="headerlink" title="三、选择器"></a>三、选择器</h2><p>　　jQuery选择器中，可以通过标签名、类名和id获取元素，其原理是jQuery内部封装了一个Sizzle引擎（Sizzle.js）来获取DOM元素，其中包含了很多正则。<br>　　我们这里就借助HTML5新增的DOM操作方法 <code>document.querySelectorAll(selectors)</code> 来实现。</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>global<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">function</span> <span class="token function">jQuery</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> elements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> elements<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        window<span class="token punctuation">.</span>$ <span class="token operator">=</span> window<span class="token punctuation">.</span>jQuery <span class="token operator">=</span> jQuery<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span></code></pre><h2 id="四、jQuery-DOM操作方法"><a href="#四、jQuery-DOM操作方法" class="headerlink" title="四、jQuery DOM操作方法"></a>四、jQuery DOM操作方法</h2><p>　　接下来要实现jQuery的 <code>$(selector).css(name,value)</code> 操作，有几种方案可以在功能上可行，但都有缺点：<br>　　① 在获取元素后，直接设置属性 <code>elements.css=()=&gt;{}</code><br>　　　　缺点：随着 $() 操作频次的增加，会产生无数个相同的css方法，造成内存浪费<br>　　② 将 <code>.css()</code> 方法放到原型中， <code>HTMLCollection.prototype.css=()=&gt;{}</code><br>　　　　缺点：破坏了原生的对象结构</p><p>　　因此，我们想到可以返回一个自定义对象，而不是原生的对象。<br>　　首先创建一个构造函数，把DOM操作方法放在该构造函数上，由于DOM操作方法需要访问获取到的元素，所以还需要把DOM元素放到该对象中。</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>global<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">function</span> <span class="token function">jQuery</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 获取页面中所有的元素，把这个元素放在一个特定的对象中</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// jquery对象的构造函数</span>        <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 把DOM元素放到这个对象中</span>            <span class="token keyword">const</span> elements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 为了让这些元素可以在css方法中进行访问，所以需要把这些元素放在对象上面进行传递</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>elements <span class="token operator">=</span> elements<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        F<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>css <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                element<span class="token punctuation">.</span>style<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        window<span class="token punctuation">.</span>$ <span class="token operator">=</span> window<span class="token punctuation">.</span>jQuery <span class="token operator">=</span> jQuery<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span></code></pre><h2 id="五、jQuery-DOM操作方法优化"><a href="#五、jQuery-DOM操作方法优化" class="headerlink" title="五、jQuery DOM操作方法优化"></a>五、jQuery DOM操作方法优化</h2><p>　　在上面的代码中，我们操作DOM元素时，需要通过 <code>this.elements[i]</code> 这样的方式获取到某个元素。<br>　　而在jQuery中，我们只需通过 <code>$(selector)[0]</code> 即可获取到某个元素。那是因为jQuery为了后续的DOM操作方便，将获取到的DOM元素全部放在了对象自己身上，让自己变成了类似数组的结构，可以使用for循环进行遍历，我们把这种对象特性称之为【伪数组】。</p><p>　　接下来我们要实现把这些所有DOM元素都添加到对象自己身上，这么以来就可以通过  <code>this[i]</code> 这样的方式获取到某个元素了。<br>　　同时，我们使用<a href="/blogs/javascript-inheritance.html#toc-heading-5">替换原型对象</a>的方法，简化代码，将DOM操作方法全部放在新原型（<code>F.prototype</code>）中。</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>global<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">function</span> <span class="token function">jQuery</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">F</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">function</span> <span class="token function">F</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">const</span> elements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">// 实现把这些所有DOM元素都添加到对象自己身上</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">// 为了让它更像数组，需要添加一个length属性</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        F<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>            constructor<span class="token punctuation">:</span> F<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 此时的css方法还是雏形，后面的文章会进行完善</span>            <span class="token function">css</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    element<span class="token punctuation">.</span>style<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        window<span class="token punctuation">.</span>$ <span class="token operator">=</span> window<span class="token punctuation">.</span>jQuery <span class="token operator">=</span> jQuery<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span></code></pre><h2 id="六、入口函数仿jQuery化"><a href="#六、入口函数仿jQuery化" class="headerlink" title="六、入口函数仿jQuery化"></a>六、入口函数仿jQuery化</h2><p>　　上面写的代码其实都是入口函数，而在jQuery中，构造函数的名字叫 init，即我们下面要把构造函数 F 改名为 init。<br>　　且jQuery做了一个大的调整：把DOM操作方法放到了jQuery函数的原型中，那么此时jQuery函数的原型和init实例就没有了关系，我们需要通过 <code>jQuery.prototype.init(selector)</code> 来访问init函数。<br>　　此时创建的jQuery是init构造函数的实例，css方法在jQuery.prototype对象中，为了让jQuery对象可以访问到css方法，我们需要<span style="color: #FF0000;">让init的原型继承自jQuery的原型</span>（这也是jQuery源码做的比较精妙/恶心的事情，应该是有其历史原因的）</p><p>　　执行步骤：<br>　　① 创建了一个init的对象<br>　　② 执行css方法<br>　　　　a. 找对象本身有没有css方法，并没有<br>　　　　b. 找对象的原型：<code>init.prototype</code>，且它被我们等于了 <code>jQuery.prototype</code><br>　　　　c. 发现 <code>jQuery.prototype</code> 中有一个css方法<br>　　③ 此时init原型可以访问css方法，那么init构造函数创建出来的jQuery对象也能够访问css方法了</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>global<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">function</span> <span class="token function">jQuery</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">jQuery<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>init</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        jQuery<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>            constructor<span class="token punctuation">:</span> jQuery<span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// init是一个构造函数</span>            <span class="token comment" spellcheck="true">// 构造函数内部的this指向init实例</span>            init<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> elements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">// 为了让css方法中可以访问到DOM元素，所以需要把elements里面的元素存放在this中</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 此时的css方法还是雏形，后面的文章会进行完善</span>            <span class="token function">css</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    element<span class="token punctuation">.</span>style<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 此时创建的jQuery对象是init构造函数的实例</span>        <span class="token comment" spellcheck="true">// 为了让jquery对象可以访问到jQuery的原型中的css方法，让init的原型继承自jQuery的原型</span>        jQuery<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>init<span class="token punctuation">.</span>prototype <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>        window<span class="token punctuation">.</span>$ <span class="token operator">=</span> window<span class="token punctuation">.</span>jQuery <span class="token operator">=</span> jQuery<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span></code></pre><h2 id="七、代码简化"><a href="#七、代码简化" class="headerlink" title="七、代码简化"></a>七、代码简化</h2><p>　　因为所有的DOM操作都在jQuery的原型中，因此后续编码中会经常访问到 <code>jQuery.prototype</code>，为了操作方便，我们令 <code>jQuery.fn=jQuery.prototype</code>，这样每次就可以少些几个字母了。</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>global<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">function</span> <span class="token function">jQuery</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>init</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 给jquery添加了一个fn属性，fn属性等价于prototype属性</span>        jQuery<span class="token punctuation">.</span>fn <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>            constructor<span class="token punctuation">:</span> jQuery<span class="token punctuation">,</span>            init<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">const</span> elements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 此时的css方法还是雏形，后面的文章会进行完善</span>            <span class="token function">css</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    element<span class="token punctuation">.</span>style<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>prototype <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 假如后面再要往原型对象中添加DOM操作方法时，只需如下：</span>        jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>attr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>animate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        window<span class="token punctuation">.</span>$ <span class="token operator">=</span> window<span class="token punctuation">.</span>jQuery <span class="token operator">=</span> jQuery<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span></code></pre><h2 id="八、入口函数功能补充"><a href="#八、入口函数功能补充" class="headerlink" title="八、入口函数功能补充"></a>八、入口函数功能补充</h2><p>　　以上，我们通过传入一个选择器，可以获取一个jQuery对象。<br>　　而在实际的jQuery源码中，还支持用户传入一个dom元素，返回一个该元素对应的jQuery对象。<br>　　下面对init函数进行升级，增加条件判断：<br>　　如果selector是字符串：是选择器<br>　　如果selector有nodeType属性：是dom元素</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>global<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">function</span> <span class="token function">jQuery</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>init</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 给jquery添加了一个fn属性，fn属性等价于prototype属性</span>        jQuery<span class="token punctuation">.</span>fn <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>            constructor<span class="token punctuation">:</span> jQuery<span class="token punctuation">,</span>            init<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>jQuery<span class="token punctuation">.</span><span class="token function">type</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 选择器</span>                    <span class="token comment" spellcheck="true">// 把DOM元素放到这个对象中</span>                    <span class="token keyword">const</span> elements <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true">// 为了让css方法中可以访问到DOM元素，所以需要把elements里面的元素存放在this中</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> elements<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 对象结构：{ 0:div,1:div,2:div,length:3 }</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>selector<span class="token punctuation">.</span>nodeType<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// dom元素 -> { 0:div,length:1 }</span>                    <span class="token keyword">this</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> selector<span class="token punctuation">;</span>                    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 此时的css方法还是雏形，后面的文章会进行完善</span>            <span class="token function">css</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">let</span> element <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                    element<span class="token punctuation">.</span>style<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>prototype <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 假如后面再要往原型对象中添加DOM操作方法时，只需如下：</span>        jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>attr <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>animate <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        window<span class="token punctuation">.</span>$ <span class="token operator">=</span> window<span class="token punctuation">.</span>jQuery <span class="token operator">=</span> jQuery<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span></code></pre><h2 id="九、总结"><a href="#九、总结" class="headerlink" title="九、总结"></a>九、总结</h2><p>　　本文主要是完成了对jQuery入口函数的封装，后面将完善一些常用方法、工具类方法和DOM操作方法。</p><p>　　这个系列的文章，主要是通过仿照jQuery来学习JS库的封装，共写了如下几篇博客：<br>　　1. <span class="series"><a href="/blogs/javascript-library-packaging-1.html" title="JS库的封装之一：入口函数">《JS库的封装之一：入口函数》</a></span><br>　　2. <span class="series"><a href="/blogs/javascript-library-packaging-2.html" title="JS库的封装之二：添加方法">《JS库的封装之二：添加方法》</a></span><br>　　3. <span class="series"><a href="/blogs/javascript-library-packaging-3.html" title="JS库的封装之三：添加事件">《JS库的封装之三：添加事件》</a></span><br>　　4. <span class="series"><a href="/blogs/javascript-library-packaging-4.html" title="JS库的封装之四：代码整合">《JS库的封装之四：代码整合》</a></span></p><style type="text/css">    .series a {        text-decoration:none !important;    }</style>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6箭头函数总结</title>
      <link href="/blogs/javascript-es6-arrow-functions.html"/>
      <url>/blogs/javascript-es6-arrow-functions.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">ES6箭头函数总结</div><blockquote><p>箭头函数是ES6新出的一种语法，它相当于匿名函数，并且简化了函数定义。本文总结箭头函数的基本语法，使用注意点等。</p></blockquote><h2 id="一、基本语法"><a href="#一、基本语法" class="headerlink" title="一、基本语法"></a>一、基本语法</h2><p>　　ES6允许使用“箭头”（=&gt;）定义函数。<br>　　下面看几种常用写法：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等同于</span><span class="token keyword">let</span> func <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等同于</span><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span></code></pre><h2 id="二、简写语法"><a href="#二、简写语法" class="headerlink" title="二、简写语法"></a>二、简写语法</h2><p>　　箭头函数还有一些简写语法和应用场景，下面演示一下：</p><p>　　●　如果箭头函数<span style="color: #FF6827;">只有一个参数</span>，可以省略掉括号。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> func <span class="token operator">=</span> num <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等同于</span><span class="token keyword">let</span> func <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　●　当箭头函数<span style="color: #FF6827;">仅有一个表达式</span>的时候，可以省略{}和return。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> func <span class="token operator">=</span> num <span class="token operator">=</span><span class="token operator">></span> num<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等同于</span><span class="token keyword">let</span> func <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　●　如果箭头函数的代码块部分多于一条语句，就要使用大括号将它们括起来，并且使用return语句返回。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token punctuation">(</span>num1<span class="token punctuation">,</span> num2<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> <span class="token keyword">return</span> num1 <span class="token operator">+</span> num2<span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><p>　　●　需要注意的一点：因为大括号被解释成代码块，如果箭头函数<span style="color: #FF6827;">直接返回一个对象</span>，那么必须要在大括号外面加上括号。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> person <span class="token operator">=</span> name <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> name<span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token string">"18"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　●　更加简洁的表达式：<br>　　只用了两行，就定义了两个简单的工具函数</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> isEven <span class="token operator">=</span> n <span class="token operator">=</span><span class="token operator">></span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">const</span> square <span class="token operator">=</span> n <span class="token operator">=</span><span class="token operator">></span> n <span class="token operator">*</span> n<span class="token punctuation">;</span></code></pre><p>　　●　箭头函数的一个用处是<span style="color: #FF6827;">简化回调函数</span>，例子如下：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 正常函数写法</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> x <span class="token operator">*</span> x<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 箭头函数写法</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="三、使用注意点"><a href="#三、使用注意点" class="headerlink" title="三、使用注意点"></a>三、使用注意点</h2><h3 id="1-this指向问题"><a href="#1-this指向问题" class="headerlink" title="1. this指向问题"></a><span style="font-size: 18px;">1. this指向问题</span></h3><p>　　我们知道<span style="color: #FF6827;">普通函数的this指向调用它的那个对象</span>，<br>　　但<span style="color: #FF6827;">箭头函数的this永远指向其父作用域</span>，任何方法都改变不了，包括call，apply，bind。</p><p>　　这是因为箭头函数的作用域是词法作用域，词法作用域简单来讲就是，一切变量（包括this）都根据作用域链来查找。<br>　　具体可以了解下词法作用域和动态作用域相关知识，以及《你不知道的JavaScript》一书中相关的内容。</p><p>　　既然箭头函数本身没有this，那么自身的this会在函数声明的时候做绑定，它是根据上级的function中的this来做绑定的。如果上级的function也是箭头函数，就再往上级查找。<br>　　<span style="font-size: 10px; color:#FF0000;">* </span><span style="font-size: 10px; color:#9e9e9e;">有句话这么说：“函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。”我觉得不是很好理解，或者说这个准则写得看上去有点歧义，所以看过即可，不要绕进去了。</span></p><p>　　综上，<span style="color: #FF6827;">箭头函数中的this，首先从它的父级作用域中找，如果父级作用域还是箭头函数，再往上找祖父级作用域，如此直至找到this的指向</span>（一直向上找到全局作用域，指向window）。</p><p>　　举几个代码例子加深理解：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'傻强1号'</span><span class="token punctuation">,</span>    init<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">// 为body添加一个点击事件，看看这个点击后的this属性有什么不同</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>person<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印结果：</span><span class="token comment" spellcheck="true">// undefined</span><span class="token comment" spellcheck="true">// body这个标签对象</span></code></pre><p>　　上例中，onclick回调是一个function（匿名函数、普通函数），函数在执行时就是在节点对象的环境下，this指向当前节点。该节点没有name属性，故this.name是undefined。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'傻强2号'</span><span class="token punctuation">,</span>    init<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 为body添加一个点击事件，看看这个点击后的this属性有什么不同</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>person<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印结果：</span><span class="token comment" spellcheck="true">// 傻强2号</span><span class="token comment" spellcheck="true">// {name: "傻强2号", init: ƒ}</span></code></pre><p>　　上例中，init是一个function（匿名函数、普通函数），以person.init调用，其内部this就是person本身；而onclick回调是箭头函数，其内部的this，就是父作用域的this，就是person，能得到name。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>    name<span class="token punctuation">:</span><span class="token string">'傻强3号'</span><span class="token punctuation">,</span>    init<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 为body添加一个点击事件，看看这个点击后的this属性有什么不同</span>        document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>person<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印结果：</span><span class="token comment" spellcheck="true">// ''</span><span class="token comment" spellcheck="true">// window对象</span></code></pre><p>　　上例中，init是一个箭头函数，其内部的this为全局window；而onclick回调是箭头函数，其内部的this，就是父作用域的this，也就是init函数的this，即window。<br>　　总结出的结论就是：如果上级也是箭头函数，再上级查找。</p><h3 id="2-箭头函数不能作为构造函数"><a href="#2-箭头函数不能作为构造函数" class="headerlink" title="2. 箭头函数不能作为构造函数"></a><span style="font-size: 18px;">2. 箭头函数不能作为构造函数</span></h3><p>　　<span style="color: #FF6827;">箭头函数不能作为构造函数，不能使用new。</span><br>　　用代码来讲解：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 正常构造函数如下：</span><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 完成初始化</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> p<span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 如果用箭头函数作为构造函数，则如下</span><span class="token keyword">var</span> Person <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> p<span class="token punctuation">.</span>name<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// ？？？</span><span class="token punctuation">}</span></code></pre><p>　　由于this必须是对象实例，而箭头函数是没有实例的，它既然没有this，此处的this指向别处，不能产生person实例，自相矛盾，所以，箭头函数不能做构造函数。<br>　　此时如果强行去执行<code>let p = new Person()</code>，会报<span style="color: #FF6827;">Uncaught TypeError: Person is not a constructor</span>异常。</p><h3 id="3-箭头函数没有arguments"><a href="#3-箭头函数没有arguments" class="headerlink" title="3. 箭头函数没有arguments"></a><span style="font-size: 18px;">3. 箭头函数没有arguments</span></h3><p>　　箭头函数本身没有arguments，如果箭头函数在一个function内部，它会将外部函数的arguments拿过来使用。<br>　　也就如下面代码所示：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">func0</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">,</span>n3<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// [1, 2, 3]</span>    <span class="token keyword">let</span> func <span class="token operator">=</span> <span class="token punctuation">(</span>n1<span class="token punctuation">,</span>n2<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>        <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>       <span class="token function">func0</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 打印结果：arguments对象，其中有[1, 2, 3]</span></code></pre><p>　　箭头函数中要想接收不定参数，应该使用rest参数<code>...</code>解决，如下代码所示：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> B <span class="token operator">=</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 报错：Uncaught ReferenceError: arguments is not defined</span><span class="token keyword">let</span> C <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">...</span>c<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">C</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 打印结果：[2, 4, 6, 8]</span></code></pre><h3 id="4-箭头函数通过call和apply调用，不会改变this指向，只会传入参数"><a href="#4-箭头函数通过call和apply调用，不会改变this指向，只会传入参数" class="headerlink" title="4. 箭头函数通过call和apply调用，不会改变this指向，只会传入参数"></a><span style="font-size: 18px;">4. 箭头函数通过call和apply调用，不会改变this指向，只会传入参数</span></h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span>    a<span class="token punctuation">:</span> <span class="token number">10</span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> n <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">f</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">let</span> f <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> n <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>a<span class="token punctuation">;</span>        <span class="token keyword">let</span> m <span class="token operator">=</span> <span class="token punctuation">{</span>            a<span class="token punctuation">:</span> <span class="token number">20</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> f<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj2<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 11</span></code></pre><h3 id="5-箭头函数没有原型属性"><a href="#5-箭头函数没有原型属性" class="headerlink" title="5. 箭头函数没有原型属性"></a><span style="font-size: 18px;">5. 箭头函数没有原型属性</span></h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">}</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// {constructor: ƒ}</span></code></pre><h3 id="6-箭头函数不能作为Generator函数，不能使用yield关键字"><a href="#6-箭头函数不能作为Generator函数，不能使用yield关键字" class="headerlink" title="6. 箭头函数不能作为Generator函数，不能使用yield关键字"></a><span style="font-size: 18px;">6. 箭头函数不能作为Generator函数，不能使用yield关键字</span></h3><h3 id="7-箭头函数返回对象时，要加一个小括号"><a href="#7-箭头函数返回对象时，要加一个小括号" class="headerlink" title="7. 箭头函数返回对象时，要加一个小括号"></a><span style="font-size: 18px;">7. 箭头函数返回对象时，要加一个小括号</span></h3><p>　　这一点其实上面在介绍箭头函数的简写语法时，已经说过了，这里再重复一遍加深印象。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 正确</span><span class="token keyword">var</span> func <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span> foo<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 错误</span></code></pre><h3 id="8-箭头函数在ES6-class中声明的方法为实例方法，不是原型方法"><a href="#8-箭头函数在ES6-class中声明的方法为实例方法，不是原型方法" class="headerlink" title="8. 箭头函数在ES6 class中声明的方法为实例方法，不是原型方法"></a><span style="font-size: 18px;">8. 箭头函数在ES6 class中声明的方法为实例方法，不是原型方法</span></h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// demo1</span><span class="token keyword">class</span> <span class="token class-name">Super</span><span class="token punctuation">{</span>    <span class="token function">sayName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// do some thing here</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 通过Super.prototype可以访问到sayName方法，这种形式定义的方法，都是定义在prototype上</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>sayName <span class="token operator">===</span> b<span class="token punctuation">.</span>sayName <span class="token comment" spellcheck="true">// true</span><span class="token comment" spellcheck="true">// 所有实例化之后的对象共享prototypy上的sayName方法</span><span class="token comment" spellcheck="true">// demo2</span><span class="token keyword">class</span> <span class="token class-name">Super</span><span class="token punctuation">{</span>    sayName <span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// do some thing here</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 通过Super.prototype访问不到sayName方法，该方法没有定义在prototype上</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Super</span><span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>sayName <span class="token operator">===</span> b<span class="token punctuation">.</span>sayName <span class="token comment" spellcheck="true">// false</span><span class="token comment" spellcheck="true">// 实例化之后的对象各自拥有自己的sayName方法，比demo1需要更多的内存空间</span></code></pre><p>　　因此，在class中尽量少用箭头函数声明方法。</p><h3 id="9-多重箭头函数就是一个高阶函数，相当于内嵌函数"><a href="#9-多重箭头函数就是一个高阶函数，相当于内嵌函数" class="headerlink" title="9. 多重箭头函数就是一个高阶函数，相当于内嵌函数"></a><span style="font-size: 18px;">9. 多重箭头函数就是一个高阶函数，相当于内嵌函数</span></h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">const</span> add <span class="token operator">=</span> x <span class="token operator">=</span><span class="token operator">></span> y <span class="token operator">=</span><span class="token operator">></span> y <span class="token operator">+</span> x<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 相当于</span><span class="token keyword">function</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> y <span class="token operator">+</span> x<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="10-箭头函数常见错误"><a href="#10-箭头函数常见错误" class="headerlink" title="10. 箭头函数常见错误"></a><span style="font-size: 18px;">10. 箭头函数常见错误</span></h3><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">{</span>    foo<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    bar<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token punctuation">}</span>a<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 打印结果：undefined</span></code></pre><p>　　上述代码中，bar函数中的this指向父作用域，而a对象没有作用域，因此this不是a，打印结果为undefined。</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">}</span>A<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>foo<span class="token punctuation">)</span><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span><span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 打印结果：undefined</span></code></pre><p>　　上述代码中，原型上使用箭头函数，this指向是其父作用域，并不是对象a，因此得不到预期结果。</p><h2 id="四、总结用法"><a href="#四、总结用法" class="headerlink" title="四、总结用法"></a>四、总结用法</h2><p>　　●　在使用的时候，不必那么复杂，建议掌握一种就可以了 <code>()=&gt;{}</code><br>　　●　看到极为简单的情况也要认识 <code>let func = num =&gt; num;</code><br>　　●　一个参数: <code>var f = num =&gt; num;</code> 也可以 <code>var f = (num) =&gt; num;</code><br>　　●　没有参数: <code>var f = ()=&gt; 1;</code><br>　　●　多个参数: <code>var f = (n1,n2)=&gt; n1 + n2;</code><br>　　●　多行代码: <code>var f = (n1,n2)=&gt;{//code.... return n1 + n2;}</code></p><h2 id="五、总结注意点"><a href="#五、总结注意点" class="headerlink" title="五、总结注意点"></a>五、总结注意点</h2><p>　　●　箭头函数本身没有 <span style="color: #FF6827;">this</span><br>　　●　自身的 <span style="color: #FF6827;">this</span> 会在函数声明的时候做绑定<br>　　●　根据上级的function中的this来做绑定，如果上级也是箭头函数，再上级查找，绑定以后就不再发生改变了，this不再多变<br>　　●　箭头函数本没有this，绑定后不再多变<br>　　●　箭头函数不可以做构造函数<br>　　●　箭头函数本身也没有arguments<br>　　●　如果该箭头函数外部包含function,在函数的调用时，箭头函数会将外部arguments拿来</p><p class="reference"><br>参考<br><a href="https://www.jianshu.com/p/fb5f900c663d" rel="external nofollow noopener noreferrer" target="_blank">https://www.jianshu.com/p/fb5f900c663d</a><br></p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6常用重要知识点</title>
      <link href="/blogs/javascript-es6-common-important-points.html"/>
      <url>/blogs/javascript-es6-common-important-points.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">ES6常用重要知识点</div><blockquote><p>记录ECMAScript6中常用的、重要的知识。<br>其它数组API、正则API、字符串API等比较简单，参考文档的demo即可，如阮一峰的<a href="http://es6.ruanyifeng.com/" rel="external nofollow noopener noreferrer" target="_blank">ECMAScript 6 入门</a>。</p></blockquote><h2 id="一、模板字符串"><a href="#一、模板字符串" class="headerlink" title="一、模板字符串"></a>一、模板字符串</h2><p>　　模板字符串就是一种字符串的新的表现形式，它解决了一些以前字符串的痛点，例如字符串和变量拼接、字符串换行。<br>　　其用法如下：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// a. 基本用法</span>    <span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token template-string"><span class="token string">` hello `</span></span>    <span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token string">' hello '</span>    <span class="token comment" spellcheck="true">// b. 字符串和变量拼接</span>    <span class="token keyword">var</span> s3 <span class="token operator">=</span> <span class="token string">" a "</span> <span class="token operator">+</span> s1 <span class="token operator">+</span> <span class="token string">" b "</span> <span class="token operator">+</span> s2<span class="token punctuation">;</span>    <span class="token keyword">var</span> s4 <span class="token operator">=</span> <span class="token template-string"><span class="token string">` a </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>s1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> b </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>s2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 减少了错误几率</span>    <span class="token comment" spellcheck="true">// c. 字符串换行</span>    <span class="token keyword">var</span> s5 <span class="token operator">=</span> <span class="token template-string"><span class="token string">`&lt;div>                &lt;p>                    &lt;span>123&lt;/span>                &lt;/p>                &lt;p></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>s2<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p>                &lt;p></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>s3<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p>                &lt;p></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>s1<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&lt;/p>            &lt;/div>`</span></span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="二、解构赋值"><a href="#二、解构赋值" class="headerlink" title="二、解构赋值"></a>二、解构赋值</h2><p>　　对象的解构赋值用法：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"abc"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 用解构赋值的方式获取name</span>    <span class="token keyword">let</span> <span class="token punctuation">{</span>name<span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 创建了一个变量name，值=obj.name</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "abc"</span>    <span class="token keyword">var</span> obj3 <span class="token operator">=</span> <span class="token punctuation">{</span>gender<span class="token punctuation">:</span> <span class="token string">"abc"</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> grade<span class="token punctuation">:</span> <span class="token string">"一年级"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token punctuation">{</span>gender<span class="token punctuation">,</span> height<span class="token punctuation">,</span> grade<span class="token punctuation">}</span> <span class="token operator">=</span> obj3<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建了gender=obj3.gender 、height=obj3.height、grade=obj3.grade</span></code></pre><p>　　解构赋值的意义所在 - 函数参数的解构赋值：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">{</span>width<span class="token punctuation">,</span> height<span class="token punctuation">,</span> age<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建了width、height、age三个局部变量，值来自于实参</span>        <span class="token comment" spellcheck="true">// 这样写代码又节省了一些字符</span>    <span class="token punctuation">}</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">{</span>        width<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>        height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>        age<span class="token punctuation">:</span> <span class="token number">50</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>　　解构赋值的其他用法：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"张三"</span><span class="token punctuation">,</span> age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 创建一个新的变量：objName，值=obj.name</span>    <span class="token keyword">var</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> objName<span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 创建了2个新变量</span>    <span class="token keyword">var</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span> objName2<span class="token punctuation">,</span> age<span class="token punctuation">:</span> objAge2<span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span></code></pre><h2 id="三、函数的扩展"><a href="#三、函数的扩展" class="headerlink" title="三、函数的扩展"></a>三、函数的扩展</h2><h3 id="1-rest参数"><a href="#1-rest参数" class="headerlink" title="1. rest参数"></a><span style="font-size: 18px;">1. rest参数</span></h3><p>　　使用背景：es6箭头函数内部不能使用arguments，为了弥补这个问题，rest参数应孕而生。<br>　　以前用arguments的写法：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// arguments是函数内部的一个局部变量，</span>        <span class="token comment" spellcheck="true">// arguments.length表示函数的实参的个数</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 3</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span></code></pre><p>　　使用rest参数写法：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// ...args就是rest参数</span>    <span class="token comment" spellcheck="true">// 产生了一个变量，这个变量是一个数组，数组里面包含了这个函数调用时传递的所有实参</span>    <span class="token keyword">function</span> <span class="token function">q</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 验证args是不是数组？</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "[object Array]"</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// true es5中的新方法</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">q</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　优点：arguments是伪数组，而rest参数是真数组</p><h3 id="2-箭头函数"><a href="#2-箭头函数" class="headerlink" title="2. 箭头函数"></a><span style="font-size: 18px;">2. 箭头函数</span></h3><p>　　场景：用于替换匿名函数。<br>　　基本用法：<br>　　无参的匿名函数：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// 匿名函数</span>    div<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你好'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 箭头函数</span>    div<span class="token punctuation">.</span>onclick <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你好'</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>　　有一个参数的匿名函数：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// 匿名函数</span>    <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 箭头函数</span>    <span class="token keyword">var</span> fn <span class="token operator">=</span> name <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 也等价于：</span>    <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>　　有2个或以上的参数的匿名函数：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// 匿名函数</span>    <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 箭头函数</span>    <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 切记：()不能省略</span>    <span class="token punctuation">}</span></code></pre><p>　　好处：有了箭头函数之后，我们的代码清晰了很多。</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> students <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    students<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    students<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 如果只需要一个参数</span>    students<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>value <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>　　箭头函数和普通匿名函数有哪些不同？<br>　　●　函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。<br>　　●　不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。<br>　　●　不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。<br>　　●　（不常用）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。<br>　　　　৹　generator函数现在经常用async替代</p><p>　　针对this对象的不同点，举个例子。<br>　　注意：<br>　　<span style="color: #FF0000;">普通匿名函数和具名函数，都有独立作用域，都可以决定函数内部的this值；</span><br>　　<span style="color: #FF0000;">箭头函数不具有独立作用域，它里面的this是由外层函数决定的。</span></p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token punctuation">{</span>        age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// es6中对象方法的箭头函数表示形式</span>        run<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// this:window</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// this是window</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        travel<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// this:p</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// this是p</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 推荐使用的方式☆☆☆：es6中对象方法的简写形式</span>        <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"say方法中的this："</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"say内部的延迟函数："</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// this是p</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span>    p<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">travel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="四、对象的扩展"><a href="#四、对象的扩展" class="headerlink" title="四、对象的扩展"></a>四、对象的扩展</h2><p>　　在ES6之前，需要通过 <a href="/blogs/javascript-inheritance.html#toc-heading-6">for…in 遍历属性或者jquery的 $.extend</a> 实现拷贝，在ES6之后，多了一些新的方法。</p><h3 id="1-Object-assign：实现拷贝继承"><a href="#1-Object-assign：实现拷贝继承" class="headerlink" title="1. Object.assign：实现拷贝继承"></a><span style="font-size: 18px;">1. Object.assign：实现拷贝继承</span></h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// Object.assign 就是进行对象的浅拷贝</span>    <span class="token keyword">var</span> source <span class="token operator">=</span> <span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">170</span><span class="token punctuation">,</span> className<span class="token punctuation">:</span> <span class="token string">"3年2班"</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 克隆一个新对象出来</span>    <span class="token keyword">var</span> newObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 也可以先创建目标对象</span>    <span class="token keyword">var</span> newObj2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>newObj2<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newObj2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-对象扩展运算符"><a href="#2-对象扩展运算符" class="headerlink" title="2. 对象扩展运算符"></a><span style="font-size: 18px;">2. 对象扩展运算符</span></h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> car <span class="token operator">=</span> <span class="token punctuation">{</span>brand<span class="token punctuation">:</span> <span class="token string">"BMW"</span><span class="token punctuation">,</span> price<span class="token punctuation">:</span> <span class="token string">"368000"</span><span class="token punctuation">,</span> length<span class="token punctuation">:</span> <span class="token string">"3米"</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 克隆一个跟car完全一样的对象出来：</span>    <span class="token keyword">var</span> car2 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>car<span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>car2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 新车子，跟car的长度不同，其他相同</span>    <span class="token keyword">var</span> car3 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>car<span class="token punctuation">,</span> length<span class="token punctuation">:</span> <span class="token string">"4米"</span><span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>car3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 在原对象的基础上新增属性</span>    <span class="token keyword">var</span> car4 <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token operator">...</span>car<span class="token punctuation">,</span> type<span class="token punctuation">:</span> <span class="token string">"SUV"</span><span class="token punctuation">}</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>car4<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 复制一个数组</span>    <span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> s2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>s1<span class="token punctuation">]</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="五、Promise"><a href="#五、Promise" class="headerlink" title="五、Promise"></a>五、Promise</h2><h3 id="1-为什么要有promise"><a href="#1-为什么要有promise" class="headerlink" title="1. 为什么要有promise"></a><span style="font-size: 18px;">1. 为什么要有promise</span></h3><p>　　Promise用于解决（回调地狱）的问题，所谓回调地狱，如下：</p><pre class=" language-javascript"><code class="language-javascript">    $<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/getUser"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>        $<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/getUserDetail"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            $<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/getCart"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                $<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/getBooks"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//...</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="2-Promise函数基本用法"><a href="#2-Promise函数基本用法" class="headerlink" title="2. Promise函数基本用法"></a><span style="font-size: 18px;">2. Promise函数基本用法</span></h3><p>　　把异步操作封装在一个promise对象中，通过执行resolve函数，告诉外界你可以执行下一步操作了。而执行的下一步操作，其实就是写在then的回调函数中的。</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你好'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"第一步"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"第二步"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 输出顺序：</span>    <span class="token comment" spellcheck="true">// 你好</span>    <span class="token comment" spellcheck="true">// 第一步</span>    <span class="token comment" spellcheck="true">// 你好</span>    <span class="token comment" spellcheck="true">// 第二步</span></code></pre><h3 id="3-Promise函数实现多层回调"><a href="#3-Promise函数实现多层回调" class="headerlink" title="3. Promise函数实现多层回调"></a><span style="font-size: 18px;">3. Promise函数实现多层回调</span></h3><p>　　上面的代码看上去似乎并没有解决回调地狱的问题，于是我们看下面的代码。</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第一步'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第二步'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'完成'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 输出顺序：</span>    <span class="token comment" spellcheck="true">// 第一步</span>    <span class="token comment" spellcheck="true">// 第二步    </span>    <span class="token comment" spellcheck="true">// 第一步</span>    <span class="token comment" spellcheck="true">// 第二步</span>    <span class="token comment" spellcheck="true">// 完成</span></code></pre><h3 id="4-Promise传参"><a href="#4-Promise传参" class="headerlink" title="4. Promise传参"></a><span style="font-size: 18px;">4. Promise传参</span></h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            $<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span><span class="token string">"/getUser"</span><span class="token punctuation">,</span> res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// res是从服务器中接收到的数据</span>                <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// res就表示上一个异步操作返回的参数值：从服务器中获取的数据</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h3 id="5-Promise函数错误处理"><a href="#5-Promise函数错误处理" class="headerlink" title="5. Promise函数错误处理"></a><span style="font-size: 18px;">5. Promise函数错误处理</span></h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 执行了resolve()表示异步操作是成功的</span>        <span class="token comment" spellcheck="true">// 执行了reject()表示异步操作是失败的</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                url<span class="token punctuation">:</span> <span class="token string">"/getBooks"</span><span class="token punctuation">,</span>                <span class="token function">success</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">// 成功获取数据</span>                    <span class="token function">resolve</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token function">error</span><span class="token punctuation">(</span>resError<span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token comment" spellcheck="true">// resError表示错误信息</span>                    <span class="token comment" spellcheck="true">// 如果失败，执行error方法</span>                    <span class="token comment" spellcheck="true">// 通过执行reject函数，把错误信息传递给外界</span>                    <span class="token function">reject</span><span class="token punctuation">(</span>resError<span class="token punctuation">)</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 第一种处理错误的方式：</span>    <span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// res表示请求成功时候获取到的数据</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>resError<span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>resError<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 第二种错误处理的方式：</span>    <span class="token function">getBooks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>res <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//成功了</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span>resError <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//这里也可以获取到错误信息</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>　　上面2种错误处理的方式，第二种更加推荐。<br>　　第二种方式更强大的地方在于：<br>　　不仅仅可以捕获到reject传递的参数，还可以捕获到成功的回调中发生的错误。</p><h2 id="六、async"><a href="#六、async" class="headerlink" title="六、async"></a>六、async</h2><p>　　async诞生于ES8，它其实是一个promise的语法糖。</p><h3 id="1-async函数基本用法"><a href="#1-async函数基本用法" class="headerlink" title="1. async函数基本用法"></a><span style="font-size: 18px;">1. async函数基本用法</span></h3><p>　　首先定义一个async函数，<br>　　await表示这行代码是一个异步操作，但是await必须在async函数内执行，<br>　　await下面的代码会在异步操作之后执行，这里的异步操作执行完毕其实就是reslove。</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span>resolve <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'你好'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">await</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第二步'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'第三步'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// 输出顺序：</span>    <span class="token comment" spellcheck="true">// 你好</span>    <span class="token comment" spellcheck="true">// 第二步    </span>    <span class="token comment" spellcheck="true">// 你好</span>    <span class="token comment" spellcheck="true">// 你好</span>    <span class="token comment" spellcheck="true">// 第三步</span></code></pre><h3 id="2-async处理返回值"><a href="#2-async处理返回值" class="headerlink" title="2. async处理返回值"></a><span style="font-size: 18px;">2. async处理返回值</span></h3><p>　　await操作可以有返回值，这个返回值表示promise操作成功的返回值。<br>　　前面的例子我们将async函数包装成了自执行函数，其实这不是必须的，只是因为await函数必须在async函数内执行。<br>　　我们也可以先创建一个async函数，然后在其内部使用async函数。<br>　　下面的代码实现一个需求，在say方法和run方法内部要获取await操作的返回值，同时要求先执行完毕say，再执行run。故有两个地方要做async函数：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">q</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 可以使用箭头函数</span>        say<span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'say方法：'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">q</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token comment" spellcheck="true">// 也可以使用普通匿名函数</span>        run<span class="token punctuation">:</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'run方法'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">q</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 需求，先执行完毕say，再执行run</span>    <span class="token keyword">var</span> fn <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">await</span> o1<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">await</span> o1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 输出顺序：</span>    <span class="token comment" spellcheck="true">// say方法</span>    <span class="token comment" spellcheck="true">// 你好</span>    <span class="token comment" spellcheck="true">// run方法</span>    <span class="token comment" spellcheck="true">// 你好</span></code></pre><h3 id="3-async错误处理"><a href="#3-async错误处理" class="headerlink" title="3. async错误处理"></a><span style="font-size: 18px;">3. async错误处理</span></h3><p>　　如果await里面执行的异步操作发生了reject，或者发生了错误，那么只能使用try…catch语法来进行错误处理</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">q</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">q</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="七、class"><a href="#七、class" class="headerlink" title="七、class"></a>七、class</h2><h3 id="1-与构造函数的对比"><a href="#1-与构造函数的对比" class="headerlink" title="1. 与构造函数的对比"></a><span style="font-size: 18px;">1. 与构造函数的对比</span></h3><p>　　下面的例子对比了构造函数方式和类方式的区别，更多关于构造函数的知识可查看<a href="http://www.wenyuanblog.com/blogs/javascript-inheritance.html">JS中的继承</a>。</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// 构造函数的方式</span>    <span class="token keyword">function</span> <span class="token function">Teacher</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Teacher<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>say <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'我是老师'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token string">"王大锤"</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 类的方式</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 构造方法</span>        <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`我叫</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">，今年</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">岁`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="2-类的用法"><a href="#2-类的用法" class="headerlink" title="2. 类的用法"></a><span style="font-size: 18px;">2. 类的用法</span></h3><p>　　下面的例子演示了类如何：添加实例方法，添加静态方法，以及类的继承。<br>　　其中：<br>　　●　一般创建一个类时都要添加一个<code>constructor</code>方法，也就是构造方法<br>　　●　类的静态成员包括静态属性、静态方法<br>　　　　৹　静态属性：通过类本身来访问：Person.maxAge<br>　　　　৹　静态方法：通过类本身来访问的一个方法：Person.born();</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>        <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 定义方法</span>        <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"大家好，我叫："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">"，今年："</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">+</span><span class="token string">"岁"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 定义静态方法</span>        <span class="token keyword">static</span> <span class="token function">born</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"小呆萌出生了"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 访问静态方法</span>    Person<span class="token punctuation">.</span><span class="token function">born</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// Student类继承自Person类</span>    <span class="token keyword">class</span> <span class="token class-name">Student</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 构造方法</span>        <span class="token function">constructor</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>grade<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 规定：必须调用父类构造方法，如果不调用就会报错</span>            <span class="token comment" spellcheck="true">// 调用父类构造方法，从而给子类的实例添加了name,age属性</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>grade<span class="token operator">=</span>grade<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h2 id="八、ES6浏览器兼容问题"><a href="#八、ES6浏览器兼容问题" class="headerlink" title="八、ES6浏览器兼容问题"></a>八、ES6浏览器兼容问题</h2><p>　　可以通过 <a href="https://www.babeljs.cn/" rel="external nofollow noopener noreferrer" target="_blank">babel</a> 解决。babel可以将任意版本的ES转换为任意旧版本的ES，甚至要求兼容哪些浏览器，或者说指定的版本。<br>　　一般都会集成在脚手架里，比如 vue-cli 内置了 babel，如果需要可以修改兼容的版本。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript初探之判断数据类型</title>
      <link href="/blogs/javascript-judge-data-type.html"/>
      <url>/blogs/javascript-judge-data-type.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">JavaScript初探之判断数据类型</div><blockquote><p>JavaScript中判断数据类型的几种方式。</p></blockquote><ul><li>typeof <ul><li>typeof只能判断：数字、字符串、布尔值、undefined、函数</li></ul></li><li><code>Object.prototype.toString.call()</code><ul><li>5　　　　　　‘[object Number]’</li><li>“abc”　　　　‘[object String]’</li><li>true　　　　　‘[object Boolean]’</li><li>null　　　　　‘[object Null]’</li><li>undefined　　‘[object Undefined]’</li><li>[1,3,5]　　　　‘[object Array]’</li><li>function(){}　　‘[object Function]’</li><li>new Date()　　‘[object Date]’</li><li>/abc/　　　　‘[object RegExp]’</li></ul></li><li>Array.isArray()　　es5中提出来的检测数组</li><li>isNaN()   </li><li>isInfinity()</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript初探之函数调用方式</title>
      <link href="/blogs/javascript-4-ways-to-call-a-function.html"/>
      <url>/blogs/javascript-4-ways-to-call-a-function.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">JavaScript初探之函数调用方式</div><blockquote><p>在<span style="color: #FF0000;">ES6之前</span>，函数内部的this是由该函数的调用方式决定的。<br>函数内部的this跟大小写、书写位置无关。<br>要想研究函数内部的this，只能通过这个函数的调用方式来决定。</p></blockquote><h2 id="一、函数调用"><a href="#一、函数调用" class="headerlink" title="一、函数调用"></a>一、函数调用</h2><p>　　函数内部的this指向window，<br>　　window对象中的方法都是全局函数；<br>　　window对象中的属性都是全局变量。<br>　　例1：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token punctuation">{</span>        age<span class="token punctuation">:</span> <span class="token number">15</span><span class="token punctuation">,</span>        say<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> f1 <span class="token operator">=</span> p<span class="token punctuation">.</span>say<span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// f1是函数</span>    <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 函数调用-->this：window       -->this.age=18</span></code></pre><p>　　例2：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Person<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>        constructor<span class="token punctuation">:</span> Person<span class="token punctuation">,</span>        say<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 函数的第一种调用方式：函数调用</span>    <span class="token comment" spellcheck="true">//  -->函数内部的this指向window</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　例3：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="二、方法调用"><a href="#二、方法调用" class="headerlink" title="二、方法调用"></a>二、方法调用</h2><p>　　函数内部的this指向调用该方法的对象。<br>　　例1：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// 方法调用方式</span>    <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>run <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p1<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// 打印结果：20</span></code></pre><p>　　例2：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> p2 <span class="token operator">=</span> <span class="token punctuation">{</span>        height<span class="token punctuation">:</span> <span class="token number">180</span><span class="token punctuation">,</span>        travel<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    p2<span class="token punctuation">.</span><span class="token function">travel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">// 打印结果：180</span></code></pre><p>　　例3：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> clear <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> length <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> tom <span class="token operator">=</span> <span class="token punctuation">{</span>c<span class="token punctuation">:</span> clear<span class="token punctuation">,</span> length<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    tom<span class="token punctuation">.</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 这里是方法调用的方式</span>    <span class="token comment" spellcheck="true">// 打印this.length 是50 还是100?</span>    <span class="token comment" spellcheck="true">// -->相当于：this是指向window还是指向tom呢？</span>    <span class="token comment" spellcheck="true">// -->结果为：100</span>    <span class="token comment" spellcheck="true">// -->this:tom</span>    <span class="token comment" spellcheck="true">// 结论：由于clear函数被当成tom.c()这种方法的形式来进行调用，所以函数内部的this指向调用该方法的对象：tom</span></code></pre><p>　　例4：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> clear <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> length <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> tony <span class="token operator">=</span> <span class="token punctuation">{</span>d<span class="token punctuation">:</span> clear<span class="token punctuation">,</span> length<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    tony<span class="token punctuation">.</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 方法调用的方式，所以clear函数内部的this指向tony的，</span></code></pre><h2 id="三、new调用（构造函数）"><a href="#三、new调用（构造函数）" class="headerlink" title="三、new调用（构造函数）"></a>三、new调用（构造函数）</h2><p>　　函数内部的this指向该构造函数的实例。<br>　　例1：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// 1、</span>    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 通过new关键字来调用的，那么这种方式就是构造函数的构造函数的调用方式，那么函数内部的this就是该构造函数的实例</span>    <span class="token keyword">var</span> _n <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">fn</span><span class="token punctuation">(</span><span class="token string">"小明"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// _n有个name属性，值为：小明</span>    <span class="token comment" spellcheck="true">// 2、</span>    <span class="token keyword">function</span> <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> _init <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>init<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// _init就是一个构造函数</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    jQuery<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>        constructor<span class="token punctuation">:</span> jQuery<span class="token punctuation">,</span>        length<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>        init<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// this可以访问到实例本身的属性，也可以访问到init.prototype中的属性</span>            <span class="token comment" spellcheck="true">// 这里的init.prototype并不是jQuery.prototype</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 100? 错误的</span>            <span class="token comment" spellcheck="true">// 正确答案：undefined</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><p>　　例2：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> _init <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>init<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// _init就是一个构造函数</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    jQuery<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>        constructor<span class="token punctuation">:</span> jQuery<span class="token punctuation">,</span>        length<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">,</span>        init<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// this指向init构造函数的实例</span>            <span class="token comment" spellcheck="true">// -->1、首先查看本身有没有length属性</span>            <span class="token comment" spellcheck="true">// -->2、如果本身没有该属性，那么去它的原型对象中查找</span>            <span class="token comment" spellcheck="true">// -->3、如果原型对象中没有，那么就去原型对象的原型对象中查找，最终一直找到根对象（Object.prototype）</span>            <span class="token comment" spellcheck="true">// -->4、最终都没有找到的话，我们认为该对象并没有该属性，如果获取该属性的值：undefined</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//100</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> $init <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>init<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 修改了init函数的默认原型，指向新原型</span>    $init<span class="token punctuation">.</span>prototype <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>    <span class="token function">jQuery</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="四、上下文调用方式-call、apply、bind"><a href="#四、上下文调用方式-call、apply、bind" class="headerlink" title="四、上下文调用方式(call、apply、bind)"></a>四、上下文调用方式(call、apply、bind)</h2><p>　　上下文调用方式有三种，call、apply、bind，这是一种最强大的调用方式。</p><h3 id="1-call和apply"><a href="#1-call和apply" class="headerlink" title="1. call和apply"></a><span style="font-size: 18px;">1. call和apply</span></h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// 上下文调用方式，有3种，call、apply、bind</span>    <span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// call方法的第一个参数决定了函数内部的this的值</span>    f1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    f1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> height<span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    f1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    f1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span>    f1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    f1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>    f1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>undefined<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　通过打印出来的结果，可以总结如下：<br>　　call方法的第一个参数：<br>　　●　如果是一个对象类型，那么函数内部的this指向该对象<br>　　●　如果是undefined、null，那么函数内部的this指向window<br>　　●　如果是数字，this：对应的Number构造函数的实例<br>　　　　例如：1 –&gt; new Number(1)<br>　　●　如果是字符串，this：String构造函数的实例<br>　　　　例如：”abc” –&gt; new String(“abc”)<br>　　●　如果是布尔值，this：Boolean构造函数的实例<br>　　　　例如：false –&gt; new Boolean(false)</p><p>　　上述代码可以用apply完全替换，但call和apply还有些许不同。<br>　　下面比较下<span style="color: #FF0000;">call和apply异同：</span><br>　　相同点：call和apply都可以改变函数内部的this的值<br>　　不同点：传参的形式不同<br>　　举个例子：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">toString</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> b <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 因为函数内部并没有使用this，所以第一个参数传什么都无所谓，这里传个null</span>    toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 打印出"1 3 5"</span>    toString<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 打印出"1 3 5"</span></code></pre><h3 id="2-bind"><a href="#2-bind" class="headerlink" title="2. bind"></a><span style="font-size: 18px;">2. bind</span></h3><p>　　bind方式一般人用的比较少，但有的时候具有一些举足轻重的作用。<br>　　注意：<br>　　先看下面这个例子：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>        age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>        run<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// this:obj</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// this指向window</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 18？是错误的</span>                <span class="token comment" spellcheck="true">// undefined是正确的</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    obj<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　为什么打印出来是 undefined 而不是 18 呢？根据本文最开始所说的，要研究函数内部的 this，就先确定这个函数是谁调用的。此时 setTimeout 中的这个回调函数是浏览器内核自己调用的，此时的 this 指向window。</p><p>　　那怎样才能在上述代码的定时器里访问到对象本身的 age 属性呢（即访问对象的 this 属性）？<br>　　我们知道，run 里面的 this 指向 obj，setTimeout 里面的 this 指向 window。<br>　　现在我们需要一种方式，把 setTimeout 里的 this 指向 run 里的this。</p><p>　　<span style="color: #FF0000;">在 bind 函数出现之前</span>，我们通过在作用域外面创建一个变量 _that 等于 this，这样 setTimeout 中就能访问上层作用域的变量了，如下：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>        age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>        run<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//this:obj</span>            <span class="token keyword">var</span> _that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>_that<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">// 此时打印出18</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    obj<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　<span style="color: #FF0000;">在 bind 函数出现之后（bind是es5中才有的【IE9+】）</span>，我们可以这样实现：将 setTimeout 里的回调函数包装起来，然后对这个函数调用 bind 方法，并传入一个参数 this，根据作用域的概念，这个 this 和 run 里面的 this 是同级的，代码如下：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>        age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">,</span>        run<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// this:obj</span>            <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// this:obj</span>            <span class="token comment" spellcheck="true">// 通过执行了bind方法，匿名函数本身并没有执行，只是改变了该函数内部的this的值，指向obj</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    obj<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　下面列举几个<span style="color: #FF0000;">bind基本用法</span>：<br>　　例1：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">speed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 执行了bind方法之后，产生了一个新函数，这个新函数里面的逻辑和原来还是一样的，唯一的不同是this指向{ seconds:100 }</span>    <span class="token keyword">var</span> speedBind <span class="token operator">=</span> speed<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">{</span>seconds<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">speedBind</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 100</span></code></pre><p>　　例2（上面例1代码的简化版）：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>seconds<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">{</span>seconds<span class="token punctuation">:</span> <span class="token number">360</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 360</span></code></pre><p>　　例3（bind函数在对象中）：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> <span class="token string">"西瓜"</span><span class="token punctuation">,</span>        drink<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// this指向了：{ name:"橙汁" }</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 如果在bind以后还想取到“西瓜”</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"橙汁"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    obj<span class="token punctuation">.</span><span class="token function">drink</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// "橙汁"</span></code></pre><p>　　例4（bind函数在定时器中）：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> p10 <span class="token operator">=</span> <span class="token punctuation">{</span>        height<span class="token punctuation">:</span> <span class="token number">88</span><span class="token punctuation">,</span>        run<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// this</span>            <span class="token function">setInterval</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>height<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 88</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    p10<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 88</span></code></pre><h3 id="3-bind和call、apply区别"><a href="#3-bind和call、apply区别" class="headerlink" title="3. bind和call、apply区别"></a><span style="font-size: 18px;">3. bind和call、apply区别</span></h3><p>　　call、apply是立刻执行了这个函数，并且执行过程中绑定了this的值；<br>　　bind并没有立刻执行这个函数，而是创建了一个新的函数，新函数绑定了this的值。</p><h3 id="4-如何解决bind的浏览器兼容性问题"><a href="#4-如何解决bind的浏览器兼容性问题" class="headerlink" title="4. 如何解决bind的浏览器兼容性问题"></a><span style="font-size: 18px;">4. 如何解决bind的浏览器兼容性问题</span></h3><p>　　手写实现一个 bind 方法。<br>　　思考逻辑：<br>　　●　bind 方法需要放在函数的原型中<br>　　　　৹　<code>fn.__proto__</code> === fn的构造函数.prototype<br>　　　　৹　所有的函数对象的构造函数是Function<br>　　　　　　৹　Function 创建了 Function<br>　　　　　　৹　Function 创建了 Object<br>　　　　　　৹　Function 创建了 fn</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// 我们实现的bind方法</span>    Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>_bind <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 这里的this其实fn</span>        <span class="token comment" spellcheck="true">// target表示新函数的内部的this的值</span>        <span class="token comment" spellcheck="true">// 利用闭包创建一个内部函数，返回那个所谓的新函数</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 执行fn里面的逻辑</span>            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// this.apply(target)</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 等价于：</span>        <span class="token comment" spellcheck="true">// var _that=this;</span>        <span class="token comment" spellcheck="true">// return function(){</span>        <span class="token comment" spellcheck="true">//     _that.call(target);</span>        <span class="token comment" spellcheck="true">// }</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> _f1 <span class="token operator">=</span> fn<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token punctuation">{</span>age<span class="token punctuation">:</span> <span class="token number">18</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><p>　　在ES6的箭头函数之前的时代，想要判断一个函数内部的this指向谁，就是根据上面的四种方式来决定的。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript初探之闭包</title>
      <link href="/blogs/javascript-closure.html"/>
      <url>/blogs/javascript-closure.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">JavaScript初探之闭包</div><blockquote><p>JavaScript中的变量作用域、作用域链与闭包。</p></blockquote><h2 id="一、变量作用域"><a href="#一、变量作用域" class="headerlink" title="一、变量作用域"></a>一、变量作用域</h2><p>　　要理解闭包，首先要从作用域开始。<br>　　●　变量作用域的概念：就是一个变量可以使用的范围<br>　　●　JS中首先有一个最外层的作用域：称之为全局作用域<br>　　●　JS中还可以通过函数创建出一个独立的作用域，其中函数可以嵌套，所以作用域也可以嵌套</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token comment" spellcheck="true">// 多级作用域</span>    <span class="token comment" spellcheck="true">// --> 1级作用域</span>    <span class="token keyword">var</span> gender<span class="token operator">=</span><span class="token string">"男"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// gender: 可以访问</span>        <span class="token comment" spellcheck="true">// age: 可以访问</span>        <span class="token comment" spellcheck="true">// height: 不能访问</span>        <span class="token comment" spellcheck="true">// --> 2级作用域</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// gender: 可以访问</span>            <span class="token comment" spellcheck="true">// age: 可以访问</span>            <span class="token comment" spellcheck="true">// height：可以访问</span>            <span class="token comment" spellcheck="true">// --> 3级作用域</span>            <span class="token keyword">var</span> height<span class="token operator">=</span><span class="token number">180</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">var</span> age<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>　　注意：JS中变量的声明和赋值是在两个不同时期的。如下，当fn函数执行的时候，首先找到函数内部所有的变量、函数声明，把它们放在作用域中，给变量一个初始值：<span style="color: #FF0000;">undefined</span>，此时变量可以访问。之后才是逐条执行代码，在执行代码的过程中，如果有赋值语句，对变量进行赋值。</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// undefined</span>        <span class="token keyword">var</span> age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 18</span>    <span class="token punctuation">}</span></code></pre><h2 id="二、作用域链"><a href="#二、作用域链" class="headerlink" title="二、作用域链"></a>二、作用域链</h2><p>　　由于作用域是相对于变量而言的，而如果存在多级作用域，这个变量又来自于哪里？这个问题就需要好好地探究一下了，我们把这个变量的查找过程称之为变量的作用域链。<br>　　作用域链的意义：查找变量（确定变量来自于哪里，变量是否可以访问）<br>　　简单来说，作用域链可以用以下几句话来概括：（或者说：确定一个变量来自于哪个作用域）<br>　　Step1 查看当前作用域，如果当前作用域声明了这个变量，就确定结果<br>　　Step2 查找当前作用域的上级作用域，也就是当前函数的上级函数，看看上级函数中有没有声明<br>　　Step3 再查找上级函数的上级函数，直到全局作用域为止<br>　　Step4 如果全局作用域中也没有，我们就认为这个变量未声明（抛出异常：xxx is not defined）<br>　　举例：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span>callback<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span>        <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span>    <span class="token function">fn</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// age is not defined</span>        <span class="token comment" spellcheck="true">// 分析：age变量：</span>        <span class="token comment" spellcheck="true">// 1.查找当前作用域：并没有</span>        <span class="token comment" spellcheck="true">// 2.查找上一级作用域：全局作用域</span>        <span class="token comment" spellcheck="true">// -->难点：看上一级作用域，不是看函数在哪里调用，而是看函数在哪里编写</span>        <span class="token comment" spellcheck="true">// -->因为这种特点，我们通常会把作用域说成是：词法作用域</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><h2 id="三、闭包"><a href="#三、闭包" class="headerlink" title="三、闭包"></a>三、闭包</h2><h3 id="1-闭包的概念"><a href="#1-闭包的概念" class="headerlink" title="1. 闭包的概念"></a><span style="font-size: 18px;">1. 闭包的概念</span></h3><p>　　关于闭包的概念，很多书和文档的描述都不一致。<br>　　在红宝书中是这样认为的：如果有一个外层函数fn，它有一个内层匿名函数，那么此时可以把这个内层的匿名函数称为闭包函数。<br>　　也就是，<span style="color: #FF0000;">如果某个函数能够访问外层函数的变量，那么这个函数称为闭包函数。</span></p><p>　　误区：必须return函数。<br>　　闭包的概念里并没有规定是否要有return，但一般return才有意义。可以return一个函数，也可以return一个对象。</p><h3 id="2-闭包的问题"><a href="#2-闭包的问题" class="headerlink" title="2. 闭包的问题"></a><span style="font-size: 18px;">2. 闭包的问题</span></h3><p>　　举下面这个例子，思考三次执行<code>f1()</code>分别输出什么。</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> a<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            a<span class="token operator">++</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> f1<span class="token operator">=</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// f1指向匿名函数</span>    <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 6</span>    <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 7</span>    <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 8</span></code></pre><p>　　三次执行<code>f1()</code>分别输出 6，7，8。下面分析下原因：<br>　　代码执行到<code>var f1=fn()</code>，fn函数执行完毕，返回匿名函数。一般认为函数执行完毕，变量就会释放，但是此时由于js引擎发现匿名函数要使用a变量，所以a变量并不能得到释放，而是把a变量放在匿名函数可以访问到的地方去了。<br>　　也就是，<span style="color: #FF0000;">a变量存在于f1函数可以访问到的地方，当然此时a变了只能被f1函数访问。</span></p><h3 id="3-闭包问题的产生原因"><a href="#3-闭包问题的产生原因" class="headerlink" title="3. 闭包问题的产生原因"></a><span style="font-size: 18px;">3. 闭包问题的产生原因</span></h3><p>　　函数执行完毕后，作用域中保留了最新的a变量的值。</p><h3 id="4-闭包内存释放"><a href="#4-闭包内存释放" class="headerlink" title="4. 闭包内存释放"></a><span style="font-size: 18px;">4. 闭包内存释放</span></h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            a<span class="token operator">++</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> q1 <span class="token operator">=</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 要想释放q1里面保存的a，只能通过释放q1</span>    q1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 或者 q1 = undefined</span></code></pre><h3 id="5-闭包的应用场景"><a href="#5-闭包的应用场景" class="headerlink" title="5. 闭包的应用场景"></a><span style="font-size: 18px;">5. 闭包的应用场景</span></h3><p>　　●　模块化（利用闭包的原理，将一个大的系统放在一个自调用函数中）<br>　　●　防止变量被破坏</p><p>　　举一个我在学习过程中看到的一个比较好的例子，代码和相关注释如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>闭包的应用<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token comment" spellcheck="true">/*    * 需求描述：    * 有一个KTV，用户需要满足最低消费后才能进行支付（保护变量，将变量定义在函数内部）    * 当来了一个身份特殊的朋友要来唱K时候，老板需要去修改最低消费的金额    * 但是并不能让老板直接去修改leastPrice，或者说不能把leastPrice作为全局变量    * 需要进行id验证，确认是老板后，才能修改leastPrice    * */</span>    <span class="token comment" spellcheck="true">//模块化思想：也是一种设计模式</span>    <span class="token keyword">var</span> ktv <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">KTV</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//为了保护leastPrice变量，将它放在函数内部</span>        <span class="token keyword">var</span> leastPrice <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">var</span> total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 购物</span>            buy<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>price<span class="token punctuation">)</span> <span class="token punctuation">{</span>                total <span class="token operator">+</span><span class="token operator">=</span> price<span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            <span class="token comment" spellcheck="true">// 结账</span>            pay<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>total <span class="token operator">&lt;</span> leastPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'请继续购物'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'欢迎下次光临'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            editLeast<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>id<span class="token punctuation">,</span> price<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>id <span class="token operator">===</span> <span class="token number">888</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    leastPrice <span class="token operator">=</span> price<span class="token punctuation">;</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"现在最低消费金额为："</span><span class="token punctuation">,</span> leastPrice<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'权限不足'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>　　只有理解了作用域链，才能很好地理解闭包。闭包的应用非常广泛，在JS中要实现模块化，最简单的就是使用闭包。未来在开发一些组件的时候，可以多使用闭包。<br>　　例如下面两个组件（仅是举例）：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> datepicker<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> hour<span class="token operator">=</span><span class="token number">3600</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'日期控件初始化'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> common<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">{</span>            isStr<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>            isNumber<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript初探之原型链</title>
      <link href="/blogs/javascript-prototype-chain.html"/>
      <url>/blogs/javascript-prototype-chain.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">JavaScript初探之原型链</div><blockquote><p>理解JavaScript中的原型链。</p></blockquote><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p>　　JS里面的对象可能会有父对象，父对象还会有父对象，。。。。。祖先，类似家族族谱。<br>　　其中，<span style="color: #FF0000;">构造函数的prototype对象，称为原型对象。</span><br>　　例如：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>say<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> p1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> p2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> p3<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　<code>Person.prototype</code>是 p1 p2 p3 的原型对象，即<code>Person.prototype</code>是Person构造函数的<span style="color: #FF0000;">实例</span>的原型对象。<br>　　同理，因为Person的构造函数是Function，所以Person的原型对象是：<code>Function.prototype</code>。</p><h2 id="二、原型链的根本：继承"><a href="#二、原型链的根本：继承" class="headerlink" title="二、原型链的根本：继承"></a>二、原型链的根本：继承</h2><p>　　JS的对象中几乎都会有一个<code>__proto__</code>属性，指向它的父对象，可以实现让该对象访问到父对象中相关属性。<br>　　关于继承，可以查看<a href="/blogs/javascript-inheritance.html">JS中的继承</a>一文。</p><h2 id="三、原型链的根对象：Object-prototype"><a href="#三、原型链的根对象：Object-prototype" class="headerlink" title="三、原型链的根对象：Object.prototype"></a>三、原型链的根对象：Object.prototype</h2><p>　　对于 <code>var arr=[1,3,5]</code><br>　　通过 <code>arr.__proto__</code> 找到 <code>Array.prototype</code><br>　　通过 <code>arr.__proto__.__proto__</code> 找到 根对象</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">var</span> cat<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// cat.__proto__：Animal.prototype</span>    <span class="token comment" spellcheck="true">// cat.__proto__.__proto__：根对象</span></code></pre><p>　　错误的理解：万物继承自Object<br>　　正确的理解：万物继承自Object.prototype</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>　　●　原型链是通过继承实现的关系图<br>　　●　继承的核心是通过<code>__proto__</code>将若干个对象连接起来<br>　　●　整个原型链的根对象是<code>Object.prototype</code></p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript初探之继承</title>
      <link href="/blogs/javascript-inheritance.html"/>
      <url>/blogs/javascript-inheritance.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">JavaScript初探之继承</div><blockquote><p>JS中继承的概念，为什么要使用继承，以及五种继承方式。</p></blockquote><h2 id="一、JS中继承的概念"><a href="#一、JS中继承的概念" class="headerlink" title="一、JS中继承的概念"></a>一、JS中继承的概念</h2><p>　　通过<span style="color: #FF0000;">某种方式</span>让一个对象可以访问到另一个对象中的属性和方法，我们把这种方式称之为继承。（并不是所谓的xxx extends yyy）</p><h2 id="二、为什么要使用继承"><a href="#二、为什么要使用继承" class="headerlink" title="二、为什么要使用继承"></a>二、为什么要使用继承</h2><p>　　有些对象会有方法(动作、行为)，而这些方法都是函数，如果把这些方法和函数都放在构造函数中声明就会导致内存的浪费。<br>　　如下，通过调用构造函数的方式来创建对象，Person是p1、p2的构造函数。所有的Person对象都有say方法，并且功能相似，但是他们占据了不同的内存，会导致内存浪费（内存泄露）</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>say<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> p1<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> p2<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>say <span class="token operator">===</span> p2<span class="token punctuation">.</span>say<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// false</span></code></pre><h2 id="三、继承的五种方式"><a href="#三、继承的五种方式" class="headerlink" title="三、继承的五种方式"></a>三、继承的五种方式</h2><h3 id="1-原型链继承1"><a href="#1-原型链继承1" class="headerlink" title="1. 原型链继承1"></a><span style="font-size: 18px;">1. 原型链继承1</span></h3><pre class=" language-javascript"><code class="language-javascript">    Person<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>say<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span>    <span class="token punctuation">}</span></code></pre><p>　　缺点：添加1、2个方法无所谓，但是如果方法很多会导致过多的代码冗余</p><h3 id="2-原型链继承2"><a href="#2-原型链继承2" class="headerlink" title="2. 原型链继承2"></a><span style="font-size: 18px;">2. 原型链继承2</span></h3><p>　　第一种方法的变种，<span style="color: #FF0000;">替换默认的prototype对象</span>。<br>　　注意点：<br>　　●　一般情况下，应该先改变原型对象，再创建对象<br>　　●　一般情况下，对于新原型，会添加一个<code>constructor</code>属性，将它指向当前构造函数本身，从而不破坏原有的原型对象的结构</p><pre class=" language-javascript"><code class="language-javascript">    Person<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 切记不能忘记</span>        constructor<span class="token punctuation">:</span>Person<span class="token punctuation">,</span>        say<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        run<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"正在进行百米冲刺"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h3 id="3-拷贝继承（混入继承：mixin）"><a href="#3-拷贝继承（混入继承：mixin）" class="headerlink" title="3. 拷贝继承（混入继承：mixin）"></a><span style="font-size: 18px;">3. 拷贝继承（混入继承：mixin）</span></h3><p>　　场景：有时候想使用某个对象中的属性，但是又不能直接修改它，于是就可以创建一个该对象的拷贝。<br>　　举个例子：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> o1<span class="token operator">=</span><span class="token punctuation">{</span> age<span class="token punctuation">:</span><span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> o2 <span class="token operator">=</span> o1<span class="token punctuation">;</span>    o2<span class="token punctuation">.</span>age<span class="token operator">=</span><span class="token number">18</span><span class="token punctuation">;</span>      </code></pre><p>　　上面的代码修改了o2对象的age属性 ，由于o2对象跟o1对象是同一个对象，所以此时o1对象的age属性也被修改了。</p><p>　　拷贝继承的原理很简单，主要是三个步骤：<br>　　① 已经拥有了源对象<br>　　② 创建一个o3对象的拷贝(克隆)，可以通过for…in循环<br>　　③ 修改克隆对象的属性</p><p>　　下面我们封装一个函数用于拷贝继承：</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">extend</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>source<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>key <span class="token keyword">in</span> source<span class="token punctuation">)</span><span class="token punctuation">{</span>            target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token operator">=</span>source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> target<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">extend</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>source<span class="token punctuation">)</span></code></pre><p>　　以上封装的其实是一种<span style="color: #FF0000;">浅拷贝</span>，浅拷贝只是拷贝一层属性，没有内部对象；<span style="color: #FF0000;">深拷贝</span>其实是利用了递归的原理，将对象的若干层属性拷贝出来。</p><p>　　由于拷贝继承在实际开发中使用场景非常多，所以很多库都对此有了实现:<br>　　jquery：$.extend</p><pre class=" language-javascript"><code class="language-javascript">    $<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span>source<span class="token punctuation">)</span></code></pre><p>　　es6：对象扩展运算符</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> source<span class="token operator">=</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"李白"</span><span class="token punctuation">,</span>age<span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 让target是一个新对象，同时拥有了name、age属性</span>    <span class="token keyword">var</span> target<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token operator">...</span>source <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 拷贝的同时修改age为18</span>    <span class="token keyword">var</span> target2<span class="token operator">=</span><span class="token punctuation">{</span> <span class="token operator">...</span>source<span class="token punctuation">,</span> age<span class="token punctuation">:</span><span class="token number">18</span> <span class="token punctuation">}</span></code></pre><h3 id="4-原型式继承（道格拉斯在蝴蝶书中提出来的）"><a href="#4-原型式继承（道格拉斯在蝴蝶书中提出来的）" class="headerlink" title="4. 原型式继承（道格拉斯在蝴蝶书中提出来的）"></a><span style="font-size: 18px;">4. 原型式继承（道格拉斯在蝴蝶书中提出来的）</span></h3><p>　　场景：<br>　　●　创建一个纯洁的对象：对象什么属性都没有<br>　　●　创建一个继承自某个父对象的子对象<br>　　使用方式：<br>　　●　空对象</p><pre class=" language-javascript"><code class="language-javascript">    Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span></code></pre><p>　　●　继承自某个父对象的子对象</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">var</span> o1<span class="token operator">=</span><span class="token punctuation">{</span> say<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">}</span>    <span class="token keyword">var</span> o2<span class="token operator">=</span>Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>o1<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="5-借用构造函数实现继承"><a href="#5-借用构造函数实现继承" class="headerlink" title="5. 借用构造函数实现继承"></a><span style="font-size: 18px;">5. 借用构造函数实现继承</span></h3><p>　　场景：适用于2种构造函数之间逻辑有相似的情况<br>　　原理：函数的call、apply调用方式</p><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">Animal</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token operator">=</span>age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span>age<span class="token punctuation">,</span>address<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 将Animal函数内部的this指向Person的实例</span>        Animal<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 等价于 Animal.apply(this, [name,age])</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>address<span class="token operator">=</span>address<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>　　以上代码用借用构造函数实现<br>　　局限性：Animal（父类构造函数）的代码必须完全适用于Person（子类构造函数）</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>　　以上介绍的都是日常开发中一些比较经典的继承方式，还有一些其它的继承方式，比如：寄生继承、寄生组合继承等，都可以在犀牛书和红宝书中查阅到。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS3新特性概览</title>
      <link href="/blogs/css3-new-features.html"/>
      <url>/blogs/css3-new-features.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">CSS3新特性概览</div><blockquote><p>CSS3常用新特性：包含样式、选择器、颜色渐变、2D/3D转换、动画、布局等。</p></blockquote><h2 id="一、CSS3新特性之样式篇"><a href="#一、CSS3新特性之样式篇" class="headerlink" title="一、CSS3新特性之样式篇"></a>一、CSS3新特性之样式篇</h2><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a><span style="font-size: 18px;">1. 背景</span></h3><p>　　●　<span style="color: #FF0000;"> background-origin </span><br>　　　作用：规定背景图片的定位区域。<br>　　　备注：默认盒子的背景图片是在盒子的内边距左上角对齐设置。</p><pre class=" language-css"><code class="language-css"><span class="token property">background-origin</span><span class="token punctuation">:</span> padding-box<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 背景图像相对内边距定位（默认值） */</span><span class="token property">background-origin</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 背景图像相对边框定位【以边框左上角为参照进行位置设置】 */</span><span class="token property">background-origin</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 背景图像相对内容区域定位【以内容区域左上角为参照进行位置设置】 */</span></code></pre><p>　　●　<span style="color: #FF0000;"> background-clip </span><br>　　　作用：规定背景的绘制区域。</p><pre class=" language-css"><code class="language-css"><span class="token property">background-clip</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 背景被裁切到边框盒子位置 【将背景图片在整个容器中显示】 */</span><span class="token property">background-clip</span><span class="token punctuation">:</span> padding-box<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 背景被裁切到内边距区域【将背景图片在内边距区域（包含内容区域）显示】 */</span><span class="token property">background-clip</span><span class="token punctuation">:</span> content-box<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 背景被裁切到内容区域【将背景图片在内容区域显示】 */</span></code></pre><p>　　●　<span style="color: #FF0000;"> background-size </span><br>　　　作用：规定背景图片的尺寸。</p><pre class=" language-css"><code class="language-css"><span class="token property">background-size</span><span class="token punctuation">:</span> cover<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将背景图片按照原来的缩放比，铺满整个容器 */</span><span class="token property">background-size</span><span class="token punctuation">:</span> contain<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 将背景图片按照原来的缩放比，完整的显示到容器中，不确定是否会将容器填充满 */</span></code></pre><h3 id="2-边框"><a href="#2-边框" class="headerlink" title="2. 边框　　"></a><span style="font-size: 18px;">2. 边框</span>　　</h3><p>　　●　<span style="color: #FF0000;"> box-shadow </span><br>　　　作用：盒子阴影。</p><pre class=" language-css"><code class="language-css"><span class="token property">box-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span>px <span class="token number">0</span>px <span class="token number">10</span>px red,            <span class="token number">5</span>px -<span class="token number">5</span>px <span class="token number">10</span>px blue<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/*    第一个0px，代表阴影在水平方向的偏移量（正数向右，负数向左）    第二个0px，代表阴影在垂直方向的偏移量（正数向下，负数向上）    第三个10px，代表阴影的模糊度（不能设置负数）    设置多个阴影，使用逗号隔开*/</span></code></pre><p>　　●　<span style="color: #FF0000;"> border-radius </span><br>　　　作用：边框圆角。</p><pre class=" language-css"><code class="language-css"><span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid red<span class="token punctuation">;</span><span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">10</span>px<span class="token punctuation">;</span></code></pre><p>　　●　<span style="color: #FF0000;"> border-image </span><br>　　　作用：边框图片。</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 设置边框图片 */</span><span class="token property">border-image-source</span><span class="token punctuation">:</span> <span class="token url">url("2.png")</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 边框图片裁切 : 不需要带单位*/</span><span class="token property">border-image-slice</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 设置边框图片的平铺方式（stretch是默认的拉伸，round和repeat都是平铺，在图片不能显示完整处有略微差别，一般推荐round） */</span><span class="token comment" spellcheck="true">/* border-image-repeat: stretch; */</span><span class="token property">border-image-repeat</span><span class="token punctuation">:</span> round<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* border-image-repeat: repeat; */</span><span class="token property">border-image-width</span><span class="token punctuation">:</span> <span class="token number">20</span>px<span class="token punctuation">;</span></code></pre><h3 id="3-文本"><a href="#3-文本" class="headerlink" title="3. 文本"></a><span style="font-size: 18px;">3. 文本</span></h3><p>　　●　<span style="color: #FF0000;"> text-shadow </span><br>　　　作用：设置文本阴影。</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 同盒子阴影 */</span><span class="token property">text-shadow</span><span class="token punctuation">:</span> <span class="token number">0</span>px <span class="token number">0</span>px <span class="token number">10</span>px red<span class="token punctuation">;</span></code></pre><h2 id="二、CSS3新特性之选择器篇"><a href="#二、CSS3新特性之选择器篇" class="headerlink" title="二、CSS3新特性之选择器篇"></a>二、CSS3新特性之选择器篇</h2><h3 id="1-属性选择器"><a href="#1-属性选择器" class="headerlink" title="1. 属性选择器"></a><span style="font-size: 18px;">1. 属性选择器</span></h3><p>　　●　<code>[属性名=值] {}</code><br>　　●　<code>[属性名] {}</code>　　　　匹配对应的属性即可<br>　　●　<code>[属性名^=值] {}</code>　　以值开头<br>　　●　<code>[属性名*=值] {}</code>　　包含<br>　　●　<code>[属性名$=值] {}</code>　　以值结束</p><pre class=" language-css"><code class="language-css"><span class="token selector">p<span class="token attribute">[class$="o"]</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-结构伪类选择器"><a href="#2-结构伪类选择器" class="headerlink" title="2. 结构伪类选择器"></a><span style="font-size: 18px;">2. 结构伪类选择器</span></h3><p>　　●　<code>:first-child {}</code>　　　　　选中父元素中第一个子元素<br>　　●　<code>:last-child {}</code>　　　　　选中父元素中最后一个子元素<br>　　●　<code>:nth-child(n) {}</code>　　　　选中父元素中正数第n个子元素<br>　　●　<code>:nth-last-child(n) {}</code>　　选中父元素中倒数第n个子元素</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 选中li标签且该标签必须是父元素中第一个子元素 */</span><span class="token selector">li<span class="token pseudo-class">:first-child</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 选中li标签且该标签必须是父元素中倒数第三个子元素 */</span><span class="token selector">li<span class="token pseudo-class">:nth-last-child(3)</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span>red<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　备注：<br>　　●　n 的取值大于等于0<br>　　●　n 可以设置预定义的值<br>　　　　৹　odd：选中奇数位置的元素<br>　　　　৹　even：选中偶数位置的元素<br>　　●　可以是一个表达式：an+b的格式</p><h3 id="3-其他选择器"><a href="#3-其他选择器" class="headerlink" title="3. 其他选择器"></a><span style="font-size: 18px;">3. 其他选择器</span></h3><p>　　●　<code>:target</code>　　　　　　被锚链接指向的时候会触发该选择器<br>　　●　<code>::selection</code>　　　　当被鼠标选中的时候的样式<br>　　●　<code>::first-line</code>　　　　选中第一行<br>　　●　<code>::first-letter</code>　　　选中第一个字符</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 当锚链接指向的时候会触发该选择器 */</span><span class="token selector">p<span class="token pseudo-class">:target</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* 当使用鼠标选中（框选）时候的样式 */</span><span class="token selector">p<span class="token pseudo-element">::selection</span> </span><span class="token punctuation">{</span>    <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="三、CSS3新特性之颜色渐变"><a href="#三、CSS3新特性之颜色渐变" class="headerlink" title="三、CSS3新特性之颜色渐变"></a>三、CSS3新特性之颜色渐变</h2><h3 id="1-线性渐变"><a href="#1-线性渐变" class="headerlink" title="1. 线性渐变"></a><span style="font-size: 18px;">1. 线性渐变</span></h3><p>　　需要有三要素：<br>　　① 开始颜色和结束颜色<br>　　② 渐变的方向<br>　　③ 渐变的范围</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 实现线性渐变 */</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>    to right,    red,    blue<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 加百分比实现线性渐变：红色从20%起开始向蓝色渐变 */</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">linear-gradient</span><span class="token punctuation">(</span>    to right,    red <span class="token number">50%</span>,    blue<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>　　备注：<br>　　表示方向：<br>　　① to + right | top | bottom | left<br>　　② 通过角度表示一个方向（角度增加，沿顺时针方向渐变）：<br>　　　　0deg 【从下向上渐变】<br>　　　　90deg【从左向右】</p><h3 id="2-径向渐变"><a href="#2-径向渐变" class="headerlink" title="2. 径向渐变"></a><span style="font-size: 18px;">2. 径向渐变</span></h3><p>　　需要确定圆心位置和半径</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 径向渐变 */</span><span class="token property">background-image</span><span class="token punctuation">:</span> <span class="token function">radial-gradient</span><span class="token punctuation">(</span>    <span class="token number">100</span>px at center,    red,    blue<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h2 id="四、2D转换"><a href="#四、2D转换" class="headerlink" title="四、2D转换"></a>四、2D转换</h2><h3 id="1-位移"><a href="#1-位移" class="headerlink" title="1. 位移"></a><span style="font-size: 18px;">1. 位移</span></h3><p>　　<code>transform: translate(x,y);</code><br>　　备注：位移是相对元素自身的位置发生位置改变</p><h3 id="2-旋转"><a href="#2-旋转" class="headerlink" title="2. 旋转"></a><span style="font-size: 18px;">2. 旋转</span></h3><p>　　<code>transform: rotate(60deg);</code><br>　　备注：取值为角度，正数代表顺时针旋转，负数代表逆时针旋转。</p><h3 id="3-缩放"><a href="#3-缩放" class="headerlink" title="3. 缩放"></a><span style="font-size: 18px;">3. 缩放</span></h3><p>　　<code>transform: scale(0.5,1);</code><br>　　备注：<br>　　① 取值为倍数关系，缩小大于0小于1，放大设置大于1<br>　　② 取值写一个数时，对宽和高做相同比例缩放；取值为两个数时，前者宽、后者高</p><h3 id="4-倾斜"><a href="#4-倾斜" class="headerlink" title="4. 倾斜"></a><span style="font-size: 18px;">4. 倾斜</span></h3><p>　　<code>transform: skew(30deg,30deg);</code><br>　　备注：<br>　　① 第一个值代表沿着x轴方向倾斜<br>　　② 第二个值代表沿着y轴方向倾斜</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.one</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">0</span> auto<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.box</span><span class="token pseudo-class">:hover</span> <span class="token class">.one</span> </span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* 2d转换位移：改变元素位置 */</span>            <span class="token comment" spellcheck="true">/* transform: translate(100px, 100px); */</span>            <span class="token comment" spellcheck="true">/* 2d转换旋转：设置的是角度 */</span>            <span class="token comment" spellcheck="true">/* transform: rotate(60deg); */</span>            <span class="token comment" spellcheck="true">/* 2d转换缩放：设置的是倍数 */</span>            <span class="token comment" spellcheck="true">/* transform: scale(0.5, 1); */</span>            <span class="token comment" spellcheck="true">/* 2d转换倾斜：设置的是角度 */</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skew</span><span class="token punctuation">(</span><span class="token number">30</span>deg, <span class="token number">30</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>asdfafd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="五、3D转换"><a href="#五、3D转换" class="headerlink" title="五、3D转换"></a>五、3D转换</h2><h3 id="1-位移-1"><a href="#1-位移-1" class="headerlink" title="1. 位移"></a><span style="font-size: 18px;">1. 位移</span></h3><p>　　<code>transform: translateX()  translateY()   translateZ();</code></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.one</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">500</span>px<span class="token punctuation">;</span>            <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid red<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">100</span>px auto<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 透视: 在网页中实现近大远小; */</span>            <span class="token property">perspective</span><span class="token punctuation">:</span> <span class="token number">1000</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.one</span><span class="token pseudo-class">:hover</span> <span class="token class">.box</span> </span><span class="token punctuation">{</span>            <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">200</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="2-旋转-1"><a href="#2-旋转-1" class="headerlink" title="2. 旋转"></a><span style="font-size: 18px;">2. 旋转</span></h3><p>　　<code>transform: rotateX(60deg)  rotateY(60deg)  rotateZ(60deg);</code></p><h3 id="3-缩放-1"><a href="#3-缩放-1" class="headerlink" title="3. 缩放"></a><span style="font-size: 18px;">3. 缩放</span></h3><p>　　<code>transform: scaleX(0.5)  scaleY(1)  scaleZ(1);</code></p><h3 id="4-倾斜-1"><a href="#4-倾斜-1" class="headerlink" title="4. 倾斜"></a><span style="font-size: 18px;">4. 倾斜</span></h3><p>　　<code>transform: skewX(30deg) skewY();</code></p><h3 id="5-小案例"><a href="#5-小案例" class="headerlink" title="5. 小案例"></a><span style="font-size: 18px;">5. 小案例</span></h3><p>　　<code>transform-style: preserve-3d;</code><br>　　将平面图形转换为立体图形<br>　　<a href="/demos/css3/3D转换实现魔方.html" title="3D转换实现魔方">3D转换实现魔方</a></p><h2 id="六、CSS3新特性之动画篇"><a href="#六、CSS3新特性之动画篇" class="headerlink" title="六、CSS3新特性之动画篇"></a>六、CSS3新特性之动画篇</h2><h3 id="1-过渡"><a href="#1-过渡" class="headerlink" title="1. 过渡"></a><span style="font-size: 18px;">1. 过渡</span></h3><p>　　过渡又称<span style="color: #FF0000;">补间动画</span>，当一个元素从一个状态到另一个状态切换时，中间有个空白，过渡能为这个空白添加一个效果。。<br>　　过渡主要有几个属性：<br>　　●　<code>transition-property: all;</code>　　　　　　　设置哪些属性要参与到过渡动画效果中：all<br>　　●　<code>transition-duration: 1s;</code>　　　　　　　　设置过渡执行时间<br>　　●　<code>transition-delay: 1s;</code>　　　　　　　　　设置过渡延时执行时间<br>　　●　<code>transition-timing-function: linear;</code>　　设置过渡的速度类型</p><p>　　关于过渡的速度类型，可以点击查看<a href="https://www.cnblogs.com/afighter/p/5731293.html" rel="external nofollow noopener noreferrer" target="_blank">CSS3中的transition属性详解</a></p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token comment" spellcheck="true">/* 动画的开始状态 ： 浏览中元素的默认显示效果*/</span>        <span class="token selector"><span class="token class">.box1</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 设置哪些属性要参与到过渡动画效果中： all */</span>            <span class="token comment" spellcheck="true">/* transition-property: all; */</span>            <span class="token comment" spellcheck="true">/* 设置过渡执行时间 */</span>            <span class="token comment" spellcheck="true">/* transition-duration: 1s; */</span>            <span class="token comment" spellcheck="true">/* 设置过渡延时执行时间 */</span>            <span class="token comment" spellcheck="true">/* transition-delay: 1s; */</span>            <span class="token comment" spellcheck="true">/* 设置过渡的速度类型 */</span>            <span class="token comment" spellcheck="true">/* transition-timing-function: linear; */</span>            <span class="token comment" spellcheck="true">/* 简写：作用元素，执行时间，速度类型，延时 */</span>            <span class="token property">transition</span><span class="token punctuation">:</span> all <span class="token number">1</span>s linear <span class="token number">1</span>s<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* 动画的结束状态 */</span>        <span class="token selector"><span class="token class">.box1</span><span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> green<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="2-动画"><a href="#2-动画" class="headerlink" title="2. 动画"></a><span style="font-size: 18px;">2. 动画</span></h3><p>　　编写CSS3动画有两步：先定义动画集，然后调用。<br>　　① 定义动画集，设置名称和动作</p><pre class=" language-css"><code class="language-css"><span class="token atrule"><span class="token rule">@keyframes</span>  rotate</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/* 定义开始状态  from也可以用0%表示 */</span>    <span class="token selector">from </span><span class="token punctuation">{</span>        <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/* 中间可以写一些50%等中间状态 */</span>    <span class="token comment" spellcheck="true">/* 结束状态 to也可以用100%表示 */</span>    <span class="token selector">to </span><span class="token punctuation">{</span>       <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateZ</span><span class="token punctuation">(</span><span class="token number">360</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　② 调用<br>　　通过css选择器选择元素，然后设置动画名称，动画时间，动画执行的次数，动画执行速度类型（同过渡效果）</p><pre class=" language-css"><code class="language-css"><span class="token comment" spellcheck="true">/* 调用 */</span><span class="token comment" spellcheck="true">/* 动画名称 */</span><span class="token property">animation-name</span><span class="token punctuation">:</span> rotate<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 设置动画时间 */</span><span class="token property">animation-duration</span><span class="token punctuation">:</span> <span class="token number">2</span>s<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 设置动画执行的次数：infinite无限循环 */</span><span class="token property">animation-iteration-ount</span><span class="token punctuation">:</span> infinite<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* 动画执行速度类型：linear匀速 */</span><span class="token property">animation-timing-function</span><span class="token punctuation">:</span> linear<span class="token punctuation">;</span></code></pre><p>　　注意：如果设置动画集使用的是百分比，那么记住百分比是相对整个动画执行时间的。</p><p>　　在调用的时候也有一些其它的属性可以设置，如下一个例子：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">0</span>px<span class="token punctuation">;</span>            <span class="token property">border-left</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid yellow<span class="token punctuation">;</span>            <span class="token property">border-right</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid red<span class="token punctuation">;</span>            <span class="token property">border-bottom</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid green<span class="token punctuation">;</span>            <span class="token property">border-top</span><span class="token punctuation">:</span> <span class="token number">100</span>px solid pink<span class="token punctuation">;</span>            <span class="token property">border-radius</span><span class="token punctuation">:</span> <span class="token number">50%</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 调用 */</span>            <span class="token comment" spellcheck="true">/* 动画名称 */</span>            <span class="token property">animation-name</span><span class="token punctuation">:</span> rotate<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 设置动画时间 */</span>            <span class="token property">animation-duration</span><span class="token punctuation">:</span> <span class="token number">2</span>s<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 设置动画执行的次数:  infinite 无限执行; */</span>            <span class="token property">animation-iteration-count</span><span class="token punctuation">:</span> infinite<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 动画执行的速度类型 */</span>            <span class="token property">animation-timing-function</span><span class="token punctuation">:</span> linear<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 设置动画逆波，设置该属性后动画在返回时不会“瞬移” */</span>            <span class="token property">animation-direction</span><span class="token punctuation">:</span> alternate<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 设置动画延时 */</span>            <span class="token property">animation-delay</span><span class="token punctuation">:</span> <span class="token number">1</span>s<span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">/* 设置动画结束时候的状态，该属性生效的前提是动画执行次数不能为 infinite无限执行 */</span>            <span class="token property">animation-fill-mode</span><span class="token punctuation">:</span> forwards<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.box</span><span class="token pseudo-class">:hover</span> </span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* 动画暂停 */</span>            <span class="token property">animation-play-state</span><span class="token punctuation">:</span> paused<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">/* 1定义动画集 */</span>        <span class="token atrule"><span class="token rule">@keyframes</span> rotate</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/* 定义开始状态  0%*/</span>            <span class="token selector">0% </span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* transform: rotateZ(0deg); */</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">0</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token selector">50% </span><span class="token punctuation">{</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true">/* 结束状态 100%*/</span>            <span class="token selector">100% </span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">/* transform: rotateZ(360deg); */</span> <span class="token comment" spellcheck="true">/* 旋转动画 */</span>                <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateX</span><span class="token punctuation">(</span><span class="token number">200</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* 位移动画 */</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="七、CSS3新特性之网页布局篇"><a href="#七、CSS3新特性之网页布局篇" class="headerlink" title="七、CSS3新特性之网页布局篇"></a>七、CSS3新特性之网页布局篇</h2><p>　　这里主要是<span style="color: #FF0000;">伸缩布局</span>（或<span style="color: #FF0000;">弹性布局</span>），它和响应局布局差不多。<br>　　CSS无非是设置样式、进行网页布局。前面介绍的都是样式，这里开始介绍的就是布局。</p><h3 id="1-设置伸缩布局"><a href="#1-设置伸缩布局" class="headerlink" title="1. 设置伸缩布局"></a><span style="font-size: 18px;">1. 设置伸缩布局</span></h3><p>　　设置伸缩布局的步骤如下：<br>　　① 设置父元素为伸缩盒子【直接父元素】</p><pre class=" language-css"><code class="language-css">    <span class="token property">display</span><span class="token punctuation">:</span> flex</code></pre><p>　　为什么在伸缩盒子中，子元素会在一行上显示？<br>　　　　●　子元素是按照伸缩盒子中主轴方向显示<br>　　　　●　只有伸缩盒子才有主轴和侧轴<br>　　　　●　主轴：默认水平从左向右显示<br>　　　　●　侧轴：始终要垂直于主轴</p><p>　　② 设置伸缩盒子主轴方向（flex-direction）</p><pre class=" language-css"><code class="language-css">    <span class="token property">flex-direction</span><span class="token punctuation">:</span> row<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">/* 默认值 */</span>    <span class="token property">flex-direction</span><span class="token punctuation">:</span> row-reverse<span class="token punctuation">;</span>    <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span>    <span class="token property">flex-direction</span><span class="token punctuation">:</span> column-reverse<span class="token punctuation">;</span></code></pre><p>　　③ 设置元素在主轴的对齐方式( justify-content)</p><pre class=" language-css"><code class="language-css">    <span class="token comment" spellcheck="true">/* 设置子元素在主轴方向的对齐方式 */</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>    <span class="token property">justify-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span></code></pre><p>　　④ 设置元素在侧轴的对齐方式 （align-items）</p><pre class=" language-css"><code class="language-css">    <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 默认值 */</span>    <span class="token property">align-items</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span></code></pre><p>　　⑤ 设置元素是否换行显示（flex-wrap）<br>　　在伸缩盒子中所有的元素默认都会在一行上显示<br>　　如果希望换行：</p><pre class=" language-css"><code class="language-css">    <span class="token property">flex-wrap</span><span class="token punctuation">:</span> wrap | nowrap<span class="token punctuation">;</span></code></pre><p>　　⑥ 设置元素换行后的对齐方式（align-content）</p><pre class=" language-css"><code class="language-css">    <span class="token property">align-content</span><span class="token punctuation">:</span> flex-start<span class="token punctuation">;</span>    <span class="token property">align-content</span><span class="token punctuation">:</span> flex-end<span class="token punctuation">;</span>    <span class="token property">align-content</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">align-content</span><span class="token punctuation">:</span> space-around<span class="token punctuation">;</span>    <span class="token property">align-content</span><span class="token punctuation">:</span> space-between<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/* 换行后的默认值 */</span>    <span class="token property">align-content</span><span class="token punctuation">:</span> stretch<span class="token punctuation">;</span></code></pre><h3 id="2-设置缩放比"><a href="#2-设置缩放比" class="headerlink" title="2. 设置缩放比"></a><span style="font-size: 18px;">2. 设置缩放比</span></h3><p>　　需求：让父元素下的三个子元素在一行内实现三等分布局。<br>　　方法：父元素设置<code>display: flex;</code>属性，给每个子元素设置<code>flex: 1</code>属性。<br>　　原理：给每个子元素设置<code>flex: 1</code>属性后，等于把父元素分成了3份，每个子元素占1份。如果给其中一个子元素设置成<code>flex: 2</code>，那么等同于把父元素分成了4份，这个子元素占2份，另外两个子元素各占1份。<br>　　这个方式类似于 bootstrap 的<span style="color: #FF0000;">栅格布局</span>。<br>　　通过flex实现类栅格布局的代码如下：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/css<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">        <span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>            <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">577</span>px<span class="token punctuation">;</span>            <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>            <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector"><span class="token class">.box</span> > div </span><span class="token punctuation">{</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> yellowgreen<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">div<span class="token class">.one</span> </span><span class="token punctuation">{</span>            <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">div<span class="token class">.two</span> </span><span class="token punctuation">{</span>            <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token selector">div<span class="token class">.three</span> </span><span class="token punctuation">{</span>            <span class="token property">flex</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>one<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>two<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>three<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h2 id="八、总结"><a href="#八、总结" class="headerlink" title="八、总结"></a>八、总结</h2><p>　　以上介绍的就是CSS3最常用的功能，难度不大，只是要记住的属性比较多。不需要考虑兼容问题的话可以多用，一般移动端用的比较多。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> HTML5/CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5中的API概览</title>
      <link href="/blogs/html5-apis.html"/>
      <url>/blogs/html5-apis.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">HTML5中的API概览</div><blockquote><p>整理一下HTML5中的常见API。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　HTML5中提供了一些功能强大的API，在不考虑兼容性的情况下，比起原生js实现更加简单，比起jQuery可以少引入包，这里整理几个常用的。</p><h2 id="一、获取页面元素及类名操作和自定义属性"><a href="#一、获取页面元素及类名操作和自定义属性" class="headerlink" title="一、获取页面元素及类名操作和自定义属性"></a>一、获取页面元素及类名操作和自定义属性</h2><h3 id="1-获取页面元素"><a href="#1-获取页面元素" class="headerlink" title="1. 获取页面元素"></a><span style="font-size: 18px;">1. 获取页面元素</span></h3><p>　　●　<span style="color: #FF0000;"> document.querySelector(“选择器”); </span><br>　　　选择器：可以是css中的任意一种选择器<br>　　　通过该选择器只能选中第一个元素。<br>　　●　<span style="color: #FF0000;"> document.querySelectorAll(“选择器”); </span><br>　　　与document.querySelector区别：querySelectorAll 可以选中所有符合选择器规则的元素，返回的是一个列表。querySelector返回的只是单独的一个元素。</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Document<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>第一个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>第二个<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"li span"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">.</span>color <span class="token operator">=</span> <span class="token string">"red"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> obj <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"li span"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> obj<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>innerText <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token string">'. '</span> <span class="token operator">+</span> obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>innerText    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="2-类名操作"><a href="#2-类名操作" class="headerlink" title="2. 类名操作　　"></a><span style="font-size: 18px;">2. 类名操作</span>　　</h3><p>　　●　<span style="color: #FF0000;"> Dom.classList.add(“类名”); </span><br>　　　给当前dom元素添加类样式。<br>　　●　<span style="color: #FF0000;"> Dom.classList.remove(“类名”); </span><br>　　　给当前dom元素移除类样式。<br>　　●　<span style="color: #FF0000;"> classList.contains(“类名”); </span><br>　　　检测是否包含类样式。<br>　　●　<span style="color: #FF0000;"> classList.toggle(“active”); </span><br>　　　切换类样式（有就删除，没有就添加）。</p><h3 id="3-自定义属性"><a href="#3-自定义属性" class="headerlink" title="3. 自定义属性　"></a><span style="font-size: 18px;">3. 自定义属性</span>　</h3><p>　　HTML5规范，自定义属性在标签中的名称为：data-自定义属性名<br>　　●　<span style="color: #FF0000;"> Dom.dataset.属性名 </span> 或者 <span style="color: #FF0000;"> Dom.dataset[属性名] </span><br>　　　获取自定义属性   Dom.dataset   返回的是一个对象<br>　　　注意：此处属性名不包含data-<br>　　●　<span style="color: #FF0000;"> Dom.dataset.自定义属性名=值 </span> 或 <span style="color: #FF0000;"> Dom.dataset[自定义属性名]=值 </span><br>　　　设置自定义属性</p><h3 id="4-小案例"><a href="#4-小案例" class="headerlink" title="4. 小案例"></a><span style="font-size: 18px;">4. 小案例</span></h3><p>　　<a href="/demos/html5/自定义属性案例.html" title="自定义属性案例">自定义属性案例</a></p><h2 id="二、文件读取"><a href="#二、文件读取" class="headerlink" title="二、文件读取"></a>二、文件读取</h2><p>　　使用HTML5的File接口需要先新建文件读取对象：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="1-FileReader方法"><a href="#1-FileReader方法" class="headerlink" title="1. FileReader方法"></a><span style="font-size: 18px;">1. FileReader方法</span></h3><p>　　FileReader有3个用来读取文件的方法：<br>　　●　<span style="color: #FF0000;"> .readAsText(file) </span>　　— 将文件读取为文本<br>　　●　<span style="color: #FF0000;"> .readAsDataURL(file) </span>　　— 将文件读取为DataURL（二进制流形式）<br>　　●　<span style="color: #FF0000;"> .readAsBinaryString(file) </span>　　— 将文件读取为二进制编码</p><h3 id="2-FileReader事件"><a href="#2-FileReader事件" class="headerlink" title="2. FileReader事件"></a><span style="font-size: 18px;">2. FileReader事件</span></h3><p>　　●　<span style="color: #FF0000;"> .onload </span>　　— 资源读取完毕 reader.result<br>　　●　<span style="color: #FF0000;"> .onprogress </span>　　— 读取进度更新时触发<br>　　●　<span style="color: #FF0000;"> .onloadstart </span>　　— 加载开始时触发<br>　　●　<span style="color: #FF0000;"> .onloadend </span>　　— 加载结束时触发<br>　　●　<span style="color: #FF0000;"> .onerror </span>　　— 出现错误时触发<br>　　●　<span style="color: #FF0000;"> .onabort </span>　　— 加载过程中中止时触发<br>　　●　<span style="color: #FF0000;"> .abort </span>　　— 手动中止加载</p><h3 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a><span style="font-size: 18px;">3. 代码实现</span></h3><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>文件读取<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token keyword">var</span> input_file <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    input_file<span class="token punctuation">.</span>onchange <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> files <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>files<span class="token punctuation">;</span>        <span class="token keyword">var</span> file <span class="token operator">=</span> files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 创建读取器</span>        <span class="token keyword">var</span> reader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileReader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 将数据读取成二进制方式</span>        <span class="token comment" spellcheck="true">// reader.readAsBinaryString(file);</span>        <span class="token comment" spellcheck="true">// reader.onload=function(){</span>        <span class="token comment" spellcheck="true">//    console.log(reader.result);</span>        <span class="token comment" spellcheck="true">// }</span>        <span class="token comment" spellcheck="true">// 将数据读取成文本形式</span>        <span class="token comment" spellcheck="true">// reader.readAsText(file);</span>        <span class="token comment" spellcheck="true">// reader.onload=function(){</span>        <span class="token comment" spellcheck="true">//     console.log(reader.result);</span>        <span class="token comment" spellcheck="true">//  }</span>        <span class="token comment" spellcheck="true">//将数据读取成url形式</span>        reader<span class="token punctuation">.</span><span class="token function">readAsDataURL</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        reader<span class="token punctuation">.</span>onload <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>reader<span class="token punctuation">.</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><h3 id="4-小案例-1"><a href="#4-小案例-1" class="headerlink" title="4. 小案例"></a><span style="font-size: 18px;">4. 小案例</span></h3><p>　　<a href="/demos/html5/读取图片显示.html" title="读取图片显示">读取图片显示</a></p><h2 id="三、获取网络状态"><a href="#三、获取网络状态" class="headerlink" title="三、获取网络状态"></a>三、获取网络状态</h2><h3 id="1-获取网络状态方法"><a href="#1-获取网络状态方法" class="headerlink" title="1. 获取网络状态方法"></a><span style="font-size: 18px;">1. 获取网络状态方法</span></h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 获取当前网络状态</span><span class="token keyword">var</span> state <span class="token operator">=</span> window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>onLine<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>state<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"您好，当前处于联网状态"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"当前处于断网状态"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-网络状态事件"><a href="#2-网络状态事件" class="headerlink" title="2. 网络状态事件"></a><span style="font-size: 18px;">2. 网络状态事件</span></h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 当联网的时候触发该事件</span>window<span class="token punctuation">.</span>ononline <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"在线"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 当断网的时候触发该事件</span>window<span class="token punctuation">.</span>onoffline <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"断网"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h2 id="四、获取地理位置"><a href="#四、获取地理位置" class="headerlink" title="四、获取地理位置"></a>四、获取地理位置</h2><h3 id="1-获取一次当前位置"><a href="#1-获取一次当前位置" class="headerlink" title="1. 获取一次当前位置"></a><span style="font-size: 18px;">1. 获取一次当前位置</span></h3><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 只能获取一次当前地理位置信息</span>window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>geolocation<span class="token punctuation">.</span><span class="token function">getCurrentPosition</span><span class="token punctuation">(</span>success<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> success <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> error <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="2-实时获取当前位置"><a href="#2-实时获取当前位置" class="headerlink" title="2. 实时获取当前位置"></a><span style="font-size: 18px;">2. 实时获取当前位置</span></h3><p>window.navigator.geolocation.watchPosition(success,error);</p><pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 实时获取地理位置:</span>window<span class="token punctuation">.</span>navigator<span class="token punctuation">.</span>geolocation<span class="token punctuation">.</span><span class="token function">watchPosition</span><span class="token punctuation">(</span>success<span class="token punctuation">,</span> error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> success <span class="token punctuation">(</span>msg<span class="token punctuation">,</span> position<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">dir</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> error <span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="3-小案例"><a href="#3-小案例" class="headerlink" title="3. 小案例"></a><span style="font-size: 18px;">3. 小案例</span></h3><p>　　<a href="/demos/html5/获取当前地理位置.html" title="获取当前地理位置">获取当前地理位置</a></p><h2 id="五、本地存储"><a href="#五、本地存储" class="headerlink" title="五、本地存储"></a>五、本地存储</h2><p>　　传统方式我们以document.cookie来进行存储，但是由于其存储大小只有4k左右，并且解析也相当的复杂，给开发带来诸多不便，HTML5规范则提出解决方案，使用sessionStorage和localStorage存储数据。</p><h3 id="1-localStorage"><a href="#1-localStorage" class="headerlink" title="1. localStorage"></a><span style="font-size: 18px;">1. localStorage</span></h3><p>　　localStorage特点：<br>　　① 永久生效<br>　　② 多窗口共享<br>　　③ 容量大约为20M<br>　　用法：<br>　　●　<span style="color: #FF0000;"> window.localStorage.setItem(key,value) </span>　　— 设置存储内容<br>　　●　<span style="color: #FF0000;"> window.localStorage.getItem(key) </span>　　— 获取内容<br>　　●　<span style="color: #FF0000;"> window.localStorage.removeItem(key) </span>　　— 删除内容<br>　　●　<span style="color: #FF0000;"> window.localStorage.clear() </span>　　— 清空内容</p><h3 id="2-sessionStorage"><a href="#2-sessionStorage" class="headerlink" title="2. sessionStorage"></a><span style="font-size: 18px;">2. sessionStorage</span></h3><p>　　sessionStorage特点：<br>　　① 生命周期为关闭当前浏览器窗口<br>　　② 可以在同一个窗口下访问<br>　　③ 数据大小为5M左右<br>　　用法：<br>　　●　<span style="color: #FF0000;"> window.sessionStorage.setItem(key,value) </span>　　— 设置存储内容<br>　　●　<span style="color: #FF0000;"> window.sessionStorage.getItem(key) </span>　　— 获取内容<br>　　●　<span style="color: #FF0000;"> window.sessionStorage.removeItem(key) </span>　　— 删除内容<br>　　●　<span style="color: #FF0000;"> window.sessionStorage.clear() </span>　　— 清空内容</p><h2 id="六、操作多媒体"><a href="#六、操作多媒体" class="headerlink" title="六、操作多媒体"></a>六、操作多媒体</h2><p>　　<a href="http://www.w3school.com.cn/html5/html5_ref_audio_video_dom.asp" title="HTML5 视频和音频的 DOM 参考手册" rel="external nofollow noopener noreferrer" target="_blank">参考手册</a></p><h2 id="七、Canvas画布"><a href="#七、Canvas画布" class="headerlink" title="七、Canvas画布"></a>七、Canvas画布</h2><p>　　先不整理，用到的时候再进行学习</p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> HTML5/CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTML5浏览器兼容性解决方案</title>
      <link href="/blogs/html5-compatibility.html"/>
      <url>/blogs/html5-compatibility.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">HTML5浏览器兼容性解决方案</div><blockquote><p>HTML5新增语义标签，以及如何兼容老版本浏览器。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　HTML5属于上一代HTML的新迭代语言，设计HTML5最主要的目的是为了在移动设备上支持多媒体。例如：video 标签和 audio 及 canvas 标记。<br>　　而HTML5在取消了过时的显示效果标记 <code>&lt;font&gt;&lt;/font&gt;</code> 和 <code>&lt;center&gt;&lt;/center&gt;</code> 等同时，也引入了一些新的语义标签，例如：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>header</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>article</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>article</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>aside</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>aside</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nav</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>section</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>section</span><span class="token punctuation">></span></span></code></pre><p>　　更多的语义标签<a href="http://www.w3school.com.cn/html/html5_semantic_elements.asp" title="语义标签" rel="external nofollow noopener noreferrer" target="_blank">请参考</a></p><h2 id="一、语义标签兼容性"><a href="#一、语义标签兼容性" class="headerlink" title="一、语义标签兼容性"></a>一、语义标签兼容性</h2><h3 id="1-解决思路"><a href="#1-解决思路" class="headerlink" title="1. 解决思路"></a><span style="font-size: 18px;">1. 解决思路</span></h3><p>　　主流浏览器都兼容 HTML 5 的新标签。对于 IE8 及以下版本，它不认识 HTML 5 的新元素，会把它们默认渲染为<span style="color: #FF0000;">display:inline</span>并且拒绝为它们添加任何样式。同时，渲染未知元素时，会把它们作为一个「没有后代的空元素」插入到 DOM 中。<br>　　解决方法很简单，使用 JavaScript 创建一个「没用的」元素即可，例如：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"article"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p>　　然后，我们把他们的样式设置为<span style="color: #FF0000;">display:block</span>就可以正常使用了。</p><h3 id="2-终极解决方案"><a href="#2-终极解决方案" class="headerlink" title="2. 终极解决方案"></a><span style="font-size: 18px;">2. 终极解决方案</span></h3><p>　　按照上面的思路，能有效解决旧版IE浏览器的兼容性问题。但这样的方法显然很笨重，如果我们用到了很多HTML5的语义标签，那就要频繁去手动创建了。<br>　　因此，我们使用一种<span style="color: #FF0000;">终极解决方案</span>：那就是借助<a href="https://github.com/afarkas/html5shiv" title="HTML5 Shiv" rel="external nofollow noopener noreferrer" target="_blank">HTML5 Shiv</a>这个js插件。<br>　　它的原理很简单，也是和上面一样去创建这些元素。但是节省了我们开发者的工作量。直接在 <code>&lt;head&gt;&lt;/head&gt;</code> 当中引入就可以了，但是建议使用条件注释来引入，这样只在需要的时候才加载，避免性能消耗。<br>　　使用方法如下：</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--[if lt IE 9]>    &lt;script type="text/javascript" src="../html5shiv.min.js">&lt;/script>&lt;![endif]--></span></code></pre><h2 id="二、多媒体标签兼容性"><a href="#二、多媒体标签兼容性" class="headerlink" title="二、多媒体标签兼容性"></a>二、多媒体标签兼容性</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a><span style="font-size: 18px;">1. 介绍</span></h3><p>　　前面说过，HTML5新增了 video 和 audio 两个多媒体标签，前者是视频，后者是音频。<br>　　但是不同浏览器对视频（音频）格式的支持很不一样，详情见<a href="http://www.w3school.com.cn/html5/html_5_video.asp" title="video标签支持的格式" rel="external nofollow noopener noreferrer" target="_blank">video标签支持的格式</a><br>　　因此我们需要对多媒体标签做兼容处理。</p><h3 id="2-解决方案"><a href="#2-解决方案" class="headerlink" title="2. 解决方案"></a><span style="font-size: 18px;">2. 解决方案</span></h3><p>　　以 video 标签为例：<br>　　原理是同一个文件做成三份，以此来兼容不同的浏览器。浏览器在解析的时候，只播放支持的那个多媒体文件，不再考虑其他的多媒体文件。</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>video</span> <span class="token attr-name">controls</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/media/helloworld.mp4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/media/helloworld.ogg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>source</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/media/helloworld.WebM<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>video</span><span class="token punctuation">></span></span></code></pre><p>　　audio 标签同上，只是换了个标签名。</p>]]></content>
      
      
      <categories>
          
          <category> 前端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
            <tag> HTML5/CSS3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch内存那些事儿</title>
      <link href="/blogs/elasticsearch-memory-considerations.html"/>
      <url>/blogs/elasticsearch-memory-considerations.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">Elasticsearch内存那些事儿</div><blockquote><p>Elasticsearch内存分配设置详解。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>　　“该给ES分配多少内存？”<br>　　“为什么是给ES分配服务器的一半内存？”<br>　　“为什么内存使用率不断升高，没有释放？”<br>　　“为何经常有某个field的数据量超出内存限制的异常？”<br>　　“为何感觉上没多少数据，也会经常Out Of Memory？”<br>　　相信每个ES使用者或者运维人员都遇到过这些问题，也踩过不少坑。<br>　　这里根据我个人的学习和日常工作的使用心得，谈一谈Elasticsearch的内存那些事儿。</p><h2 id="一、Elasticsearch为什么吃内存"><a href="#一、Elasticsearch为什么吃内存" class="headerlink" title="一、Elasticsearch为什么吃内存"></a>一、Elasticsearch为什么吃内存</h2><p>　　1. ES是JAVA应用<br>　　2. 底层存储引擎是基于Lucene的</p><h3 id="1-是JAVA应用，就离不开JVM和GC"><a href="#1-是JAVA应用，就离不开JVM和GC" class="headerlink" title="1. 是JAVA应用，就离不开JVM和GC"></a><span style="font-size: 18px;">1. 是JAVA应用，就离不开JVM和GC</span></h3><p>　　对JVM GC这里不做深入探讨，我们只要知道：应用层面生成大量长生命周期的对象，是给heap造成压力的主要原因，例如读取一大片数据在内存中进行排序，或者在heap内部建cache缓存大量数据。如果GC释放的空间有限，而应用层面持续大量申请新对象，GC频度就开始上升，同时会消耗掉很多CPU时间。严重时可能恶性循环，导致整个集群停工。因此在使用ES的过程中，要知道哪些设置和操作容易造成以上问题，有针对性的予以规避。</p><h3 id="2-Lucene的倒排索引是先在内存里生成"><a href="#2-Lucene的倒排索引是先在内存里生成" class="headerlink" title="2. Lucene的倒排索引是先在内存里生成"></a><span style="font-size: 18px;">2. Lucene的倒排索引是先在内存里生成</span></h3><p>　　Lucene的倒排索引（Inverted Index）是先在内存里生成，然后定期以段文件（segment file）的形式刷到磁盘的。每个段实际就是一个完整的倒排索引，并且一旦写到磁盘上就不会做修改。API层面的文档更新和删除实际上是增量写入的一种特殊文档，会保存在新的段里。不变的段文件易于被操作系统cache，热数据几乎等效于内存访问。</p><h2 id="二、Elasticsearch的内存消耗"><a href="#二、Elasticsearch的内存消耗" class="headerlink" title="二、Elasticsearch的内存消耗"></a>二、Elasticsearch的内存消耗</h2><h3 id="1-预留一半内存给Lucene使用"><a href="#1-预留一半内存给Lucene使用" class="headerlink" title="1. 预留一半内存给Lucene使用"></a><span style="font-size: 18px;">1. 预留一半内存给Lucene使用</span></h3><p>　　我们经常在网上看见别人说“预留一半内存给Lucene使用”。很多人不理解这句话，一开始我也不理解。<br>　　举个实际场景，假设你有一个64G内存的机器，按照正常思维思考，肯定是把64G内存都给Elasticsearch比较好，但现实却不是这样。<br>　　毋庸置疑，内存对于Elasticsearch来说绝对是重要的，但还有一个内存消耗大户-Lucene。<br>　　Lucene的设计目的是把底层OS里的数据缓存到内存中。Lucene的段是分别存储到单个文件中的，这些文件都是不会变化的，所以很利于缓存，同时操作系统也会把这些段文件缓存起来，以便更快的访问。<br>　　Lucene的性能取决于和OS的交互，如果你把所有的内存都分配给Elasticsearch，不留一点给Lucene，那你的全文检索性能会很差的。<br>　　所以，不难理解为何官方建议heap size不要超过系统可用内存的一半，因为heap以外的内存并不会被浪费，Lucene会很开心的利用他们来cache被用读取过的段文件。</p><h3 id="2-不要超过32G"><a href="#2-不要超过32G" class="headerlink" title="2. 不要超过32G"></a><span style="font-size: 18px;">2. 不要超过32G</span></h3><p>　　这里有另外一个原因不分配大内存给Elasticsearch，事实上jvm在内存小于32G的时候会采用一个内存对象指针压缩技术。<br>　　在Java中，所有的对象都分配在堆上，然后有一个指针引用它。指向这些对象的指针大小通常是CPU的字长的大小，不是32bit就是64bit，这取决于你的处理器，指针指向了你的值的精确位置。<br>　　对于32位系统，你的内存最大可使用4G。对于64系统可以使用更大的内存。但是64位的指针意味着更大的浪费，因为你的指针本身大了。浪费内存不算，更糟糕的是，更大的指针在主内存和缓存器（例如LLC, L1等）之间移动数据的时候，会占用更多的带宽。<br>　　Java使用一个叫内存指针压缩的技术来解决这个问题。它的指针不再表示对象在内存中的精确位置，而是表示偏移量。这意味着32位的指针可以引用40亿个对象，而不是40亿个字节。最终，也就是说堆内存长到32G的物理内存，也可以用32bit的指针表示。<br>　　一旦你越过那个神奇的30-32G的边界，指针就会切回普通对象的指针，每个对象的指针都变长了，就会使用更多的CPU内存带宽，也就是说你实际上失去了更多的内存。事实上当内存到达40-50GB的时候，有效内存才相当于使用内存对象指针压缩技术时候的32G内存。<br>　　这段描述的意思就是说：即便你有足够的内存，也尽量不要超过32G，因为它浪费了内存，降低了CPU的性能，还要让GC应对大内存。</p><h3 id="3-JVM参数"><a href="#3-JVM参数" class="headerlink" title="3. JVM参数"></a><span style="font-size: 18px;">3. JVM参数</span></h3><p>　　从官方建议，Heap分配不要超过系统可用内存的一半，并且不要超过32GB。那么JVM参数呢？对于初级用户来说，并不需要做特别调整，仍然遵从官方的建议，将Xms和Xmx设置成和heap一样大小，避免动态分配heap size就好了。虽然有针对性的调整JVM参数可以带来些许GC效率的提升，当有一些“坏”用例的时候，这些调整并不会有什么魔法效果帮你减轻heap压力，甚至可能让问题更糟糕。<br>　　确保Xms和Xmx的大小是相同的，其目的是为了能够在java垃圾回收机制清理完堆区后不需要重新分隔计算堆区的大小而浪费资源，可以减轻伸缩堆大小带来的压力。</p><h3 id="4-ES的几个内存消耗大户"><a href="#4-ES的几个内存消耗大户" class="headerlink" title="4. ES的几个内存消耗大户"></a><span style="font-size: 18px;">4. ES的几个内存消耗大户</span></h3><p>　　通过查阅资料，了解到有几个ES的内存消耗大户，就是他们把ES的heap瓜分掉的：<br>　　1. segment memory<br>　　2. filter cache<br>　　3. field data cache<br>　　4. bulk queue<br>　　5. indexing buffer<br>　　6. state buffer<br>　　7. 超大搜索聚合结果集的fetch<br>　　8. 对高cardinality字段做terms aggregation<br>　　下面对它们分别做解读：<br>　　<span style="color: #FF0000;">Segment Memory</span><br>　　Segment不是file吗？segment memory又是什么？前面提到过，一个segment是一个完备的lucene倒排索引，而倒排索引是通过词典（Term Dictionary）到文档列表（Postings List）的映射关系，快速做查询的。 由于词典的size会很大，全部装载到heap里不现实，因此Lucene为词典做了一层前缀索引（Term Index），这个索引在Lucene4.0以后采用的数据结构是FST（Finite State Transducer）。 这种数据结构占用空间很小，Lucene打开索引的时候将其全量装载到内存中，加快磁盘上词典查询速度的同时减少随机磁盘访问次数。<br>　　说了这么多，要传达的一个意思就是，ES的data node存储数据并非只是耗费磁盘空间的，为了加速数据的访问，每个segment都有会一些索引数据驻留在heap里。因此segment越多，瓜分掉的heap也越多，并且这部分heap是无法被GC掉的！ 理解这点对于监控和管理集群容量很重要，当一个node的segment memory占用过多的时候，就需要考虑删除、归档数据，或者扩容了。<br>　　怎么知道segment memory占用情况呢?  CAT API可以给出答案。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看一个索引所有segment的memory占用情况，重点看size.segment这一列</span>GET /_cat/segments/cc-xxxx-2018-03-20?v<span class="token operator">&amp;</span>h<span class="token operator">=</span>shard,segment,size,size.segment<span class="token comment" spellcheck="true"># 查看一个node上所有segment占用的memory总和</span>GET /_cat/nodes?v<span class="token operator">&amp;</span>h<span class="token operator">=</span>name,port,sm</code></pre><p>　　那么有哪些途径减少data node上的segment memory占用呢？ 总结起来有三种方法:<br>　　<strong>1. 删除不用的索引。</strong><br>　　<strong>2. 关闭索引（文件仍然存在于磁盘，只是释放掉内存）。需要的时候可以重新打开。</strong><br>　　<strong>3. 定期对不再更新的索引做force merge api（ES2.0及更早版本叫做optimize）。也就是强制段合并，可以节省大量的segment memory。</strong>　　<br>　　<span style="color: #FF0000;">Request cache(5.x以前叫做Filter Cache)</span><br>　　Request cache是用来缓存查询中参数size=0的请求，所以就不会缓存hits 而是缓存 hits.total，aggregations和suggestions，需要注意的是这个缓存也是常驻heap，在被evict掉之前，是无法被GC的。我的经验是默认的10% heap设置工作得够好了，如果实际使用中heap没什么压力的情况下，才考虑加大这个设置。<br>　　<span style="color: #FF0000;">Field Data cache</span><br>　　在有大量排序、数据聚合的应用场景，可以说field data cache是性能和稳定性的杀手。 对搜索结果做排序或者聚合操作，需要将倒排索引里的数据进行解析，按列构造成docid-&gt;value的形式才能够做后续快速计算。 对于数据量很大的索引，这个构造过程会非常耗费时间，因此ES 2.0以前的版本会将构造好的数据缓存起来，提升性能。但是由于heap空间有限，当遇到用户对海量数据做计算的时候，就很容易导致heap吃紧，集群频繁GC，根本无法完成计算过程。 ES2.0以后，正式默认启用Doc Values特性(1.x需要手动更改mapping开启)，将field data在indexing time构建在磁盘上，经过一系列优化，可以达到比之前采用field data cache机制更好的性能。因此需要限制对field data cache的使用，最好是完全不用，可以极大释放heap压力。 需要注意的是，很多同学已经升级到ES2.0，或者1.0里已经设置mapping启用了doc values，在kibana里仍然会遇到问题。 这里一个陷阱就在于kibana的table panel可以对所有字段排序。 设想如果有一个字段是analyzed过的，而用户去点击对应字段的排序表头是什么后果？ 一来排序的结果并不是用户想要的，排序的对象实际是词典； 二来analyzed过的字段无法利用doc values，需要装载到field data cache，数据量很大的情况下可能集群就在忙着GC或者根本出不来结果。<br>　　<span style="color: #FF0000;">Bulk Queue</span><br>　　一般来说，Bulk queue不会消耗很多的heap，但是见过一些用户为了提高bulk的速度，客户端设置了很大的并发量，并且将bulk Queue设置到不可思议的大，比如好几千。 Bulk Queue是做什么用的？当所有的bulk thread都在忙，无法响应新的bulk request的时候，将request在内存里排列起来，然后慢慢清掉。 这在应对短暂的请求爆发的时候有用，但是如果集群本身索引速度一直跟不上，设置的好几千的queue都满了会是什么状况呢？ 取决于一个bulk的数据量大小，乘上queue的大小，heap很有可能就不够用，内存溢出了。一般来说官方默认的thread pool设置已经能很好的工作了，建议不要随意去“调优”相关的设置，很多时候都是适得其反的效果。<br>　　<span style="color: #FF0000;">Indexing Buffer</span><br>　　Indexing Buffer是用来缓存新数据，当其满了或者refresh/flush interval到了，就会以segment file的形式写入到磁盘。 这个参数的默认值是10% heap size。根据经验，这个默认值也能够很好的工作，应对很大的索引吞吐量。 但有些用户认为这个buffer越大吞吐量越高，因此见过有用户将其设置为40%的。到了极端的情况，写入速度很高的时候，40%都被占用，导致OOM。<br>　　<span style="color: #FF0000;">Cluster State Buffer</span><br>　　ES被设计成每个node都可以响应用户的api请求，因此每个node的内存里都包含有一份集群状态的拷贝。这个cluster state包含诸如集群有多少个node，多少个index，每个index的mapping是什么？有少shard，每个shard的分配情况等等 (ES有各类stats api获取这类数据)。 在一个规模很大的集群，这个状态信息可能会非常大的，耗用的内存空间就不可忽视了。并且在ES2.0之前的版本，state的更新是由master node做完以后全量散播到其他结点的。 频繁的状态更新就可以给heap带来很大的压力。 在超大规模集群的情况下，可以考虑分集群并通过tribe node连接做到对用户api的透明，这样可以保证每个集群里的state信息不会膨胀得过大。<br>　　<span style="color: #FF0000;">超大搜索聚合结果集的fetch</span><br>　　ES是分布式搜索引擎，搜索和聚合计算除了在各个data node并行计算以外，还需要将结果返回给汇总节点进行汇总和排序后再返回。无论是搜索，还是聚合，如果返回结果的size设置过大，都会给heap造成很大的压力，特别是数据汇聚节点。超大的size多数情况下都是用户用例不对，比如本来是想计算cardinality，却用了terms aggregation + size:0这样的方式; 对大结果集做深度分页；一次性拉取全量数据等等。<br>　　<span style="color: #FF0000;">对高cardinality字段做terms aggregation</span><br>　　所谓高cardinality，就是该字段的唯一值比较多。 比如client ip，可能存在上千万甚至上亿的不同值。 对这种类型的字段做terms aggregation时，需要在内存里生成海量的分桶，内存需求会非常高。如果内部再嵌套有其他聚合，情况会更糟糕。  在做日志聚合分析时，一个典型的可以引起性能问题的场景，就是对带有参数的url字段做terms aggregation。 对于访问量大的网站，带有参数的url字段cardinality可能会到数亿，做一次terms aggregation内存开销巨大，然而对带有参数的url字段做聚合通常没有什么意义。 对于这类问题，可以额外索引一个url_stem字段，这个字段索引剥离掉参数部分的url。可以极大降低内存消耗，提高聚合速度。</p><h3 id="5-小结"><a href="#5-小结" class="headerlink" title="5. 小结"></a><span style="font-size: 18px;">5. 小结</span></h3><ul><li>倒排词典的索引需要常驻内存，无法GC，需要监控data node上segment memory增长趋势。</li><li>各类缓存，field cache, filter cache, indexing cache, bulk queue等等，要设置合理的大小，并且要应该根据最坏的情况来看heap是否够用，也就是各类缓存全部占满的时候，还有heap空间可以分配给其他任务吗？避免采用clear cache等“自欺欺人”的方式来释放内存。</li><li>避免返回大量结果集的搜索与聚合。确实需要大量拉取数据的场景，可以采用scan &amp; scroll api来实现。</li><li>cluster stats驻留内存并无法水平扩展，超大规模集群可以考虑分拆成多个集群通过tribe node连接。</li><li>想知道heap够不够，必须结合实际应用场景，并对集群的heap使用情况做持续的监控。</li><li>根据监控数据理解内存需求，合理配置各类circuit breaker，将内存溢出风险降低到最低。</li></ul><h2 id="三、Elasticsearch节点的内存怎么分配"><a href="#三、Elasticsearch节点的内存怎么分配" class="headerlink" title="三、Elasticsearch节点的内存怎么分配"></a>三、Elasticsearch节点的内存怎么分配</h2><p>　　上面说过，32GB是ES一个内存设置限制，那如果你的机器有很大的内存怎么办呢？现在的机器内存普遍都大，一般都有300-500GB内存的机器。<br>　　当然，如果有这种机器，那是极好的。接下来有两个方案：</p><ul><li>如果主要做全文检索，可以考虑给Elasticsearch 32G内存，剩下的交给Lucene用作操作系统的文件系统缓存，所有的segment都缓存起来，会加快全文检索。</li><li>如果需要更多的排序和聚合，那就需要更大的堆内存。可以考虑一台机器上创建两个或者更多的ES节点，而不要部署一个使用32+GB内存的节点。仍然要坚持50%原则，假设你有个机器有128G内存，你可以创建两个node，使用32G内存。也就是说64G内存给ES的堆内存，剩下的64G给Lucene。</li></ul><p>　　PS：如果选择第二种方案，需要配置cluster.routing.allocation.same_shard.host:true。这会防止同一个shard的主副本存在同一个物理机上（因为如果存在一个机器上，副本的高可用性就没有了）。</p>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>倒排索引原理</title>
      <link href="/blogs/forward-index-and-inverted-index.html"/>
      <url>/blogs/forward-index-and-inverted-index.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">倒排索引原理</div><blockquote><p>倒排索引这个词这几年特别流行，那么什么是倒排索引呢，为什么倒排索引的查询速度就快呢。<br>这里我根据自己的学习和理解，简单总结下。<br>会有些专业术语，不过少量的大白话并结合一些例子，应该可以理解了。</p></blockquote><h2 id="一、我用过的场景"><a href="#一、我用过的场景" class="headerlink" title="一、我用过的场景"></a>一、我用过的场景</h2><ul><li>Lucene</li><li>Elasticsearch</li></ul><h2 id="二、术语"><a href="#二、术语" class="headerlink" title="二、术语"></a>二、术语</h2><p>　　索引（index）是一种数据结构，广泛应用在数据检索领域。<br>　　索引就像一本书的目录一样，可以帮助我们快速检索想要的信息。<br>　　<br>　　分词器将文本进行切割，得到一系列最小搜索单元，即词项（Term）；<br>　　词项的值称为词汇单元（token），简称词元；<br>　　词项中还携带了各种额外的信息，例如词元在原始文本中的位置、词元的长度等。</p><h2 id="三、正向索引（forward-index）"><a href="#三、正向索引（forward-index）" class="headerlink" title="三、正向索引（forward index）"></a>三、正向索引（forward index）</h2><h3 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a><span style="font-size: 18px;">1. 概念</span></h3><p>　　正排表是以文档的ID为关键字，表中记录文档中每个Term的位置信息，查找时扫描表中每个文档中Term的信息直到找出所有包含查询关键字的文档。<br>　　因为索引是基于文档建立的，若是有新的文档加入，直接为该文档建立一个新的索引块，挂接在原来索引文件的后面。若是有文档删除，则直接找到该文档号文档对应的索引信息，将其直接删除。但是在查询的时候需对所有的文档进行扫描以确保没有遗漏，这样就使得检索时间大大延长，检索效率低下。</p><h3 id="2-正排表举例"><a href="#2-正排表举例" class="headerlink" title="2. 正排表举例"></a><span style="font-size: 18px;">2. 正排表举例</span></h3><p>　　正排索引（一个doc对应许多关键词）：<br>　　Doc1: [Term1, Pos1], [Term2, Pos2], …<br>　　Doc2: [Term1, Pos1], [Term2, Pos2], …<br>　　原文档</p><table><thead><tr><th style="text-align:center">文档编号（id）</th><th style="text-align:center">文档内容</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">我喜欢数学</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">我喜欢编程</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">我考试数学成绩很好</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">编程太难了</td></tr></tbody></table><p>　　分词之后的正排索引Map&lt;id, list<term>&gt;，Term中包含出现位置、出现次数</term></p><table><thead><tr><th style="text-align:center">文档编号（id）</th><th style="text-align:center">分词后的词项集合（list<term>）</term></th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">{我,喜欢,数学}</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">{我,喜欢,编程}</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">{我,考试,数学,成绩,很好}</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">{编程,太难了}</td></tr></tbody></table><h3 id="3-检索过程"><a href="#3-检索过程" class="headerlink" title="3. 检索过程"></a><span style="font-size: 18px;">3. 检索过程</span></h3><p>　　由id查询Term的过程，是正排索引。<br>　　在搜索引擎中每个文件都对应一个文件ID，文件内容被表示为一系列关键词的集合（实际上在搜索引擎索引库中，关键词也已经转换为关键词ID。简单的，正排索引可以理解为(文件内容会对应一个分词后的集合list&lt;&lt; Term&gt;&gt;) Map&lt; id,list&lt; Term&gt;&gt;，能够由id快速（时间复杂度O(1)）找到内容的一个数据结构。<br>　　假设使用正向索引，那么当你搜索一个Term的时候，搜索引擎必须检索网页中的每一个关键词，假设一个doc中包含成千上百个关键词，可想而知，会造成大量的资源浪费。于是倒排索引应运而生。</p><h2 id="四、倒排索引（inverted-index）"><a href="#四、倒排索引（inverted-index）" class="headerlink" title="四、倒排索引（inverted index）"></a>四、倒排索引（inverted index）</h2><h3 id="1-概念-1"><a href="#1-概念-1" class="headerlink" title="1. 概念"></a><span style="font-size: 18px;">1. 概念</span></h3><p>　　纠正一个概念：倒排索引这个名字是典型的“渣翻译”，容易造成理解误区。我觉得叫<span style="color: #FF0000;">反向索引</span>更合适。不过网上大都叫倒排索引叫习惯了，所以下面我们也这么引用这个名称。<br>　　一个倒排索引由文档中所有不重复词的列表构成，对于其中每个词，有一个包含它的Term列表。</p><h3 id="2-倒排表举例"><a href="#2-倒排表举例" class="headerlink" title="2. 倒排表举例"></a><span style="font-size: 18px;">2. 倒排表举例</span></h3><p>　　倒排索引（一个关键词对应许多doc）：<br>　　Term1: [Doc1, Pos1], [Doc2, Pos2], …<br>　　Term2: [Doc1, Pos1], [Doc2, Pos2], …<br>　　原文档（和上面正向索引的原文档一样）</p><table><thead><tr><th style="text-align:center">文档编号（id）</th><th style="text-align:center">文档内容</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">我喜欢数学</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">我喜欢编程</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">我考试数学成绩很好</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">编程太难了</td></tr></tbody></table><p>　　a) 分词之后的<span style="color: #FF0000;">简单的倒排索引</span>Map&lt;token,list&lt; id&gt;&gt;</p><table><thead><tr><th style="text-align:center">编号</th><th style="text-align:center">词元（token）</th><th style="text-align:center">倒排列表（list&lt; id&gt;）</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">我</td><td style="text-align:center">1,2,3</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">喜欢</td><td style="text-align:center">1,2</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">数学</td><td style="text-align:center">1,3</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">编程</td><td style="text-align:center">2,4</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">考试</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">成绩</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">很好</td><td style="text-align:center">3</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">太难了</td><td style="text-align:center">4</td></tr></tbody></table><p>　　b) 有单词频率信息（TF）的倒排索引Map&lt;item,list&lt; (id;TF)&gt;&gt;<br>　　在单词对应的倒排列表中不仅记录了文档编号，还记载了词元频率信息，即这个词元在某个文档中的出现次数。之所以要记录这个信息，是因为词频信息在搜索结果排序时，计算查询和文档相似度是很重要的一个计算因子，将其记录在倒排列表中，以方便后续排序时进行分值计算。</p><table><thead><tr><th style="text-align:center">编号</th><th style="text-align:center">词元（token）</th><th style="text-align:center">倒排列表（list&lt; (id;TF)&gt;）</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">我</td><td style="text-align:center">(1;1),(2;1),(3;1)</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">喜欢</td><td style="text-align:center">(1;1),(2,1)</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">数学</td><td style="text-align:center">(1;1),(3;1)</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">编程</td><td style="text-align:center">(2;1),(4;1)</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">考试</td><td style="text-align:center">(3;1)</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">成绩</td><td style="text-align:center">(3;1)</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">很好</td><td style="text-align:center">(3;1)</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">太难了</td><td style="text-align:center">(4;1)</td></tr></tbody></table><p>　　c) 有词元频率和出现位置(pos)信息的倒排索引Map&lt;Term,list&lt;(id;TF;&lt; pos&gt;)&gt;&gt;</p><table><thead><tr><th style="text-align:center">编号</th><th style="text-align:center">词元（token）</th><th style="text-align:center">倒排列表（list&lt;(id;TF;&lt; pos&gt;)&gt;）</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">我</td><td style="text-align:center">(1;1;<1>),(2;1;<1>,(3;1;<1>)</1></1></1></td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">喜欢</td><td style="text-align:center">(1;1;<2>),(2;1;<2>)</2></2></td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">数学</td><td style="text-align:center">(1;1;<3>),(3;1;<3>)</3></3></td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">编程</td><td style="text-align:center">(2;1;<3>),(4;1;<1>)</1></3></td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">考试</td><td style="text-align:center">(3;1;<3>)</3></td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">成绩</td><td style="text-align:center">(3;1;<4>)</4></td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">很好</td><td style="text-align:center">(3;1;<5>)</5></td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">太难了</td><td style="text-align:center">(4;1;<2>)</2></td></tr></tbody></table><h3 id="3-检索过程-1"><a href="#3-检索过程-1" class="headerlink" title="3. 检索过程"></a><span style="font-size: 18px;">3. 检索过程</span></h3><p>　　由Term查询id的过程，是倒排索引。<br>　　倒排索引可以理解为Map&lt;Term, list&lt; id&gt;&gt;，能够由查询词快速（时间复杂度O(1)）找到包含这个查询词的文件的数据结构。<br>　　简单来讲：先分词，再找到每个Term对应的list&lt; id&gt;，最后进行集合求交集的过程。<br>　　分词和倒排查询时间复杂度都是O(1)，整个搜索的时间复杂度取决于“求list&lt; id&gt;的交集”，因此实际上问题也变成了求两个集合的交集。<br>　　比如你搜索“喜欢”，搜索引擎可以快速检索出包含“喜欢”搜索词的位置，为后续的相关度和权重计算奠定基础，从而大大加快了返回搜索结果的速度。</p>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch中文分词器</title>
      <link href="/blogs/elasticsearch-chinese-analyzer.html"/>
      <url>/blogs/elasticsearch-chinese-analyzer.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">Elasticsearch中文分词器</div><blockquote><p>Elasticsearch中文分词器的介绍、对比和用法。</p></blockquote><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a>一、背景</h2><h3 id="1-必须要理解清楚的术语"><a href="#1-必须要理解清楚的术语" class="headerlink" title="1. 必须要理解清楚的术语"></a><span style="font-size: 18px;">1. 必须要理解清楚的术语</span></h3><p>　　lucene的<span style="color: #FF0000;">分析器（analyzer）</span>以及它的<span style="color: #FF0000;">三个组成成分</span>：<br>　　<strong>字符过滤器（character filters）</strong>、<strong>分词器（tokenizers）</strong>和<strong>过滤器（token filters）</strong><br>　　① <strong>analyzer</strong>：由字符过滤器、分词器跟过滤器组成，他的功能就是：将分词器跟分析器进行合理的组合，使之产生对文本分词和过滤效果。因此，分析器使用分词和过滤器构成一个管道，文本在“滤过”这个管道之后，就成为可以进入索引的最小单位。<br>　　② <strong>character filters</strong>：预处理，共有三种。<br>　　　　<span style="color: #3498db;">mapping char filter</span> 通过给定的mappings（mappings数组或者读取外部文件）进行数据的替换；<br>　　　　<span style="color: #3498db;">html strip char filter</span> 把数据中的html标签元素剥离出来，例如 <code>&lt;a&gt;</code> 变成 <code>a</code>；<br>　　　　<span style="color: #3498db;">pattern replace char filter</span> 用正则表达式的方式来替换数据。<br>　　③ <strong>tokenizers</strong>：主要用于对文本资源进行切分，将文本规则切分为一个个可以进入索引的最小单元<br>　　④ <strong>token filters</strong>：主要对分词器切分的最小单位进入索引进行预处理，如：大写转小写，复数转单数，也可以复杂（根据语义改写拼写错误的单词）</p><h3 id="2-analyzer的内部机制"><a href="#2-analyzer的内部机制" class="headerlink" title="2. analyzer的内部机制"></a><span style="font-size: 18px;">2. analyzer的内部机制</span></h3><p>　　前面有篇文章整理过了，<a href="/blogs/elasticsearch-all-about-analyzers.html" title="Elasticsearch Analyzer内部机制">点击查看</a>。</p><h3 id="3-各种分词器的对比与使用方法"><a href="#3-各种分词器的对比与使用方法" class="headerlink" title="3. 各种分词器的对比与使用方法"></a><span style="font-size: 18px;">3. 各种分词器的对比与使用方法</span></h3><p>　　网上有篇文章整理的很好，这里就不重复整理了，<a href="https://segmentfault.com/a/1190000012553894" title="各种分词器的对比与使用方法" rel="external nofollow noopener noreferrer" target="_blank">点击查看</a>。</p><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><h3 id="1-环境"><a href="#1-环境" class="headerlink" title="1. 环境"></a><span style="font-size: 18px;">1. 环境</span></h3><p>　　●　Ubuntu 14.04/16、04<br>　　●　JDK1.8<br>　　●　Elasticsearch 5.3<br>　　●　Kibana 5.3.2</p><h3 id="2-步骤"><a href="#2-步骤" class="headerlink" title="2. 步骤"></a><span style="font-size: 18px;">2. 步骤</span></h3><p>　　我这里使用 <span style="color: #FF0000;">ik-analyzer</span> + <span style="color: #FF0000;">pinyin</span> 分词器。<br>　　<strong>ik-analyzer</strong>：<a href="https://github.com/medcl/elasticsearch-analysis-ik" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/medcl/elasticsearch-analysis-ik</a><br>　　<strong>pinyin分词器</strong>：<a href="https://github.com/medcl/elasticsearch-analysis-pinyin" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/medcl/elasticsearch-analysis-pinyin</a><br>　　<strong>繁简切换分词器</strong>：<a href="https://github.com/medcl/elasticsearch-analysis-stconvert" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/medcl/elasticsearch-analysis-stconvert</a><br>　　安装方式都是选择相应版本的插件后，下载到es安装目录的 <code>plugins/</code> 下，解压缩。<br>　　解压缩前最好在 <code>plugins/</code> 目录下新建两个目录，分别为 <code>ik</code> 和 <code>pinyin</code>，因为解压完的文件比较多，这样便于区分。<br>　　最后，重启es。</p><h2 id="三、简单测试"><a href="#三、简单测试" class="headerlink" title="三、简单测试"></a>三、简单测试</h2><h3 id="1-测试ik分词器"><a href="#1-测试ik分词器" class="headerlink" title="1. 测试ik分词器"></a><span style="font-size: 18px;">1. 测试ik分词器</span></h3><p>　　使用ik_smart分词器，会做最粗粒度的拆分；已被分出的词语将不会再次被其它词语占有。</p><pre class=" language-bash"><code class="language-bash">GET _analyze<span class="token punctuation">{</span>  <span class="token string">"analyzer"</span><span class="token keyword">:</span><span class="token string">"ik_smart"</span>,  <span class="token string">"text"</span><span class="token keyword">:</span><span class="token string">"艾泽拉斯国家地理"</span><span class="token punctuation">}</span></code></pre><p>　　使用ik_max_word分词器，会将文本做最细粒度的拆分；尽可能多的拆分出词语。</p><pre class=" language-bash"><code class="language-bash">GET _analyze<span class="token punctuation">{</span>  <span class="token string">"analyzer"</span><span class="token keyword">:</span><span class="token string">"ik_max_word"</span>,  <span class="token string">"text"</span><span class="token keyword">:</span><span class="token string">"艾泽拉斯国家地理"</span><span class="token punctuation">}</span></code></pre><h3 id="2-测试拼音分词器"><a href="#2-测试拼音分词器" class="headerlink" title="2. 测试拼音分词器"></a><span style="font-size: 18px;">2. 测试拼音分词器</span></h3><p>　　就是普通的把汉字转换成拼音，提取汉字的拼音首字母。</p><pre class=" language-bash"><code class="language-bash">GET _analyze<span class="token punctuation">{</span>  <span class="token string">"analyzer"</span><span class="token keyword">:</span><span class="token string">"pinyin"</span>,  <span class="token string">"text"</span><span class="token keyword">:</span><span class="token string">"艾泽拉斯国家地理"</span><span class="token punctuation">}</span></code></pre><h3 id="3-测试简-繁体分词器"><a href="#3-测试简-繁体分词器" class="headerlink" title="3. 测试简/繁体分词器"></a><span style="font-size: 18px;">3. 测试简/繁体分词器</span></h3><p>　　默认是简体转换成繁体</p><pre class=" language-bash"><code class="language-bash">GET _analyze<span class="token punctuation">{</span>  <span class="token string">"analyzer"</span><span class="token keyword">:</span><span class="token string">"stconvert"</span>,  <span class="token string">"text"</span><span class="token keyword">:</span><span class="token string">"艾泽拉斯国家地理"</span><span class="token punctuation">}</span></code></pre><h2 id="四、实战"><a href="#四、实战" class="headerlink" title="四、实战"></a>四、实战</h2><p>　　我在实际业务中，用过下列几种方案。</p><h3 id="1-方案1：自定义分析器"><a href="#1-方案1：自定义分析器" class="headerlink" title="1. 方案1：自定义分析器"></a><span style="font-size: 18px;">1. 方案1：自定义分析器</span></h3><p>　　<span style="color: #FF0000;">需求</span><br>　　① 设定一个分词器，集成中文、英文、拼音<br>　　② 原理：先进行中文分词、再进行拼音分词<br>　　③ 弊端：同音词问题<br>　　<span style="color: #FF0000;">索引设计</span><br>　　创建一个索引，并设置index分析器相关属性：<br>　　分析器名称为 <span style="color: #3498db;">nb_analyzer</span></p><pre class=" language-bash"><code class="language-bash">PUT /single-analyzer-demo<span class="token punctuation">{</span>  <span class="token string">"settings"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"refresh_interval"</span><span class="token keyword">:</span> <span class="token string">"5s"</span>,    <span class="token string">"number_of_shards"</span><span class="token keyword">:</span> 1,    <span class="token string">"number_of_replicas"</span><span class="token keyword">:</span> 1,    <span class="token string">"analysis"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"analyzer"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"nb_analyzer"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"custom"</span>,          <span class="token string">"tokenizer"</span><span class="token keyword">:</span> <span class="token string">"ik_smart"</span>,          <span class="token string">"filter"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>            <span class="token string">"lowercase"</span>,            <span class="token string">"stemmer"</span>,            <span class="token string">"pinyin_filter"</span>          <span class="token punctuation">]</span>,          <span class="token string">"char_filter"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>            <span class="token string">"html_strip"</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>,      <span class="token string">"filter"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"pinyin_filter"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"pinyin"</span>,          <span class="token string">"keep_first_letter"</span><span class="token keyword">:</span> false,          <span class="token string">"keep_separate_first_letter"</span><span class="token keyword">:</span> false,          <span class="token string">"keep_full_pinyin"</span><span class="token keyword">:</span> false,          <span class="token string">"keep_joined_full_pinyin"</span><span class="token keyword">:</span> true,          <span class="token string">"keep_none_chinese"</span><span class="token keyword">:</span> true,          <span class="token string">"keep_none_chinese_together"</span><span class="token keyword">:</span> true,          <span class="token string">"keep_none_chinese_in_first_letter"</span><span class="token keyword">:</span> true,          <span class="token string">"keep_none_chinese_in_joined_full_pinyin"</span><span class="token keyword">:</span> true,          <span class="token string">"none_chinese_pinyin_tokenize"</span><span class="token keyword">:</span> <span class="token boolean">false</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  <span class="token string">"mappings"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"demo_type"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"properties"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"text"</span>,          <span class="token string">"analyzer"</span><span class="token keyword">:</span> <span class="token string">"nb_analyzer"</span>        <span class="token punctuation">}</span>,        <span class="token string">"introduction"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"text"</span>,          <span class="token string">"analyzer"</span><span class="token keyword">:</span> <span class="token string">"nb_analyzer"</span>        <span class="token punctuation">}</span>,        <span class="token string">"details"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"text"</span>,          <span class="token string">"analyzer"</span><span class="token keyword">:</span> <span class="token string">"nb_analyzer"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　<span style="color: #FF0000;">测试分词效果</span><br>　　这一步比较重要，可以先看看分词效果是不是自己想要的。</p><pre class=" language-bash"><code class="language-bash">GET /single-analyzer-demo/_analyze<span class="token punctuation">{</span>  <span class="token string">"text"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"安全气囊产气药you are a dogs"</span><span class="token punctuation">]</span>,  <span class="token string">"analyzer"</span><span class="token keyword">:</span> <span class="token string">"nb_analyzer"</span><span class="token punctuation">}</span></code></pre><p>　　<span style="color: #FF0000;">插入两条数据</span><br>　　插入两条，稍后查询时候通过加权来控制评分</p><pre class=" language-bash"><code class="language-bash">POST single-analyzer-demo/demo_type<span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"dog"</span>,  <span class="token string">"introduction"</span><span class="token keyword">:</span> <span class="token string">"hello"</span>,  <span class="token string">"details"</span><span class="token keyword">:</span> <span class="token string">"name is dog"</span><span class="token punctuation">}</span>POST single-analyzer-demo/demo_type<span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"hello"</span>,  <span class="token string">"introduction"</span><span class="token keyword">:</span> <span class="token string">"dog"</span>,  <span class="token string">"details"</span><span class="token keyword">:</span> <span class="token string">"introdiction is dog"</span><span class="token punctuation">}</span></code></pre><p>　　<span style="color: #FF0000;">查询语法</span><br>　　通过改变权重，查看查询到的评分区别。</p><pre class=" language-bash"><code class="language-bash">GET single-analyzer-demo/_search<span class="token punctuation">{</span>  <span class="token string">"highlight"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"fields"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"fragment_size"</span><span class="token keyword">:</span> 50      <span class="token punctuation">}</span>,      <span class="token string">"introduction"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"fragment_size"</span><span class="token keyword">:</span> 50      <span class="token punctuation">}</span>,      <span class="token string">"details"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"fragment_size"</span><span class="token keyword">:</span> 150      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>,    <span class="token string">"post_tags"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>      <span class="token string">"&lt;/em>"</span>    <span class="token punctuation">]</span>,    <span class="token string">"order"</span><span class="token keyword">:</span> <span class="token string">"score"</span>,    <span class="token string">"pre_tags"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>      <span class="token string">"&lt;em>"</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span>,  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"query_string"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token string">"dog"</span>,      <span class="token string">"fields"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token string">"name^2"</span>,        <span class="token string">"introduction^3"</span>,        <span class="token string">"details"</span>      <span class="token punctuation">]</span>,      <span class="token string">"minimum_should_match"</span><span class="token keyword">:</span> <span class="token string">"75%"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  <span class="token string">"_source"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>    <span class="token string">"name"</span>,    <span class="token string">"introduction"</span>,    <span class="token string">"details"</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h3 id="2-方案2：切分到不同的域"><a href="#2-方案2：切分到不同的域" class="headerlink" title="2. 方案2：切分到不同的域"></a><span style="font-size: 18px;">2. 方案2：切分到不同的域</span></h3><p>　　这种方案适用于一份文本有各种国家的翻译，然后把每份翻译存储在不同的域中，根据域的语言决定使用相应的分析器。<br>　　这里不多介绍，需要了解的话<a href="https://www.elastic.co/guide/en/elasticsearch/guide/master/one-lang-fields.html" title="One Language per Field" rel="external nofollow noopener noreferrer" target="_blank">见官网</a>。</p><h3 id="3-方案3：使用multi-field为搜索字段建立不同类型的索引"><a href="#3-方案3：使用multi-field为搜索字段建立不同类型的索引" class="headerlink" title="3. 方案3：使用multi_field为搜索字段建立不同类型的索引"></a><span style="font-size: 18px;">3. 方案3：使用multi_field为搜索字段建立不同类型的索引</span></h3><p>　　<span style="color: #FF0000;">参考</span><br>　　参考了一下<a href="http://www.cnblogs.com/clonen/p/6674888.html" title="参考文章" rel="external nofollow noopener noreferrer" target="_blank">这篇文章</a>。<br>　　<span style="color: #FF0000;">需求</span><br>　　① 中文搜索、英文搜索、中英混搜   如：“南京东路”，“cafe 南京东路店”<br>　　② 全拼搜索、首字母搜索、中文+全拼、中文+首字母混搜   如：“nanjingdonglu”，“njdl”，“南京donglu”，“南京dl”，“nang南东路”，“njd路”等等组合<br>　　③ 简繁搜索、特殊符号过滤搜索   如：“龍馬”可通过“龙马”搜索，再比如 L.G.F可以通过lgf搜索，café可能通过cafe搜索<br>　　④ 排序优先级为： 以关键字开头&gt;包含关键字（<span style="color: #FF0000;">没做</span>）<br>　　<span style="color: #FF0000;">索引设计</span><br>　　通过在主域下使用多个子域，每个子域使用各自的分析器。（待处理的语言有限的情况用）<br>　　使用 <strong>most_fields query type（多字段搜索语法）</strong> 来让我们可以用多个字段来匹配同一段文本。<br>　　使用 <strong>multi_field</strong> 为搜索字段建立不同类型的索引，有全拼索引、首字母简写索引、Ngram索引以及IK索引，从各个角度分别击破，然后通过 <strong>char-filter</strong> 进行特殊符号与简繁转换。<br>　　注意：<br>　　<span style="color: #3498db;">char_filter</span> 部分：通过给定的mappings数据来替换。直接给mappings数据 或者 将mappings数据写到配置文件，给出配置文件的路径。默认在<span style="color: #3498db;">config/mappings.txt</span>。<span style="color: #FF0000;">测试时，删掉下面mappings_path那一行。</span></p><pre class=" language-bash"><code class="language-bash">PUT /multi-analyzer-demo<span class="token punctuation">{</span>  <span class="token string">"settings"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"refresh_interval"</span><span class="token keyword">:</span> <span class="token string">"5s"</span>,    <span class="token string">"number_of_shards"</span><span class="token keyword">:</span> 1,    <span class="token string">"number_of_replicas"</span><span class="token keyword">:</span> 1,    <span class="token string">"analysis"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"char_filter"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"special_char_convert"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"mapping"</span>,          <span class="token string">"mappings_path"</span><span class="token keyword">:</span> <span class="token string">"char_filter_mappings.txt"</span>,          <span class="token string">"mappings"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>            <span class="token string">"à=>a"</span>,            <span class="token string">"á=>a"</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span>,        <span class="token string">"t2s_char_convert"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"stconvert"</span>,          <span class="token string">"convert_type"</span><span class="token keyword">:</span> <span class="token string">"t2s"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>,      <span class="token string">"filter"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"pinyin_filter"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"pinyin"</span>,          <span class="token string">"keep_first_letter"</span><span class="token keyword">:</span> false,          <span class="token string">"keep_separate_first_letter"</span><span class="token keyword">:</span> false,          <span class="token string">"keep_full_pinyin"</span><span class="token keyword">:</span> false,          <span class="token string">"keep_joined_full_pinyin"</span><span class="token keyword">:</span> true,          <span class="token string">"keep_none_chinese"</span><span class="token keyword">:</span> true,          <span class="token string">"keep_none_chinese_together"</span><span class="token keyword">:</span> true,          <span class="token string">"keep_none_chinese_in_first_letter"</span><span class="token keyword">:</span> true,          <span class="token string">"keep_none_chinese_in_joined_full_pinyin"</span><span class="token keyword">:</span> true,          <span class="token string">"none_chinese_pinyin_tokenize"</span><span class="token keyword">:</span> false,          <span class="token string">"lowercase"</span><span class="token keyword">:</span> <span class="token boolean">true</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>,      <span class="token string">"analyzer"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"elastic_ik_analyzer"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"custom"</span>,          <span class="token string">"char_filter"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>            <span class="token string">"html_strip"</span>,            <span class="token string">"t2s_char_convert"</span>,            <span class="token string">"special_char_convert"</span>          <span class="token punctuation">]</span>,          <span class="token string">"tokenizer"</span><span class="token keyword">:</span> <span class="token string">"ik_smart"</span>,          <span class="token string">"filter"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>            <span class="token string">"lowercase"</span>,            <span class="token string">"stemmer"</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span>,        <span class="token string">"elastic_pinyin_analyzer"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"custom"</span>,          <span class="token string">"char_filter"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>            <span class="token string">"html_strip"</span>,            <span class="token string">"t2s_char_convert"</span>,            <span class="token string">"special_char_convert"</span>          <span class="token punctuation">]</span>,          <span class="token string">"tokenizer"</span><span class="token keyword">:</span> <span class="token string">"ik_smart"</span>,          <span class="token string">"filter"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>            <span class="token string">"lowercase"</span>,            <span class="token string">"pinyin_filter"</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  <span class="token string">"mappings"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"demo_type"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"properties"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"text"</span>,          <span class="token string">"fields"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"ik"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>              <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"text"</span>,              <span class="token string">"analyzer"</span><span class="token keyword">:</span> <span class="token string">"elastic_ik_analyzer"</span>            <span class="token punctuation">}</span>,            <span class="token string">"pinyin"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>              <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"text"</span>,              <span class="token string">"analyzer"</span><span class="token keyword">:</span> <span class="token string">"elastic_pinyin_analyzer"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>,        <span class="token string">"introduction"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"text"</span>,          <span class="token string">"fields"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"ik"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>              <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"text"</span>,              <span class="token string">"analyzer"</span><span class="token keyword">:</span> <span class="token string">"elastic_ik_analyzer"</span>            <span class="token punctuation">}</span>,            <span class="token string">"pinyin"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>              <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"text"</span>,              <span class="token string">"analyzer"</span><span class="token keyword">:</span> <span class="token string">"elastic_pinyin_analyzer"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>,        <span class="token string">"details"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"text"</span>,          <span class="token string">"fields"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"ik"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>              <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"text"</span>,              <span class="token string">"analyzer"</span><span class="token keyword">:</span> <span class="token string">"elastic_ik_analyzer"</span>            <span class="token punctuation">}</span>,            <span class="token string">"pinyin"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>              <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"text"</span>,              <span class="token string">"analyzer"</span><span class="token keyword">:</span> <span class="token string">"elastic_pinyin_analyzer"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　<span style="color: #FF0000;">检查一下分词效果</span><br>　　中文、繁体和英文</p><pre class=" language-bash"><code class="language-bash">GET /multi-analyzer-demo/_analyze<span class="token punctuation">{</span>  <span class="token string">"text"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"我爱祖国"</span><span class="token punctuation">]</span>,  <span class="token string">"analyzer"</span><span class="token keyword">:</span> <span class="token string">"elastic_ik_analyzer"</span><span class="token punctuation">}</span></code></pre><p>　　拼音</p><pre class=" language-bash"><code class="language-bash">GET /multi-analyzer-demo/_analyze<span class="token punctuation">{</span>  <span class="token string">"text"</span><span class="token keyword">:</span> <span class="token punctuation">[</span><span class="token string">"我爱祖国"</span><span class="token punctuation">]</span>,  <span class="token string">"analyzer"</span><span class="token keyword">:</span> <span class="token string">"elastic_pinyin_analyzer"</span><span class="token punctuation">}</span></code></pre><p>　　<span style="color: #FF0000;">插入数据</span><br>　　插入三条，稍后查询时候通过加权来控制评分，注意同音词问题。</p><pre class=" language-bash"><code class="language-bash">POST multi-analyzer-demo/demo_type<span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"张三"</span>,  <span class="token string">"introduction"</span><span class="token keyword">:</span> <span class="token string">"一个前端工程师"</span>,  <span class="token string">"details"</span><span class="token keyword">:</span> <span class="token string">"名字是张三"</span><span class="token punctuation">}</span>POST multi-analyzer-demo/demo_type<span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"章三"</span>,  <span class="token string">"introduction"</span><span class="token keyword">:</span> <span class="token string">"一个后端工程师"</span>,  <span class="token string">"details"</span><span class="token keyword">:</span> <span class="token string">"名字是章三"</span><span class="token punctuation">}</span>POST multi-analyzer-demo/demo_type<span class="token punctuation">{</span>  <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"神秘人"</span>,  <span class="token string">"introduction"</span><span class="token keyword">:</span> <span class="token string">"一个叫张三的全栈工程师"</span>,  <span class="token string">"details"</span><span class="token keyword">:</span> <span class="token string">"名字在introduction里面"</span><span class="token punctuation">}</span></code></pre><p>　　<span style="color: #FF0000;">查询语法</span><br>　　可以给个别字段加权（查询时每个字段默认的权重是1）<br>　　设置最少应当匹配数来减少低质量的匹配。</p><pre class=" language-bash"><code class="language-bash">GET multi-analyzer-demo/_search<span class="token punctuation">{</span>  <span class="token string">"highlight"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"fields"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"name.ik"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"fragment_size"</span><span class="token keyword">:</span> 50      <span class="token punctuation">}</span>,      <span class="token string">"name.pinyin"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"fragment_size"</span><span class="token keyword">:</span> 50      <span class="token punctuation">}</span>,      <span class="token string">"introduction.ik"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"fragment_size"</span><span class="token keyword">:</span> 50      <span class="token punctuation">}</span>,      <span class="token string">"introduction.pinyin"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"fragment_size"</span><span class="token keyword">:</span> 50      <span class="token punctuation">}</span>,      <span class="token string">"details.ik"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"fragment_size"</span><span class="token keyword">:</span> 150      <span class="token punctuation">}</span>,      <span class="token string">"details.pinyin"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"fragment_size"</span><span class="token keyword">:</span> 150      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>,    <span class="token string">"post_tags"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>      <span class="token string">"&lt;/em>"</span>    <span class="token punctuation">]</span>,    <span class="token string">"order"</span><span class="token keyword">:</span> <span class="token string">"score"</span>,    <span class="token string">"pre_tags"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>      <span class="token string">"&lt;em>"</span>    <span class="token punctuation">]</span>  <span class="token punctuation">}</span>,  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"query_string"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token string">"zhang"</span>,      <span class="token string">"fields"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token string">"name.ik"</span>,        <span class="token string">"name.pinyin"</span>,        <span class="token string">"introduction.ik"</span>,        <span class="token string">"introduction.pinyin"</span>,        <span class="token string">"details.ik"</span>,        <span class="token string">"details.pinyin"</span>      <span class="token punctuation">]</span>,      <span class="token string">"minimum_should_match"</span><span class="token keyword">:</span> <span class="token string">"75%"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  <span class="token string">"_source"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>    <span class="token string">"name"</span>,    <span class="token string">"introduction"</span>,    <span class="token string">"details"</span>  <span class="token punctuation">]</span>,  <span class="token string">"from"</span><span class="token keyword">:</span> 0,  <span class="token string">"size"</span><span class="token keyword">:</span> 20<span class="token punctuation">}</span></code></pre><p>　　<span style="color: #FF0000;">考虑优化</span><br>　　query fields里面是否要进一步加权控制，可以自行尝试下。</p><h2 id="五、补充：ik添加自定义词库"><a href="#五、补充：ik添加自定义词库" class="headerlink" title="五、补充：ik添加自定义词库"></a>五、补充：ik添加自定义词库</h2><h3 id="1-创建自己的词库"><a href="#1-创建自己的词库" class="headerlink" title="1. 创建自己的词库"></a><span style="font-size: 18px;">1. 创建自己的词库</span></h3><p>　　首先在ik插件的 <code>config/custom</code> 目录下创建一个文件 <code>my.dic</code> (名字任意，以.dic结尾)。<br>　　在文件中添加词语即可，每一个词语一行。<br>　　注意： 这个文件可以在 linux 中直接 vim 生成， 或者在 windows 中创建之后上传到这里。<br>　　如果是在 linux 中直接 vim 生成的， 可以直接使用。<br>　　如果是在 windows中创建的，需要注意文件的编码必须是 <span style="color: #FF0000;">UTF-8 without BOM 格式</span>。</p><h3 id="2-修改ik的配置文件"><a href="#2-修改ik的配置文件" class="headerlink" title="2. 修改ik的配置文件"></a><span style="font-size: 18px;">2. 修改ik的配置文件</span></h3><p>　　默认情况下 ik 的配置文件就在 ik 插件的 <code>config</code> 目录下面，名字为 <code>IKAnalyzer.cfg.xml</code>。<br>　　把刚才创建的文件所在位置添加到 ik 的配置文件中即可。<br>　　<code>vim config/IKAnalyzer.cfg.xml</code><br>　　即需要把 <code>my.dic</code> 文件的位置添加到 <code>key=ext_dict</code> 这个 <code>entry</code> 中。<br>　　注意：下面第6行的 <span style="color: #FF0000;">;custom/my.dic</span> 是我新增的：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span>IK Analyzer 扩展配置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置自己的扩展字典 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ext_dict<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>custom/mydict.dic;custom/single_word_low_freq.dic;custom/my.dic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置自己的扩展停止词字典--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ext_stopwords<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>custom/ext_stopword.dic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置远程扩展字典 --></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;entry key="remote_ext_dict">words_location&lt;/entry> --></span>        <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置远程扩展停止词字典--></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;entry key="remote_ext_stopwords">words_location&lt;/entry> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><h2 id="六、补充：ik配置远程扩展词库"><a href="#六、补充：ik配置远程扩展词库" class="headerlink" title="六、补充：ik配置远程扩展词库"></a>六、补充：ik配置远程扩展词库</h2><h3 id="1-好处"><a href="#1-好处" class="headerlink" title="1. 好处"></a><span style="font-size: 18px;">1. 好处</span></h3><p>　　可以使用其他程序调用更新，且不用重启 ES，很方便。</p><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a><span style="font-size: 18px;">2. 配置</span></h3><p>　　即需要把 <span style="color: #3498db;">请求地址</span> 添加到 <code>key=remote_ext_dict</code> 这个 <span style="color: #3498db;">entry</span> 中。<br>　　注意：下面第10行的 <span style="color: #FF0000;"><a href="http://192.168.1.136/hotWords.php" rel="external nofollow noopener noreferrer" target="_blank">http://192.168.1.136/hotWords.php</a></span> 是我新增的：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token doctype">&lt;!DOCTYPE properties SYSTEM "http://java.sun.com/dtd/properties.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>comment</span><span class="token punctuation">></span></span>IK Analyzer 扩展配置<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>comment</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置自己的扩展字典 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ext_dict<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>custom/mydict.dic;custom/single_word_low_freq.dic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>         <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置自己的扩展停止词字典--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>ext_stopwords<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>custom/ext_stopword.dic<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置远程扩展字典 --></span>               <span class="token comment" spellcheck="true">&lt;!-- &lt;entry key="remote_ext_dict">http://192.168.1.136/hotWords.php&lt;/entry> --></span>        <span class="token comment" spellcheck="true">&lt;!--用户可以在这里配置远程扩展停止词字典--></span>        <span class="token comment" spellcheck="true">&lt;!-- &lt;entry key="remote_ext_stopwords">words_location&lt;/entry> --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><h3 id="3-远程扩展字典"><a href="#3-远程扩展字典" class="headerlink" title="3. 远程扩展字典"></a><span style="font-size: 18px;">3. 远程扩展字典</span></h3><p>　　远程词典，那么就要是一个可访问的链接，可以是一个页面，也可以是一个txt的文档，但要保证输出的内容是 <span style="color: #FF0000;">utf-8</span> 的格式。<br>　　ik 接收两个返回的头部属性 <span style="color: #FF0000;">Last-Modified</span> 和 <span style="color: #FF0000;">ETag</span>，只要其中一个有变化，就会触发更新，ik 会每分钟获取一次。<br>　　hotWords.php 的内容：</p><pre class=" language-bash"><code class="language-bash"><span class="token variable">$s</span> <span class="token operator">=</span> <span class="token operator">&lt;&lt;&lt;</span><span class="token string">'EOF'</span>陈港生元楼蓝瘦EOF<span class="token punctuation">;</span>header<span class="token punctuation">(</span><span class="token string">'Last-Modified: '</span>.gmdate<span class="token punctuation">(</span><span class="token string">'D, d M Y H:i:s'</span>, time<span class="token punctuation">(</span><span class="token punctuation">))</span>.<span class="token string">' GMT'</span>, true, 200<span class="token punctuation">)</span><span class="token punctuation">;</span>header<span class="token punctuation">(</span><span class="token string">'ETag: "5816f349-19"'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$s</span><span class="token punctuation">;</span></code></pre><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><p>　　以上就是我使用ES中文分词器的笔记，如有问题或建议，可以留言。</p>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch Analyzer内部机制</title>
      <link href="/blogs/elasticsearch-all-about-analyzers.html"/>
      <url>/blogs/elasticsearch-all-about-analyzers.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">Elasticsearch Analyzer内部机制</div><blockquote><p>Analyzer的组成、执行过程以及各种analyzers。</p></blockquote><h2 id="一、Analyzer组成"><a href="#一、Analyzer组成" class="headerlink" title="一、Analyzer组成"></a>一、Analyzer组成</h2><p>　　Analyzer 一般由三部分构成，character filters、tokenizers、token filters。掌握了 Analyzer 的原理，就可以根据我们的应用场景配置 Analyzer。<br>　　Elasticsearch 有10种分词器（Tokenizer）、31种 token filter，3种 character filter，一大堆配置项。此外，还有还可以安装 plugin 扩展功能。这些都是搭建 analyzer 的原材料。</p><h2 id="二、Analyzer执行过程"><a href="#二、Analyzer执行过程" class="headerlink" title="二、Analyzer执行过程"></a>二、Analyzer执行过程</h2><p>　　Analyzer 的内部就是一条流水线<br>　　●　Step 1 字符过滤（Character filter）<br>　　●　Step 2 分词（Tokenization）<br>　　●　Step 3 Token 过滤（Token filtering）<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/analyzer_pipeline.svg" alt="analyzer_pipeline.svg"></p><p>　　Elasticsearch 已经默认构造了 <span style="color: #FF0000;">8个 Analyzer</span>。若无法满足我们的需求，可以通过 Setting API 构造 Analyzer。<br>　　下面看一个例子：</p><pre class=" language-bash"><code class="language-bash">PUT /my-index/_settings<span class="token punctuation">{</span>  <span class="token string">"index"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"analysis"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"analyzer"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"customHTMLSnowball"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"custom"</span>,          <span class="token string">"char_filter"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>            <span class="token string">"html_strip"</span>          <span class="token punctuation">]</span>,          <span class="token string">"tokenizer"</span><span class="token keyword">:</span> <span class="token string">"standard"</span>,          <span class="token string">"filter"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>            <span class="token string">"lowercase"</span>,            <span class="token string">"stop"</span>,            <span class="token string">"snowball"</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　以上自定义的 Analyzer名为 <span style="color: #3498db;">customHTMLSnowball</span>， 代表的含义：<br>　　●　移除 html 标签 （html_strip character filter），比如 <code>&lt;p&gt; &lt;a&gt; &lt;div&gt;</code> 。<br>　　●　分词，去除标点符号（standard tokenizer）<br>　　●　把大写的单词转为小写（lowercase token filter）<br>　　●　过滤停用词（stop token filter），比如 「the」 「they」 「i」 「a」 「an」 「and」。<br>　　●　提取词干（snowball token filter，<a href="https://zh.wikipedia.org/wiki/%E8%AF%8D%E5%B9%B2%E6%8F%90%E5%8F%96" title="snowball 雪球算法" rel="external nofollow noopener noreferrer" target="_blank">snowball 雪球算法</a> 是提取英文词干最常用的一种算法）。<br>　　　　cats -&gt; cat<br>　　　　catty -&gt; cat<br>　　　　stemmer -&gt; stem<br>　　　　stemming -&gt; stem<br>　　　　stemmed -&gt; stem<br>　　给定如下原文本：</p><pre class=" language-html"><code class="language-html">The two <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>lazy<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span> dogs, were slower than the less lazy <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>em</span><span class="token punctuation">></span></span>dog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>em</span><span class="token punctuation">></span></span>.</code></pre><p>　　下面通过 <span style="color: #3498db;">customHTMLSnowball</span> 这个分析器对源文本进行管道传输，它是这样处理的：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/a_custom_analyzer.png" alt="a_custom_analyzer.png"></p><h2 id="三、选择合适的Analyzer"><a href="#三、选择合适的Analyzer" class="headerlink" title="三、选择合适的Analyzer"></a>三、选择合适的Analyzer</h2><h3 id="1-处理英文"><a href="#1-处理英文" class="headerlink" title="1. 处理英文"></a><span style="font-size: 18px;">1. 处理英文</span></h3><p>　　当我们的搜索场景为：英文博文、英文新闻、英文论坛帖等大段的文本时，最好使用包含 <span style="color: #FF0000;">stemming token filter</span> 的 analyzer。<br>　　常见的 <span style="color: #FF0000;">stemming token filter</span> 有这几种： <span style="color: #3498db;">stemmer, snowball, porter_stem</span>。<br>　　拿 snowball token filter 举例，它把 sing/ sings / singing 都转化词干 sing。并且丢弃了「they」 「are」两个停用词。不管用户搜 sing、sings、singing， 他的搜索结果都是基于「sing」这个term，所得的结果集都一样。</p><pre class=" language-bash"><code class="language-bash">GET _analyze<span class="token punctuation">{</span>  <span class="token string">"text"</span><span class="token keyword">:</span> <span class="token string">"I sing he sings they are singing"</span>,  <span class="token string">"analyzer"</span><span class="token keyword">:</span> <span class="token string">"snowball"</span><span class="token punctuation">}</span></code></pre><p>　　经过 snowball 分析后得到：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">{</span>  <span class="token string">"tokens"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span><span class="token string">"token"</span><span class="token keyword">:</span> <span class="token string">"i"</span>, <span class="token string">"position"</span><span class="token keyword">:</span> 0, <span class="token punctuation">..</span>.<span class="token punctuation">}</span>,    <span class="token punctuation">{</span><span class="token string">"token"</span><span class="token keyword">:</span> <span class="token string">"sing"</span>, <span class="token string">"position"</span><span class="token keyword">:</span> 1, <span class="token punctuation">..</span>.<span class="token punctuation">}</span>,    <span class="token punctuation">{</span><span class="token string">"token"</span><span class="token keyword">:</span> <span class="token string">"he"</span>, <span class="token string">"position"</span><span class="token keyword">:</span> 2, <span class="token punctuation">..</span>.<span class="token punctuation">}</span>,    <span class="token punctuation">{</span><span class="token string">"token"</span><span class="token keyword">:</span> <span class="token string">"sing"</span>, <span class="token string">"position"</span><span class="token keyword">:</span> 3, <span class="token punctuation">..</span>.<span class="token punctuation">}</span>,    <span class="token punctuation">{</span><span class="token string">"token"</span><span class="token keyword">:</span> <span class="token string">"sing"</span>, <span class="token string">"position"</span><span class="token keyword">:</span> 6, <span class="token punctuation">..</span>.<span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><p>　　词干提取在英文搜索种应用广泛，但是也有局限：<br>　　●　词干提取对中文意义不大。<br>　　●　搜索专业术语，人名时，词干提取反而让搜索结果变差。<br>　　eg：<span style="color: #FF0000;">flying fish</span> 与 <span style="color: #FF0000;">fly fishing</span> 意思差之千里，但经过 snowball 处理后的他们的词根（Term）相同 fli fish。<br>　　当用户搜索「假蝇钓鱼」信息时，出来的却是「飞鱼」 的结果，搜索结果十分不理想。<br>　　此类场景，建议使用精准搜索，采用简单的分词策略（不提取词干，只 lowercase）+ <a href="https://www.elastic.co/cn/blog/found-fuzzy-search" title="Fuzzy query" rel="external nofollow noopener noreferrer" target="_blank">Fuzzy query</a> 可能是更好的选择。</p><h3 id="2-处理中文"><a href="#2-处理中文" class="headerlink" title="2. 处理中文"></a><span style="font-size: 18px;">2. 处理中文</span></h3><p>　　对中文的处理我们需要借助一些插件（plugin），即第三方中文分词器。我会单独写一篇博文介绍中文分词器，<a href="/blogs/elasticsearch-chinese-analyzer.html" title="Elasticsearch中文分词器">点击查看</a>。</p><h3 id="3-Searching-Tokens-Exactly-精准搜索"><a href="#3-Searching-Tokens-Exactly-精准搜索" class="headerlink" title="3. Searching Tokens Exactly 精准搜索"></a><span style="font-size: 18px;">3. Searching Tokens Exactly 精准搜索</span></h3><p>　　当我们搜索用户名（username），商品分类（category），标签（tag）时，希望精准搜索。建索引时最好不要再分词、也不要提取词干，完全可以跳过 analyzer 这一步。<br>　　可以在某个字段的 mapping 中指定 “index”: “not_analyzed”，从而直接把原始文本转为 term，我们知道，trem query是完全匹配查询。<br>　　<span style="color: #FF0000;">注意：老版本ES是这样的，从ES 5.X版本开始，已经没有 string 类型字段，反之以 keyword 和 text 代替，keyword存储数据时候，不会分词建立索引；text存储数据时候，会自动分词，并生成索引。</span></p><pre class=" language-bash"><code class="language-bash">PUT people-info<span class="token punctuation">{</span>  <span class="token string">"mappings"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"children"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"properties"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"string"</span>,          <span class="token string">"index"</span><span class="token keyword">:</span> <span class="token string">"not_analyzed"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-其他需求"><a href="#4-其他需求" class="headerlink" title="4. 其他需求"></a><span style="font-size: 18px;">4. 其他需求</span></h3><p>　　用的不多，需要的时候见官网。</p><p class="reference"><br>原文<br><a href="https://www.elastic.co/blog/found-text-analysis-part-1" rel="external nofollow noopener noreferrer" target="_blank">https://www.elastic.co/blog/found-text-analysis-part-1</a><br></p>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch Query DSL入门</title>
      <link href="/blogs/elasticsearch-simple-query-dsl.html"/>
      <url>/blogs/elasticsearch-simple-query-dsl.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">Elasticsearch Query DSL入门</div><blockquote><p>列举几个最基础的DSL语句，所有长达成百上千行的DSL都是由这些基础语法组合起来的。</p></blockquote><h2 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h2><ul><li>Ubuntu 14.04/16、04</li><li>JDK1.8</li><li>Elasticsearch 5.3</li><li>Kibana 5.3.2</li></ul><h2 id="二、DSL介绍"><a href="#二、DSL介绍" class="headerlink" title="二、DSL介绍"></a>二、DSL介绍</h2><p>　　Query DSL又叫查询表达式，是一种非常灵活又富有表现力的查询语言，采用JSON接口的方式实现丰富的查询，并使你的查询语句更灵活、更精确、更易读且易调试。<br>　　我平时喜欢<span style="color: #FF0000;">借助Kibana来执行DSL语句</span>，进而辅助自己开发，也能用于debug和研究。<br>　　实际项目中一般封装一下第三方引擎来实现业务，而这些语法转换成DSL后经常有成百上千行，但其实一点也不复杂。不管是过滤、聚合还是嵌套，只要理解了最基本的语法，都是很好解读的。<br>当然我写这篇文章主要还是记录下我自己常用的几个DSL，因为隔得时间久了，裸写DSL不一定写得出来。</p><h2 id="三、全文查询"><a href="#三、全文查询" class="headerlink" title="三、全文查询"></a>三、全文查询</h2><h3 id="1-match-all"><a href="#1-match-all" class="headerlink" title="1. match_all"></a><span style="font-size: 18px;">1. match_all</span></h3><p>　　/_search 查找整个ES中所有索引的内容，/前面可以加上索引名，多个索引名之前用英文逗号分割。<br>　　下面这个语法是 <span style="color: #FF0000;">match_all</span> 查询，Kibana能够自动补全代码，最简单。</p><pre class=" language-bash"><code class="language-bash">GET /_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"match_all"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-match"><a href="#2-match" class="headerlink" title="2. match"></a><span style="font-size: 18px;">2. match</span></h3><p>　　下边的例子就表示查找 <span style="color: #3498db;">host</span> 为 <span style="color: #3498db;">wenyuanblog.com</span> 的所有记录。</p><pre class=" language-bash"><code class="language-bash">POST /wenyuanblog-2018.03.02/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"match"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"host"</span><span class="token keyword">:</span> <span class="token string">"wenyuanblog.com"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-multi-match"><a href="#3-multi-match" class="headerlink" title="3. multi_match"></a><span style="font-size: 18px;">3. multi_match</span></h3><p>　　在多个字段上执行相同的 <span style="color: #FF0000;">match</span> 查询，下边的例子就表示查询 <span style="color: #3498db;">host</span> 或 <span style="color: #3498db;">http_referer</span> 字段中包含 <span style="color: #3498db;">wenyuanblog.com</span> 的记录。</p><pre class=" language-bash"><code class="language-bash">GET /wenyuanblog-2018.03.02/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"multi_match"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token string">"wenyuanblog.com"</span>,      <span class="token string">"fields"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token string">"host"</span>,        <span class="token string">"http_referer"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="4-query-string"><a href="#4-query-string" class="headerlink" title="4. query_string"></a><span style="font-size: 18px;">4. query_string</span></h3><p>　　可以在查询里边使用<span style="color: #FF0000;">AND</span>或者<span style="color: #FF0000;">OR</span>来完成复杂的查询。<br>　　下边的例子表示查找 <span style="color: #3498db;">host</span> 为 <span style="color: #3498db;">a.wenyuanblog.com</span> 或者 <span style="color: #3498db;">b.wenyuanblog.com</span> 的所有记录。</p><pre class=" language-bash"><code class="language-bash">GET /wenyuanblog-2018.03.02/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"query_string"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token string">"(a.wenyuanblog.com) OR (b.wenyuanblog.com)"</span>,      <span class="token string">"fields"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token string">"host"</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　也可以组合更多的条件完成更复杂的查询请求。<br>　　下边的例子表示查询（<span style="color: #3498db;">host</span> 为 <span style="color: #3498db;">a.wenyuanblog.com</span>）或者是（<span style="color: #3498db;">host</span> 为 <span style="color: #3498db;">b.wenyuanblog.com</span> 且 <span style="color: #3498db;">status</span> 为 <span style="color: #3498db;">404</span>）的所有记录。</p><pre class=" language-bash"><code class="language-bash">GET /wenyuanblog-2018.03.02/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"query_string"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token string">"host:a.wenyuanblog.com OR (host:b.wenyuanblog.com AND status:404)"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　与其相类似的还有个 <span style="color: #FF0000;">simple_query_string</span> 的关键字，可以将 query_string 中的 AND 或 OR 用 + 或 | 这样的符号替换掉。</p><h3 id="5-term"><a href="#5-term" class="headerlink" title="5. term"></a><span style="font-size: 18px;">5. term</span></h3><p>　　<span style="color: #FF0000;">term</span> 可以用来精确匹配，精确匹配的值可以是数字、时间、布尔值或者是<span style="color: #FF0000;">设置了not_analyzed</span>不分词的字符串。</p><pre class=" language-bash"><code class="language-bash">GET /wenyuanblog-2018.03.02/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"term"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"status"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"value"</span><span class="token keyword">:</span> 404      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　<span style="color: #FF0000;">term</span> 对输入的文本不进行分析，直接精确匹配输出结果，如果要同时匹配多个值可以使用 <span style="color: #FF0000;">terms</span>。</p><pre class=" language-bash"><code class="language-bash">GET /wenyuanblog-2018.03.02/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"terms"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"status"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        403,        404      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="6-range"><a href="#6-range" class="headerlink" title="6. range"></a><span style="font-size: 18px;">6. range</span></h3><p>　　<span style="color: #FF0000;">range</span> 用来查询落在指定区间内的数字或者时间。<br>　　下边的例子表示搜索所有状态为<span style="color: #3498db;">200到399</span>之间的数据，这里的操作符主要有四个 <span style="color: #FF0000;">gt大于，gte大于等于，lt小于，lte小于等于</span>。</p><pre class=" language-bash"><code class="language-bash">GET /wenyuanblog-2018.03.02/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"range"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"status"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"gte"</span><span class="token keyword">:</span> 200,        <span class="token string">"lte"</span><span class="token keyword">:</span> 399      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　当使用日期作为范围查询时，我们需要注意下日期的格式，官方支持的日期格式主要有两种：<br>　　① 时间戳，注意是毫秒粒度。</p><pre class=" language-bash"><code class="language-bash">GET /wenyuanblog-2018.03.02/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"range"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"@timestamp"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"gte"</span><span class="token keyword">:</span> 1519920000000,        <span class="token string">"lte"</span><span class="token keyword">:</span> 1519956000000,        <span class="token string">"format"</span><span class="token keyword">:</span> <span class="token string">"epoch_millis"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　② 日期字符串。</p><pre class=" language-bash"><code class="language-bash">GET /wenyuanblog-2018.03.02/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"range"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"@timestamp"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"gte"</span><span class="token keyword">:</span> <span class="token string">"2018-03-02 00:00:00"</span>,        <span class="token string">"lte"</span><span class="token keyword">:</span> <span class="token string">"2018-03-03"</span>,        <span class="token string">"format"</span><span class="token keyword">:</span> <span class="token string">"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd"</span>,        <span class="token string">"time_zone"</span><span class="token keyword">:</span> <span class="token string">"+08:00"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　选择哪种方式根据实际情况决定，我们业务中用时间戳的情况居多。<br>　　如果采用日期字符串的方式，那么可以使用<span style="color: #FF0000;">format</span>字段指定匹配的日期格式，如果格式有多个就用||分开，像例子中那样，不过建议用同样的日期格式。<br>　　如果日期中缺少年月日这些内容，那么缺少的部分会用unix的开始时间（即1970年1月1日）填充，当你将”format”:”dd”指定为格式时，那么”gte”:10将被转换成1970-01-10T00:00:00.000Z<br>　　Elasticsearch中默认使用的是UTC时间，所以我们在使用时要通过time_zone来设置好时区，以免出错。</p><h3 id="7-exists"><a href="#7-exists" class="headerlink" title="7. exists"></a><span style="font-size: 18px;">7. exists</span></h3><p>　　查询出存在某字段的文档。</p><pre class=" language-bash"><code class="language-bash">GET /wenyuanblog-2018.03.02/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"bool"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"must"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"exists"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"field"</span><span class="token keyword">:</span> <span class="token string">"visitor.name"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  <span class="token string">"from"</span><span class="token keyword">:</span> 0,  <span class="token string">"size"</span><span class="token keyword">:</span> 100<span class="token punctuation">}</span></code></pre><h3 id="8-bool组合查询"><a href="#8-bool组合查询" class="headerlink" title="8. bool组合查询"></a><span style="font-size: 18px;">8. bool组合查询</span></h3><p>　　通常我们可能需要将很多个条件组合在一起查出最后的结果，这个时候就需要使用ES提供的bool来实现了。<br>　　布尔查询支持的子查询类型共有四种，分别是：<span style="color: #FF0000;">must，should，must_not和filter</span>。<br>　　must：类似于SQL中的AND，必须包含；<br>　　must_not：类似于SQL中的NOT，必须不包含；<br>　　should：文档应该匹配should子句查询的一个或多个；<br>　　filter：过滤器，文档必须匹配该过滤条件，跟must子句的唯一区别是，filter不会对结果进行相关性评分_score，换言之当我们的业务中无相关性的要求时，建议查询的过程中多用filter。<br>　　下面是一个组合查询的例子，我们要查询 <span style="color: #3498db;">host</span> 为 <span style="color: #3498db;">wenyuanblog.com</span> 且 <span style="color: #3498db;">http_x_forworded_for</span> 为 <span style="color: #3498db;">47.97.12.69</span> 且 <span style="color: #3498db;">status不为200</span> 的所有数据。</p><pre class=" language-bash"><code class="language-bash">GET /wenyuanblog-2018.03.02/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"bool"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"filter"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"match"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"host"</span><span class="token keyword">:</span> <span class="token string">"wenyuanblog.com"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>,        <span class="token punctuation">{</span>          <span class="token string">"match"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"http_x_forwarded_for"</span><span class="token keyword">:</span> <span class="token string">"47.97.12.69"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>,      <span class="token string">"must_not"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"match"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"status"</span><span class="token keyword">:</span> 200        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　这里再说一下 <span style="color: #FF0000;">should</span>。通常情况下，should子句是数组字段，包含多个should子查询，默认情况下，匹配的文档必须满足其中一个子查询条件。<br>　　但我们可以通过显式设置布尔查询的参数 <span style="color: #FF0000;">minimum_should_match</span> 的值，从而改变默认匹配行为。该参数控制一个文档必须匹配的should子查询的数量，它有很多种配置方式：<br>　　如果设置为数字3，表示至少需要匹配3个should子句；如果设置为一个百分比，例如”minimum_should_match”:75%，则至少满足75%且向下取整（5个should子句,5*75%=3.75,向下取整为3，也就是至少匹配3个should子句）。<br>　　下面是个例子。（注：在bool query中minimum_should_match只能紧跟在should的后面，放其他地方会出异常）</p><pre class=" language-bash"><code class="language-bash">GET /wenyuanblog-2018.03.02/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"bool"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"should"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"match"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"host"</span><span class="token keyword">:</span> <span class="token string">"a.wenyuanblog.com"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>,        <span class="token punctuation">{</span>          <span class="token string">"match"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"host"</span><span class="token keyword">:</span> <span class="token string">"b.wenyuanblog.com"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>,        <span class="token punctuation">{</span>          <span class="token string">"match"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"host"</span><span class="token keyword">:</span> <span class="token string">"c.wenyuanblog.com"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>,      <span class="token string">"minimum_should_match"</span><span class="token keyword">:</span> 2    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="9-sort"><a href="#9-sort" class="headerlink" title="9. sort"></a><span style="font-size: 18px;">9. sort</span></h3><p>　　<span style="color: #FF0000;">sort</span> 是排序，也是很常用的查询，这里我举个按<span style="color: #3498db;">时间（@timestamp）</span>倒叙查询的例子。</p><pre class=" language-bash"><code class="language-bash">GET /wenyuanblog-2018.03.02/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"match_all"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  <span class="token string">"sort"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">{</span>      <span class="token string">"@timestamp"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"order"</span><span class="token keyword">:</span> <span class="token string">"desc"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">]</span><span class="token punctuation">}</span></code></pre><h2 id="四、聚合查询"><a href="#四、聚合查询" class="headerlink" title="四、聚合查询"></a>四、聚合查询</h2><h3 id="1-分桶"><a href="#1-分桶" class="headerlink" title="1. 分桶"></a><span style="font-size: 18px;">1. 分桶</span></h3><p>　　根据 <span style="color: #3498db;">host</span> 字段的值进行分桶（有点类似于SQL中的group by），这里的 <span style="color: #3498db;">host_bucket</span> 是我给该桶起的名字。</p><pre class=" language-bash"><code class="language-bash">GET /wenyuanblog-2018.03.02/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"match_all"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  <span class="token string">"aggs"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"host_bucket"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"terms"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"field"</span><span class="token keyword">:</span> <span class="token string">"host"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-度量"><a href="#2-度量" class="headerlink" title="2. 度量"></a><span style="font-size: 18px;">2. 度量</span></h3><p>　　计算出 <span style="color: #3498db;">latency</span> 字段的最大值（metric有点类似于SQL的avg、max、min），这里的 <span style="color: #3498db;">max_latency</span> 是我给该度量起的名字。</p><pre class=" language-bash"><code class="language-bash">GET /wenyuanblog-2018.03.02/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"match_all"</span><span class="token keyword">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  <span class="token string">"aggs"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"max_latency"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"max"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"field"</span><span class="token keyword">:</span> <span class="token string">"latency"</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="五、业务应用"><a href="#五、业务应用" class="headerlink" title="五、业务应用"></a>五、业务应用</h2><p>　　实际业务中的一些需求，属于较综合的查询语法。</p><h3 id="1-聚合结果进行排序"><a href="#1-聚合结果进行排序" class="headerlink" title="1. 聚合结果进行排序"></a><span style="font-size: 18px;">1. 聚合结果进行排序</span></h3><p>　　关键词：aggregations，terms，order<br>　　先过滤出 <span style="color: #3498db;">host</span> 字段值为 <span style="color: #3498db;">“wenyuanblog.com”</span> 的记录，然后对 <span style="color: #3498db;">源IP</span> 进行分桶聚合，最后根据聚合查询到的 <span style="color: #3498db;">文档数量</span> <span style="color: #FF0000;">倒序排序</span>。</p><pre class=" language-bash"><code class="language-bash">GET /wenyuanblog-2019.05.*/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"bool"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"filter"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"range"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"@timestamp"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>              <span class="token string">"to"</span><span class="token keyword">:</span> 1557503999000,              <span class="token string">"from"</span><span class="token keyword">:</span> 1557417600000            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>,        <span class="token punctuation">{</span>          <span class="token string">"term"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"host"</span><span class="token keyword">:</span> <span class="token string">"wenyuanblog.com"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  <span class="token string">"from"</span><span class="token keyword">:</span> 0,  <span class="token string">"size"</span><span class="token keyword">:</span> 0,  <span class="token string">"aggregations"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"src_ip_bucket"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"terms"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"field"</span><span class="token keyword">:</span> <span class="token string">"http.src_ip.dotted"</span>,        <span class="token string">"size"</span><span class="token keyword">:</span> 10,        <span class="token string">"order"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"_count"</span><span class="token keyword">:</span> <span class="token string">"desc"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="2-IP范围过滤-分桶-度量-脚本-排序"><a href="#2-IP范围过滤-分桶-度量-脚本-排序" class="headerlink" title="2. IP范围过滤+分桶+度量+脚本+排序"></a><span style="font-size: 18px;">2. IP范围过滤+分桶+度量+脚本+排序</span></h3><p>　　关键词：range，aggregations，terms，metric，script，order<br>　　先根据 <span style="color: #3498db;">IP范围</span> 过滤，同时排除指定 <span style="color: #3498db;">host</span>；<br>　　接着对 <span style="color: #3498db;">源IP</span> 进行分桶聚合，再计算 <span style="color: #3498db;">进流量、出流量</span> 在该时间段内的总和，用脚本计算出 <span style="color: #3498db;">总流量（进流量+出流量）</span> ，最后根据 <span style="color: #3498db;">总流量（进流量+出流量）</span> 数值大小进行 <span style="color: #FF0000;">倒序排序</span>。<br>　　使用groovy：</p><pre class=" language-bash"><code class="language-bash">GET /wenyuanblog-2019.05.*/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"bool"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"filter"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"bool"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"must"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">{</span>                <span class="token string">"range"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                  <span class="token string">"@timestamp"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                    <span class="token string">"to"</span><span class="token keyword">:</span> 1557503999000,                    <span class="token string">"from"</span><span class="token keyword">:</span> 1557417600000                  <span class="token punctuation">}</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>,              <span class="token punctuation">{</span>                <span class="token string">"range"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                  <span class="token string">"http.src_ip.dotted"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                    <span class="token string">"to"</span><span class="token keyword">:</span> <span class="token string">"10.255.255.255"</span>,                    <span class="token string">"from"</span><span class="token keyword">:</span> <span class="token string">"10.0.0.0"</span>                  <span class="token punctuation">}</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>,              <span class="token punctuation">{</span>                <span class="token string">"bool"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                  <span class="token string">"must_not"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>                    <span class="token punctuation">{</span>                      <span class="token string">"terms"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                        <span class="token string">"host"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>                          <span class="token string">"a.wenyuanblog.com"</span>,                          <span class="token string">"b.wenyuanblog.com"</span>                        <span class="token punctuation">]</span>                      <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                  <span class="token punctuation">]</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>            <span class="token punctuation">]</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  <span class="token string">"from"</span><span class="token keyword">:</span> 0,  <span class="token string">"size"</span><span class="token keyword">:</span> 0,  <span class="token string">"aggs"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"appid_bucket"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"terms"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"field"</span><span class="token keyword">:</span> <span class="token string">"http.src_ip.dotted"</span>,        <span class="token string">"order"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"sum_total_bytes"</span><span class="token keyword">:</span> <span class="token string">"desc"</span>        <span class="token punctuation">}</span>,        <span class="token string">"size"</span><span class="token keyword">:</span> 100      <span class="token punctuation">}</span>,      <span class="token string">"aggs"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"sum_in_bytes"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"sum"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"field"</span><span class="token keyword">:</span> <span class="token string">"http.in_bytes"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>,        <span class="token string">"sum_out_bytes"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"sum"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"field"</span><span class="token keyword">:</span> <span class="token string">"http.out_bytes"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>,        <span class="token string">"sum_total_bytes"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"sum"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"script"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>              <span class="token string">"lang"</span><span class="token keyword">:</span> <span class="token string">"groovy"</span>,              <span class="token string">"inline"</span><span class="token keyword">:</span> <span class="token string">"doc['http.in_bytes'].value + doc['http.out_bytes'].value"</span>            <span class="token punctuation">}</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　使用painless，修改 <span style="color: #3498db;">script</span> 部分如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token string">"sum_total_bytes"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>  <span class="token string">"sum"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"script"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"lang"</span><span class="token keyword">:</span> <span class="token string">"painless"</span>,      <span class="token string">"inline"</span><span class="token keyword">:</span> <span class="token string">"doc['tcp.in_bytes'].value + doc['tcp.out_bytes'].value"</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>　　以前一直用 groovy，因为比较好用。但最近两年的某个版本开始将其 <span style="color: #FF0000;">Deprecation</span> 了，官方推荐使用 painless。<br>　　painless也能实现一些脚本语法，具体可以上官网查询。</p><h3 id="3-IP范围过滤-聚合过滤-度量"><a href="#3-IP范围过滤-聚合过滤-度量" class="headerlink" title="3. IP范围过滤+聚合过滤+度量"></a><span style="font-size: 18px;">3. IP范围过滤+聚合过滤+度量</span></h3><p>　　关键词：range，aggregations，filter，metric<br>　　先根据 <span style="color: #3498db;">IP范围</span> 过滤，然后开始聚合，筛选出 <span style="color: #3498db;">目的端口</span> 是80、443的数据，再计算这些数据中（80、443端口） <span style="color: #3498db;">进流量、出流量</span> 在该时间段内的总和。<br>　　至于<span style="color: #FF0000;">为什么要在聚合中进行过滤而不是在聚合前就过滤</span>，是因为下面语句只是完整dsl的一部分，该查询业务还要同时对其它端口进行聚合操作。</p><pre class=" language-bash"><code class="language-bash">GET /wenyuanblog-2019.05.*/_search<span class="token punctuation">{</span>  <span class="token string">"query"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"bool"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"filter"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token string">"bool"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"must"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>              <span class="token punctuation">{</span>                <span class="token string">"range"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                  <span class="token string">"@timestamp"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                    <span class="token string">"to"</span><span class="token keyword">:</span> 1557503999000,                    <span class="token string">"from"</span><span class="token keyword">:</span> 1557417600000                  <span class="token punctuation">}</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>,              <span class="token punctuation">{</span>                <span class="token string">"range"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                  <span class="token string">"http.src_ip.dotted"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                    <span class="token string">"to"</span><span class="token keyword">:</span> <span class="token string">"10.255.255.255"</span>,                    <span class="token string">"from"</span><span class="token keyword">:</span> <span class="token string">"10.0.0.0"</span>                  <span class="token punctuation">}</span>                <span class="token punctuation">}</span>              <span class="token punctuation">}</span>            <span class="token punctuation">]</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>,  <span class="token string">"from"</span><span class="token keyword">:</span> 0,  <span class="token string">"size"</span><span class="token keyword">:</span> 0,  <span class="token string">"aggs"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"dport_80_443"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>      <span class="token string">"filter"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"bool"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"must"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">{</span>              <span class="token string">"terms"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>                <span class="token string">"http.dport"</span><span class="token keyword">:</span> <span class="token punctuation">[</span>                  80,                  443                <span class="token punctuation">]</span>              <span class="token punctuation">}</span>            <span class="token punctuation">}</span>          <span class="token punctuation">]</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>,      <span class="token string">"aggs"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>        <span class="token string">"sum_in_bytes"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"sum"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"field"</span><span class="token keyword">:</span> <span class="token string">"http.in_bytes"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>,        <span class="token string">"sum_out_bytes"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>          <span class="token string">"sum"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>            <span class="token string">"field"</span><span class="token keyword">:</span> <span class="token string">"http.out_bytes"</span>          <span class="token punctuation">}</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><p>　　ES很强大，它支持的查询有很多，这里我只是列举了平时在Kibana中经常调试的DSL。还有很多实际业务中经常用到的模糊查询（wildcard、regexp、prefix）、nested查询、多层聚合等等，基本上都是先封装第三方引擎，然后开发时转成DSL并copy到Kibana进行验证和查错。<br>　　更复杂的应用这里就不列举出来了，必要时候官方文档是最好的资料。</p>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch索引备份与迁移</title>
      <link href="/blogs/elasticsearch-backup-and-migration.html"/>
      <url>/blogs/elasticsearch-backup-and-migration.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">Elasticsearch索引备份与迁移</div><blockquote><p>总结Elasticsearch各种备份与迁移方案，亲测。<br>详细记录了具体步骤。</p></blockquote><h2 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h2><ul><li>Ubuntu 14.04/16、04</li><li>JDK1.8</li><li>Elasticsearch 5.3</li><li>Kibana 5.3.2</li></ul><h2 id="二、单节点环境"><a href="#二、单节点环境" class="headerlink" title="二、单节点环境"></a>二、单节点环境</h2><h3 id="1-创建备份存储目录"><a href="#1-创建备份存储目录" class="headerlink" title="1. 创建备份存储目录"></a><span style="font-size: 18px;">1. 创建备份存储目录</span></h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> /media/es/es_backup<span class="token comment" spellcheck="true"># 该目录要是elasticsearch可访问的，我们的环境一般是elasticsearch用户</span><span class="token function">chown</span> -R elasticsearch:elasticsearch /media/es/es_backup/</code></pre><h3 id="2-修改elasticsearch-yml文件"><a href="#2-修改elasticsearch-yml文件" class="headerlink" title="2. 修改elasticsearch.yml文件"></a><span style="font-size: 18px;">2. 修改elasticsearch.yml文件</span></h3><p>　　修改elasticsearch.yml文件，添加path.repo配置。</p><pre class=" language-bash"><code class="language-bash">vim elasticsearch.yml<span class="token comment" spellcheck="true"># 增加一行如下：</span>path.repo: <span class="token punctuation">[</span><span class="token string">"/media/es/es_backup"</span><span class="token punctuation">]</span></code></pre><h3 id="3-重启Elasticsearch"><a href="#3-重启Elasticsearch" class="headerlink" title="3. 重启Elasticsearch"></a><span style="font-size: 18px;">3. 重启Elasticsearch</span></h3><h3 id="4-创建仓库"><a href="#4-创建仓库" class="headerlink" title="4. 创建仓库"></a><span style="font-size: 18px;">4. 创建仓库</span></h3><p>　　借助Kibana操作。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 创建仓库，创建一个名为my_backup的仓库</span>PUT _snapshot/my_backup<span class="token punctuation">{</span>  <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"fs"</span>,  <span class="token string">"settings"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"location"</span><span class="token keyword">:</span> <span class="token string">"/media/es/es_backup"</span>,    <span class="token string">"compress"</span><span class="token keyword">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 检查仓库是否创建成功（my_backup为之前创建的仓库名称） </span>GET _snapshot/my_backup<span class="token comment" spellcheck="true"># 删除仓库</span>DELETE _snapshot/my_backup</code></pre><h3 id="5-备份索引数据"><a href="#5-备份索引数据" class="headerlink" title="5. 备份索引数据"></a><span style="font-size: 18px;">5. 备份索引数据</span></h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 给所有索引创建快照</span>PUT _snapshot/my_backup/snapshot_name        <span class="token comment" spellcheck="true"># 针对具体的index创建快照备份</span><span class="token comment" spellcheck="true"># 其中my_backup是仓库名称，snapshot_name是快照的名字</span><span class="token comment" spellcheck="true"># ignore_unavailable在创建快照的过程中会忽略不存在的索引，默认情况下，如果没有设置，在索引不存在的情况下快照请求将会失败</span><span class="token comment" spellcheck="true"># include_global_state能够防止集群的全局状态被作为快照的一部分存储起来</span><span class="token comment" spellcheck="true"># 多个索引间不要加空格，否则只会对第一个索引操作（我踩过坑！！！）</span>PUT _snapshot/my_backup/snapshot_name?wait_for_completion<span class="token operator">=</span>true<span class="token punctuation">{</span>  <span class="token string">"indices"</span><span class="token keyword">:</span> <span class="token string">"index_1,index_2"</span>,  <span class="token string">"ignore_unavailable"</span><span class="token keyword">:</span> true,  <span class="token string">"include_global_state"</span><span class="token keyword">:</span> <span class="token boolean">false</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 查看指定仓库下所有快照</span>GET _snapshot/my_backup/_all<span class="token comment" spellcheck="true"># 查看具体某一个快照的信息</span>GET _snapshot/my_backup/snapshot_name/_status<span class="token comment" spellcheck="true"># 删除快照，要指定仓库名和快照名</span><span class="token comment" spellcheck="true"># 也能用于取消一个正在进行的快照创建过程，会删除备份了一半的快照</span>DELETE _snapshot/my_backup/snapshot_name</code></pre><p>　　这里我取一个仓库名为my_backup，快照名为alert_snap，要备份的index为.nina_view和cc-zabbix-2018.01.05</p><h3 id="6-将数据迁移到另一个环境"><a href="#6-将数据迁移到另一个环境" class="headerlink" title="6. 将数据迁移到另一个环境"></a><span style="font-size: 18px;">6. 将数据迁移到另一个环境</span></h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 备份创建好之后，在仓库目录/media/es/es_backup里是这样的：</span>-rw-r--r-- 1 elasticsearch elasticsearch  317 Jan 22 17:44 index-0-rw-r--r-- 1 elasticsearch elasticsearch    8 Jan 22 17:44 index.latestdrwxr-xr-x 4 elasticsearch elasticsearch 4096 Jan 22 17:44 indices/-rw-r--r-- 1 elasticsearch elasticsearch  103 Jan 22 17:44 meta-9KWgeCYtSBqqVrfD42bsNw.dat-rw-r--r-- 1 elasticsearch elasticsearch  237 Jan 22 17:44 snap-9KWgeCYtSBqqVrfD42bsNw.dat</code></pre><h3 id="7-在目标环境下，重复上面1-4步，建立仓库"><a href="#7-在目标环境下，重复上面1-4步，建立仓库" class="headerlink" title="7. 在目标环境下，重复上面1~4步，建立仓库"></a><span style="font-size: 18px;">7. 在目标环境下，重复上面1~4步，建立仓库</span></h3><p>　　将源集群的备份内容（/media/es/es_backup里的所有文件），复制到迁移目标的仓库目录里，接下来就是类似批量导入了。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 如果索引已经存在目标的集群，需要先关闭索引，恢复数据后再开启</span>POST /index_name/_closePOST _snapshot/my_backup/snapshot_name/_restorePOST /index_name/_open<span class="token comment" spellcheck="true"># 从快照中恢复指定的索引，并给索引重命名</span><span class="token comment" spellcheck="true"># indices里面可以写多个索引名，中间用逗号隔开</span><span class="token comment" spellcheck="true"># rename_pattern可以写完整的索引名，也可以用正则匹配索引名的局部</span><span class="token comment" spellcheck="true"># rename_replacement将替换rename_pattern中匹配到的局部(如果是正则,不是将整个索引名都替换)</span><span class="token comment" spellcheck="true">#下面这条语句会把index_1,index_2恢复为restored_index_1和restored_index_2</span>POST /_snapshot/my_backup/snapshot_1/_restore<span class="token punctuation">{</span>  <span class="token string">"indices"</span><span class="token keyword">:</span> <span class="token string">"index_1,index_2"</span>,  <span class="token string">"rename_pattern"</span><span class="token keyword">:</span> <span class="token string">"index_(.+)"</span>,  <span class="token string">"rename_replacement"</span><span class="token keyword">:</span> <span class="token string">"restored_index_<span class="token variable">$1</span>"</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 查看恢复的状态</span>GET _snapshot/my_backup/snapshot_name/_status </code></pre><h2 id="三、集群-多节点环境"><a href="#三、集群-多节点环境" class="headerlink" title="三、集群-多节点环境"></a>三、集群-多节点环境</h2><h3 id="1-创建共享目录"><a href="#1-创建共享目录" class="headerlink" title="1. 创建共享目录"></a><span style="font-size: 18px;">1. 创建共享目录</span></h3><p>　　(todo…我没实施过，感觉挺麻烦的，不太推荐)<br>　　使用sshfs在ES集群中每个节点的相同位置挂载一个共享目录，<br>　　假设ES集群有三个节点：192.168.1.10，192.168.1.11，192.168.1.12，<br>　　我这里共享目录用了/data/es_backup，ES备份仓库目录(也是共享目录的挂在点)用了/mnt/es_backup，可以根据实际情况调整</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在每个节点上安装sshfs</span><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> sshfs<span class="token comment" spellcheck="true"># 选取其中一个节点的目录(非系统盘)作为共享目录 &lt;/br></span><span class="token comment" spellcheck="true"># 假设选择的节点ip为192.168.1.10：</span><span class="token function">mkdir</span> /data/es_backup<span class="token function">chown</span> -R elasticsearch:elasticsearch /data/es_backup<span class="token function">chmod</span> -R 777 /data/es_backup<span class="token comment" spellcheck="true"># 在每个ES节点的相同位置创建存放ES仓库的目录</span><span class="token function">mkdir</span> /mnt/es_backup<span class="token function">chown</span> -R elasticsearch:elasticsearch /mnt/es_backup<span class="token function">chmod</span> -R 777 /mnt/es_backup<span class="token comment" spellcheck="true"># 每个节点挂载共享目录，执行同样的操作。$user为用户，一般为root，回车后输入密码，其中的参数-o allow_other允许了其他用户访问这个目录</span>sshfs <span class="token variable">$user@192</span>.168.1.10:/data/es_backup /mnt/es_backup -o allow_other<span class="token comment" spellcheck="true"># 如果修改了默认ssh端口, 比如23566, 则可以这样:</span>sshfs <span class="token variable">$user@192</span>.168.1.10:/data/es_backup /mnt/es_backup -p 23566 -o allow_other<span class="token comment" spellcheck="true"># 测试运行ES的用户是否有对共享目录的写权限</span><span class="token function">sudo</span> <span class="token function">su</span> - elasticsearch<span class="token function">touch</span> /mnt/es_backup/test.txt<span class="token comment" spellcheck="true"># 修改每个节点的elasticsearch.yml文件，添加path.repo配置</span>path.repo: <span class="token punctuation">[</span><span class="token string">"/mnt/es_backup"</span><span class="token punctuation">]</span></code></pre><p>　　接下来的操作和上面单节点一样，重启es，建立仓库，创建快照等等。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在共享目录下为集群创建共享仓库</span>PUT _snapshot/my_backup<span class="token punctuation">{</span>  <span class="token string">"type"</span><span class="token keyword">:</span> <span class="token string">"fs"</span>,  <span class="token string">"settings"</span><span class="token keyword">:</span> <span class="token punctuation">{</span>    <span class="token string">"location"</span><span class="token keyword">:</span> <span class="token string">"/mnt/es_backup"</span>,    <span class="token string">"compress"</span><span class="token keyword">:</span> <span class="token boolean">true</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true"># 后面步骤省略...</span></code></pre><p>　　最后补充一下：取消挂载共享目录，不要直接删除挂载目录，在每个节点下执行下面命令</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 这个命令会断开远程连接同时清空 /mnt/es_backup 目录。</span>fusermount -u /mnt/es_backup</code></pre><p>　　类似的实现文件共享的方法还有 nfs 和 samba（支持window和linux互相访问）</p><h3 id="2-借助第三方工具"><a href="#2-借助第三方工具" class="headerlink" title="2. 借助第三方工具"></a><span style="font-size: 18px;">2. 借助第三方工具</span></h3><p>　　第三方迁移工具，网上看了下，主要有三个：<br>　　●　elasticsearch-dump<br>　　●　elasticsearch-exporter<br>　　●　<a href="https://elasticsearch.cn/article/78" rel="external nofollow noopener noreferrer" target="_blank">elasticsearch-migration</a></p><p>　　<span style="color: #FF0000;">优点</span>：方便，快速。支持的功能很多(数据迁移、mapping迁移等等)。<br>　　<span style="color: #FF0000;">缺点</span>：原理是用了scroll+bulk，百万、千万级别条数的数据可以使用，数据量过大还是老老实实用我上面整理的快照方法吧；<br>　　备注：对ES操作时候，一些报错没有捕获到并写入log。比如我们只允许自动创建cc-开头的索引，迁移生成的新索引需要改名为别的名字，你会发现迁移完，数据没有进去，这也算是第三方工具的不足之处，不过它应该会不断完善。</p><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a>四、总结</h2><p>　　不管是运维也好，开发也好，对数据的备份和迁移是经常要做的事。针对环境的不同特别是数据量的差异，需要适时选择合适的方式。<br>　　有时候也要根据自己的具体需求而定，比如为了辅助自己开发，需要回放数据，那完全可以编写一些简单的脚本来实现。<br>　　我写过几个简单的脚本，放在GitHub上：<br>　　●　<a href="https://github.com/winyuan/es_replay" rel="external nofollow noopener noreferrer" target="_blank">es_replay</a><br>　　开发测试用途（数据导出、去重、构造和导入）<br>　　●　<a href="https://github.com/winyuan/es_assistant" rel="external nofollow noopener noreferrer" target="_blank">es_assistant</a><br>　　一些用于协助开发和测试的es交互脚本<br>　　●　<a href="https://github.com/winyuan/es_monitor" rel="external nofollow noopener noreferrer" target="_blank">es_monitor</a><br>　　Elaticsearch部署机的信息采集脚本（这个是很久很久以前写的，那时候刚学ES，能直接用，功能上没问题，但代码完全可以更优化一下，最近忙着学其他东西，所以一直没去动它。）</p>]]></content>
      
      
      <categories>
          
          <category> 日常运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Elasticsearch部署步骤</title>
      <link href="/blogs/elasticsearch-deployment.html"/>
      <url>/blogs/elasticsearch-deployment.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">Elasticsearch部署步骤</div><blockquote><p>现在官方已经出到了ES7 beta，不过现在为止用的最多也是比较稳定的是5.x。<br>这里我简单记录下针对5.x版本的部署配置过程，暂不考虑优化（后面再总结优化相关的笔记）。</p></blockquote><h2 id="一、环境"><a href="#一、环境" class="headerlink" title="一、环境"></a>一、环境</h2><ul><li>Ubuntu 14.04/16、04</li><li>JDK1.8</li><li>Elasticsearch 5.6</li></ul><h2 id="二、安装JDK"><a href="#二、安装JDK" class="headerlink" title="二、安装JDK"></a>二、安装JDK</h2><h3 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1. 下载安装"></a><span style="font-size: 18px;">1. 下载安装</span></h3><p>　　<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/jdk_download.png" alt="jdk_download.png"><br>　　将刚刚下载的文件拷贝到 /opt 目录下，<br>　　解压jdk到当前目录，使用命令 <code>tar -zxvf jdk-8u161-linux-x64.tar.gz</code><br>　　修改文件名 <code>mv jdk1.8.0_161 jdk1.8</code><br>　　至此，jdk1.8已经全部安装完成了</p><h3 id="2-配置环境变量"><a href="#2-配置环境变量" class="headerlink" title="2. 配置环境变量"></a><span style="font-size: 18px;">2. 配置环境变量</span></h3><p>　　修改 <code>vim /etc/profile</code> ，最底部添加:</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Sun JDK profile</span><span class="token function">export</span> JAVA_HOME<span class="token operator">=</span>/opt/jdk1.8<span class="token function">export</span> JRE_HOME<span class="token operator">=</span><span class="token variable">${JAVA_HOME}</span>/jre  <span class="token function">export</span> CLASSPATH<span class="token operator">=</span>.:<span class="token variable">${JAVA_HOME}</span>/lib:<span class="token variable">${JRE_HOME}</span>/lib  <span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">${JAVA_HOME}</span>/bin:<span class="token variable">$PATH</span></code></pre><p>　　运行 <code>source /etc/profile</code>，使/etc/profile文件生效<br>　　使用 <code>java -version</code> 和 <code>javac -version</code> 命令查看jdk版本及其相关信息，不会出现command not found错误，且显示的版本信息与前面安装的一致<br>　　<code>echo $JAVA_HOME</code>, <code>echo $CLASSPATH</code>, <code>echo $PATH</code>，看看自己的配置是否都正确。</p><h3 id="3-开机设置"><a href="#3-开机设置" class="headerlink" title="3. 开机设置"></a><span style="font-size: 18px;">3. 开机设置</span></h3><p>　　每次重启的时候，会发现jdk版本不正确，或者使用 <code>java -version</code> 显示不是所需版本，使用　<code>javac -version</code> 会出现command not found错误，解决方法是再次运行 <code>source /etc/profile</code>，使/etc/profile文件生效。显然每次这么操作很麻烦。<br>　　因此我们编辑 <code>vim ~/.bashrc</code>，最后加一句 </p><pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> /etc/profile</code></pre><h2 id="三、安装Elasticsearch"><a href="#三、安装Elasticsearch" class="headerlink" title="三、安装Elasticsearch"></a>三、安装Elasticsearch</h2><h3 id="1-下载安装-1"><a href="#1-下载安装-1" class="headerlink" title="1. 下载安装"></a><span style="font-size: 18px;">1. 下载安装</span></h3><p>　　登录官网 <a href="https://www.elastic.co/cn/downloads" rel="external nofollow noopener noreferrer" target="_blank">https://www.elastic.co/cn/downloads</a><br>　　选择下载elasticsearch，根据需要选择对应的安装包，这里选择5.6版本，下载完后得到 elasticsearch-5.6.0.tar.gz<br>　　操作系统中创建一个新用户专门用来管理es：<code>adduser elasticsearch</code><br>　　用 elasticsearch 用户将 elasticsearch-5.6.0.tar.gz 拷贝到 /opt 目录下。<br>　　解压到当前目录，使用命令 <code>tar -zxvf elasticsearch-5.6.0.tar.gz</code><br>　　删除压缩文件，使用命令 <code>rm -f elasticsearch-5.6.0.tar.gz</code><br>　　至此，elasticsearch安装完成</p><h3 id="2-ES集群需要改的系统配置"><a href="#2-ES集群需要改的系统配置" class="headerlink" title="2. ES集群需要改的系统配置"></a><span style="font-size: 18px;">2. ES集群需要改的系统配置</span></h3><p>　　<code>vim /etc/security/limits.conf</code></p><pre class=" language-bash"><code class="language-bash">* soft nofile 65536* hard nofile 131072* soft nproc 2048* hard nproc 4096* soft memlock unlimited* hard memlock unlimited* - nofile 65536root soft nofile 65536root hard nofile 131072root soft nproc 2048root hard nproc 4096root soft memlock unlimitedroot hard memlock unlimitedroot - nofile 65536</code></pre><p>　　<code>vim /etc/sysctl.conf</code></p><pre class=" language-bash"><code class="language-bash">vm.max_map_count<span class="token operator">=</span>655360vm.swappiness <span class="token operator">=</span> 0</code></pre><p>　　并执行 <code>sysctl -p</code></p><p>　　如果是supervisor托管的，修改/etc/supervisord.conf 中的<br>　　minfd = 65536<br>　　并重启supervisor</p><h3 id="3-修改ES配置文件elasticsearch-yml"><a href="#3-修改ES配置文件elasticsearch-yml" class="headerlink" title="3. 修改ES配置文件elasticsearch.yml"></a><span style="font-size: 18px;">3. 修改ES配置文件elasticsearch.yml</span></h3><pre class=" language-bash"><code class="language-bash">bootstrap.memory_lock: <span class="token boolean">false</span>bootstrap.system_call_filter: <span class="token boolean">false</span>cluster.name: elasticsearchnode.name: 192.168.10.201node.master: <span class="token boolean">true</span>node.data: <span class="token boolean">true</span>http.enabled: <span class="token boolean">true</span>network.host: 0.0.0.0discovery.zen.ping.unicast.hosts: <span class="token punctuation">[</span><span class="token string">"192.168.10.198"</span>,<span class="token string">"192.168.10.201"</span><span class="token punctuation">]</span>http.port: 9200script.engine.groovy.inline.update: onscript.engine.groovy.inline.search: onscript.engine.groovy.inline.aggs: onscript.max_compilations_per_minute: 10000path.data: /data/esaction.auto_create_index: cc-*,sc-*,.nina*,.security,.monitoring*,.watches,.triggered_watches,.watcher-history*</code></pre><p>　　同时也要指定一下jvm.options里的jvm虚拟机内存</p><h3 id="4-ES交给supervisor托管"><a href="#4-ES交给supervisor托管" class="headerlink" title="4. ES交给supervisor托管"></a><span style="font-size: 18px;">4. ES交给supervisor托管</span></h3><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>program:elasticsearch<span class="token punctuation">]</span>user <span class="token operator">=</span> elasticsearchstartsecs <span class="token operator">=</span> 3autostart <span class="token operator">=</span> <span class="token boolean">true</span>autorestart <span class="token operator">=</span> <span class="token boolean">true</span>startretries <span class="token operator">=</span> 3stdout_logfile<span class="token operator">=</span>NONEstderr_logfile<span class="token operator">=</span>NONEenvironment <span class="token operator">=</span> JAVA_HOME<span class="token operator">=</span><span class="token string">"/opt/jdk/"</span>, ES_JAVA_OPTS <span class="token operator">=</span> <span class="token string">"-Xms8g -Xmx8g"</span><span class="token function">command</span> <span class="token operator">=</span> /opt/elasticsearch/bin/elasticsearch</code></pre><h2 id="四、安装Kibana"><a href="#四、安装Kibana" class="headerlink" title="四、安装Kibana"></a>四、安装Kibana</h2><h3 id="1-从官网下载和es一样版本的Kibana"><a href="#1-从官网下载和es一样版本的Kibana" class="headerlink" title="1. 从官网下载和es一样版本的Kibana"></a><span style="font-size: 18px;">1. 从官网下载和es一样版本的Kibana</span></h3><p>　　拷贝到/opt目录，解压，修改配置文件kibana.yml</p><pre class=" language-bash"><code class="language-bash">server.host: <span class="token string">"192.168.10.201"</span>elasticsearch.url: <span class="token string">"http://192.168.10.198:9200"</span></code></pre><h3 id="2-Kibana交给supervisor托管"><a href="#2-Kibana交给supervisor托管" class="headerlink" title="2. Kibana交给supervisor托管"></a><span style="font-size: 18px;">2. Kibana交给supervisor托管</span></h3><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>program:kibana<span class="token punctuation">]</span>startsecs <span class="token operator">=</span> 3autostart <span class="token operator">=</span> <span class="token boolean">true</span>autorestart <span class="token operator">=</span> <span class="token boolean">true</span>startretries <span class="token operator">=</span> 3redirect_stderr <span class="token operator">=</span> <span class="token boolean">true</span><span class="token function">command</span> <span class="token operator">=</span> /opt/kibana/bin/kibanastdout_logfile <span class="token operator">=</span> /var/log/kibana.log</code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Elasticsearch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nginx正向代理与反向代理</title>
      <link href="/blogs/nginx-forward-proxy-and-reverse-proxy.html"/>
      <url>/blogs/nginx-forward-proxy-and-reverse-proxy.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">Nginx正向代理与反向代理</div><blockquote><p>正向代理与反向代理的区别，以及用Nginx配置实现代理服务。</p></blockquote><h2 id="一、正向代理与反向代理"><a href="#一、正向代理与反向代理" class="headerlink" title="一、正向代理与反向代理"></a>一、正向代理与反向代理</h2><h3 id="1-正向代理"><a href="#1-正向代理" class="headerlink" title="1. 正向代理"></a><span style="font-size: 18px;">1. 正向代理</span></h3><p>　　正向代理其实相当于请求的中继，比如说，如果某个网站国内无法访问，也就是被墙了，我可以选择两种方式，一个是配置代理服务器，第二种就是VPN，其实两种技术原理差不太多，如果说我自己访问不到这个网站，而这时可以通过一台可以访问到这个网站的服务器，也就是代理服务器，来进行访问，这台代理服务器，分析我们请求的信息，然后去对应的要去的网站上将内容取回来发给我，这样我就能读到想要访问的网站上的内容了，通过一下图片，可以很清晰的看出其原理：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/forward_proxy.png" alt="forward_proxy.png" width="500" hegiht="300" align="center"></p><h3 id="2-反向代理"><a href="#2-反向代理" class="headerlink" title="2. 反向代理"></a><span style="font-size: 18px;">2. 反向代理</span></h3><p>　　反向代理比正向代理更加透明，客户端并不知道访问的是代理服务器，当客户端请求一个网址的时候，会经过反向代理服务器，而这台反向代理服务器，会根据客户端的请求，将请求转发到内网服务器中，内网服务器处理请求并返回结果到反向代理服务器上，通过反向代理服务器，将结果最终返回到客户端，详情如图：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/reverse_proxy.png" alt="reverse_proxy.png" width="500" hegiht="300" align="center"></p><p>　　<strong>简单来说：</strong><br>　　正向代理代理的是客户端（如通过代理访问谷歌），而反向代理代理的是服务器（如Nginx代理PHP服务器）。</p><h2 id="二、通过SSH反向代理实现内网穿透"><a href="#二、通过SSH反向代理实现内网穿透" class="headerlink" title="二、通过SSH反向代理实现内网穿透"></a>二、通过SSH反向代理实现内网穿透</h2><h3 id="1-背景"><a href="#1-背景" class="headerlink" title="1. 背景"></a><span style="font-size: 18px;">1. 背景</span></h3><p>　　我用学校实验室的一台服务器在跑数据，但是这台服务器没有公网ip，只有学校内网ip，故我只能到实验室登录。但有时候，需要在宿舍或者家里远程连接这台服务器。<br>　　于是，我就用到了<strong>反向代理</strong>。前提是我有一台公网ip的服务器（例如，阿里的学生机，或者vultr的VPS都可以）。<br>　　首先，准备好这两台服务器：</p><ul><li>学校实验室服务器（SchoolServer）<br>　　IP：192.168.10.50<br>　　ssh端口：22<br>　　用户：student<br>　　密码：helloworld</li><li>我的外网服务器（MyServer）<br>　　IP：111.13.100.91<br>　　ssh端口：22<br>　　用户：wenyuanblog<br>　　密码：<a href="http://www.wenyuanblog.com">www.wenyuanblog.com</a></li></ul><h3 id="2-实现原理"><a href="#2-实现原理" class="headerlink" title="2. 实现原理"></a><span style="font-size: 18px;">2. 实现原理</span></h3><p>　　在学校内网服务器（以下简称SchoolServer）中，通过SSH设置反向代理，指向我的公网服务器（以下简称MyServer，该服务器作为反向代理服务器），之后用客户端连接MyServer时，MyServer会把请求转交给SchoolServer，从而间接登录学校的内网服务器。<br>　　<strong>整个过程，我们作为客户端是感知不到代理服务器的存在的。客户端是否能感知代理服务器的存在，是区别正向代理和反向代理的关键。</strong><br>　　SSH参数介绍</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 反向代理命令</span><span class="token function">ssh</span> -fCNR<span class="token comment" spellcheck="true"># 正向代理命令</span><span class="token function">ssh</span> -fCNL</code></pre><p>　　参数说明</p><table><thead><tr><th style="text-align:center">参数</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">-f</td><td style="text-align:center">后台执行ssh指令</td></tr><tr><td style="text-align:center">-C</td><td style="text-align:center">允许压缩数据</td></tr><tr><td style="text-align:center">-N</td><td style="text-align:center">不执行远程指令</td></tr><tr><td style="text-align:center">-R</td><td style="text-align:center">将远程服务器的某个端口转发到本地服务器的指定端口</td></tr><tr><td style="text-align:center">-L</td><td style="text-align:center">将本地服务器的某个端口转发到远程服务器的指定端口</td></tr><tr><td style="text-align:center">-p</td><td style="text-align:center">指定远程服务器的端口</td></tr></tbody></table><h3 id="3-内网服务器操作"><a href="#3-内网服务器操作" class="headerlink" title="3. 内网服务器操作"></a><span style="font-size: 18px;">3. 内网服务器操作</span></h3><p>　　登录SchoolServer，进行如下操作：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># ssh -N -f -R MyServer端口:127.0.0.1:本地端口 MyServer用户@MyServerIP</span><span class="token function">ssh</span> -N -f -R 20022:127.0.0.1:22 wenyuanblog@111.13.100.91</code></pre><p>　　这句命令的意思是，将MyServer的 20022 端口转发至SchoolServer 22 端口，最后是MyServer用户名和IP。<br>　　使用 <code>ps aux | grep ssh</code> 来查看是否运行。</p><h3 id="4-公网服务器操作"><a href="#4-公网服务器操作" class="headerlink" title="4. 公网服务器操作"></a><span style="font-size: 18px;">4. 公网服务器操作</span></h3><p>　　登录MyServer，进行如下操作：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># ssh SchoolServer用户名@127.0.0.1 -p 代理端口 -L MyServerIP:代理端口:127.0.0.1:22</span><span class="token function">ssh</span> student@127.0.0.1 -p 20022 -L 111.13.100.91:20022:127.0.0.1:22</code></pre><p>　　执行这条命名，输入student用户的密码，现在就已经跳转登录到内网服务器了。<br>　　保持当前窗口的登录状态，这时候使用xshell、beyondcompare，就只要在登录的配置项里IP填MyServer的IP，端口填20022就好了。</p><h2 id="三、Nginx配置实现代理服务"><a href="#三、Nginx配置实现代理服务" class="headerlink" title="三、Nginx配置实现代理服务"></a>三、Nginx配置实现代理服务</h2><h3 id="1-背景-1"><a href="#1-背景-1" class="headerlink" title="1. 背景"></a><span style="font-size: 18px;">1. 背景</span></h3><p>　　到目前为止，我们都还没有用到Nginx的代理服务。那什么时候会需要呢，现在有了如下需求：<br>　　在学校内网服务器上跑了一个网页（实验室代码库GitLab），我们需要在宿舍或者家里访问这个内部网页。<br>　　该项目是部署在内网的，所以在内网直接访问不会有问题，而从外网访问当然也就访问不到。</p><ul><li>学校实验室服务器（SchoolServer）<br>　　IP：192.168.10.50<br>　　页面url：192.168.10.50:8000</li><li>我的外网服务器（MyServer）<br>　　IP：111.13.100.91<br>　　站点域名：<a href="http://www.wenyuanblog.com">www.wenyuanblog.com</a></li></ul><h3 id="2-实现原理-1"><a href="#2-实现原理-1" class="headerlink" title="2. 实现原理"></a><span style="font-size: 18px;">2. 实现原理</span></h3><p>　　还是通过反向代理来实现。<br>　　通过Nginx实现端口转发，最后可以通过公网服务器的域名+端口号访问学校内网服务器的页面。<br>　　即访问<a href="http://www.wenyuanblog.com:28000时，将得到192.168.10.50:8000（实验室代码库）的页面。">www.wenyuanblog.com:28000时，将得到192.168.10.50:8000（实验室代码库）的页面。</a><br>　　当然了，这样配置的话，我不得不记住 28000 这个端口号，显然不方便。<br>　　所以下面的配置，我将配置成二级域名的形势，即 gitlab.wenyuanblog.com -&gt; 192.168.10.50:8000</p><h3 id="3-内网服务器操作-1"><a href="#3-内网服务器操作-1" class="headerlink" title="3. 内网服务器操作"></a><span style="font-size: 18px;">3. 内网服务器操作</span></h3><p>　　登录SchoolServer，进行如下操作（和“二”中一样）：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># ssh -N -f -R MyServer端口:127.0.0.1:本地端口 MyServer用户@MyServerIP</span><span class="token function">ssh</span> -N -f -R 28000:127.0.0.1:8000 wenyuanblog@111.13.100.91</code></pre><p>　　这句命令的意思是，将MyServer的 28000 端口转发至SchoolServer 8000 端口，最后是MyServer用户名和IP。<br>　　使用 <code>ps aux | grep ssh</code> 来查看是否运行。</p><h3 id="4-公网服务器操作-1"><a href="#4-公网服务器操作-1" class="headerlink" title="4. 公网服务器操作"></a><span style="font-size: 18px;">4. 公网服务器操作</span></h3><p>　　登录MyServer，增加一份Nginx的配置文件，我习惯放于 /usr/local/nginx/conf/vhosts 目录下，考虑到是代理的配置文件，我取名为 school.proxy<br>　　<code>vim school.proxy</code>，配置如下：</p><pre class=" language-bash"><code class="language-bash">upstream school_gitlab <span class="token punctuation">{</span>        server 127.0.0.1:28000<span class="token punctuation">;</span><span class="token punctuation">}</span>server <span class="token punctuation">{</span>        listen       80<span class="token punctuation">;</span>        server_name   gitlab.wenyuanblog.com<span class="token punctuation">;</span>        location / <span class="token punctuation">{</span>            proxy_pass http://school_gitlab<span class="token punctuation">;</span>            proxy_set_header Host <span class="token variable">$host</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        access_log  /var/log/nginx/access/school_gitlab.log<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>　　现在，我就可以通过二级域名访问学校实验室的GitLab了。<br>　　整个过程中，在MyServer的数据流向如下：<br>　　二级域名访问 -&gt; MyServer:80 -&gt; nginx分发 -&gt; MyServer:28000 -&gt; SchoolServer:8080</p><h2 id="四、补充：用autossh代替ssh"><a href="#四、补充：用autossh代替ssh" class="headerlink" title="四、补充：用autossh代替ssh"></a>四、补充：用autossh代替ssh</h2><h3 id="1-背景-2"><a href="#1-背景-2" class="headerlink" title="1. 背景"></a><span style="font-size: 18px;">1. 背景</span></h3><p>　　其实整个过程到上面为止已经结束了，目前已经通过反向代理实现内网穿透，平时肯定够用了。<br>　　如果想追求更进一步的配置，可以继续往下看。<br>　　什么是更进一步的配置呢？<br>　　在前面<span style="color: #FF0000;">二、三</span>两部分内容的“内网服务器操作”时，我们使用ssh建立的反向连接其实很不稳定，长时间不使用连接就会自动释放，这个时候就需要使用autossh。<br>　　autossh的参数与ssh的参数是一致的，但是不同的是，在隧道断开的时候，autossh会自动重新连接而ssh不会。</p><h3 id="2-步骤修改"><a href="#2-步骤修改" class="headerlink" title="2. 步骤修改"></a><span style="font-size: 18px;">2. 步骤修改</span></h3><p>　　只需改动一个地方，那就是上面<span style="color: #FF0000;">二</span>和<span style="color: #FF0000;">三</span>里面的“<span style="color: #FF0000;">3. 内网服务器操作</span>”，其他操作不变。<br>　　<strong>现在如下操作：</strong><br>　　Step1. 配置公钥和私钥，实现免密码登录(为后面的脚本做准备)<br>　　　　（1）登录内网服务器（SchoolServer）<br>　　　　　　切换到普通用户student，不建议用root<br>　　　　　　执行命令：<br>　　　　　　<code>ssh-keygen -t rsa -P &#39;&#39;</code><br>　　　　　　直接ssh-keygen然后三次回车就可以了。<br>　　　　　　-P表示密码，-P ‘’ 就表示空密码，也可以不用-P参数，这样就要三车回车，用-P就一次回车。<br>　　　　　　它在/home/student下生成.ssh目录，.ssh下有id_rsa和id_rsa.pub。（这样就生成了公钥/私钥对）<br>　　　　（2）把内网服务器（SchoolServer）下的id_rsa.pub复制到公网服务器（MyServer）下<br>　　　　　　执行命令：<br>　　　　　　<code>scp .ssh/id_rsa.pub wenyuanblog@111.13.100.91:/home/wenyuanblog/id_rsa.pub</code><br>　　　　　　由于还没有免密码登录的，所以要输入密码。<br>　　　　（3）公网服务器（MyServer）加入内网服务器（SchoolServer）的公钥<br>　　　　　　登录公网服务器（MyServer），切换到wenyuanblog账户（下面的步骤不要用root）。<br>　　　　　　如果公网服务器的wenyuanblog目录下没有.ssh和authorized_keys文件则创建这个文件夹和文件。<br>　　　　　　把从内网服务器复制的id_rsa.pub添加到.ssh/authorzied_keys文件里，即执行命令：<br>　　　　　　<code>cat id_rsa.pub &gt;&gt; .ssh/authorized_keys</code><br>　　　　　　<code>cat .ssh/authorized_keys</code><br>　　　　　　<code>chmod 644 .ssh/authorized_keys</code><br>　　　　　　authorized_keys的权限要是644。<br>　　　　（4）内网服务器（SchoolServer）登录公网服务器（MyServer）试试<br>　　　　　　回到内网服务器（SchoolServer），用之前的普通用户student，执行<br>　　　　　　<code>ssh wenyuanblog@111.13.100.91</code><br>　　　　　　第一次登录要yes，现在内网机器就可以免密码登录公网机器了。</p><p>　　Step2. 登录内网服务器，启动autossh，维持ssh连接<br>　　　　上面提过，使用ssh建立的反向连接很不稳定，长时间不使用连接就会自动释放，这个时候就需要使用autossh。<br>　　　　一般新机器需要安装autossh：<br>　　　　<code>yum install autossh</code>（CentOS）<br>　　　　<code>apt-get install autossh</code>（Ubuntu）<br>　　　　切换到wenyuanblog用户（非root用户），在其home目录下创建一个autossh.sh脚本，开辟连接到公网服务器的隧道。<br>　　　　autossh.sh脚本内写入要开辟的端口：</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>/usr/bin/autossh -NR 0.0.0.0:20022:127.0.0.1:22  -i ~/.ssh/id_rsa wenyuanblog@公网IP -p 22 <span class="token operator">>></span> ~/log/ssh_nat.log 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span>/usr/bin/autossh -NR 0.0.0.0:28000:127.0.0.1:8000 -i ~/.ssh/id_rsa wenyuanblog@公网IP -p 22 <span class="token operator">>></span> ~/log/ssh_nat.log 2<span class="token operator">></span><span class="token operator">&amp;</span>1 <span class="token operator">&amp;</span></code></pre><p>　　　　这两行就分别代替了上面<span style="color: #FF0000;">二</span>和<span style="color: #FF0000;">三</span>中“<span style="color: #FF0000;">3. 内网服务器操作</span>”里的内容。<br>　　　　运行脚本：<br>　　　　<code>chmod +x autossh.sh</code><br>　　　　<code>sh autossh.sh</code><br>　　　　使用 <code>ps -ef|grep autossh</code> 和 <code>ps -ef|grep ssh</code> 查看当前运行中的autossh任务进程。</p><p>　　其余步骤不变，完成。</p>]]></content>
      
      
      <categories>
          
          <category> 日常运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Nmap基础用法</title>
      <link href="/blogs/nmap-basic-usage.html"/>
      <url>/blogs/nmap-basic-usage.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">Nmap基础用法</div><blockquote><p>自己搜集总结的Nmap常用命令及参数说明。</p></blockquote><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a>一、简介</h2><p>NMap，也就是Network Mapper，是Linux下的网络扫描和嗅探工具包。<br>nmap是在网络安全渗透测试中经常会用到的强大的扫描器，功能很强大。</p><h2 id="二、参数说明"><a href="#二、参数说明" class="headerlink" title="二、参数说明"></a>二、参数说明</h2><p><span style="color: #27ae60;">-sP 渗透内网之后判断当前网络哪些主机在线</span></p><pre class=" language-bash"><code class="language-bash">nmap -sP 192.168.1/255</code></pre><p><span style="color: #27ae60;">-vv 显示详细的扫描过程<br>-sS 使用SYN半开式扫描，这种扫描方式使得扫描结果更加正确（又称半开放,或隐身扫描）</span></p><pre class=" language-bash"><code class="language-bash">nmap -vv -sS IP</code></pre><p><span style="color: #27ae60;">-O 大写O代表OS，判断主机操作系统</span></p><pre class=" language-bash"><code class="language-bash">nmap -O IP</code></pre><p><span style="color: #27ae60;">延时策略</span><br>-T(0-5) 默认为 3<br>0 即 Paranoid 模式。为了避开IDS的检测使扫描速度极慢，nmap串所有的扫描，每隔至少5分钟发送一个包。<br>1 即 Sneaky 模式。也差不多，只是数据包的发送间隔是15秒。<br>2 即 Polite 模式。不增加太大的网络负载，串行每个探测，并使每个探测间隔0.4秒。<br>3 即 Normal 模式。nmap的默认选项，在不使网络过载或者主机/端口丢失的情况下尽可能快速地扫描。<br>4 即 Aggressive 模式。设置5分钟的超时限制，对每台主机的扫描时间不超过5分钟，并且对每次探测回应的等待时间不超过1.5秒。<br>5 即 lnsane 模式。只适合快速的网络或者不在意丢失默些信息，每台主机的超时限制为75秒，对每次探测只等待0.3秒。</p><pre class=" language-bash"><code class="language-bash">nmap -sS -T1 IP</code></pre><p><span style="color: #27ae60;">-sV 探测端口的服务类型/具体版本等信息</span></p><pre class=" language-bash"><code class="language-bash">nmap -vv -sV IP</code></pre><p><span style="color: #27ae60;">-p 端口号 对某个端口的服务版本进行详细探测，有助于升入的针对性攻击，比如缓冲溢出攻击</span></p><pre class=" language-bash"><code class="language-bash">nmap -vv -sV IP -p 21</code></pre><p><span style="color: #27ae60;">适用于内外网的探测，以内网操作为示例（外网参数同）</span></p><pre class=" language-bash"><code class="language-bash">简单端口扫描：nmap -vv -sT<span class="token punctuation">(</span>sS、sF、sU、sA<span class="token punctuation">)</span> 192.168.0.1 -D 127.0.0.1（-D 伪造的地址）OS检测：nmap -vv -sS -O 192.168.0.1RPC鉴别：nmap -sS -sR 192.168.0.1Linux 上的 portmap 就是一个简单的 RPC 服务，监听端口为111（默认）Ping 扫射：nmap -sP 172.16.15.0/24</code></pre><h2 id="三、十条nmap常用的扫描命令"><a href="#三、十条nmap常用的扫描命令" class="headerlink" title="三、十条nmap常用的扫描命令"></a>三、十条nmap常用的扫描命令</h2><p><span style="color: #27ae60;">1）获取远程主机的系统类型及开放端口</span></p><pre class=" language-bash"><code class="language-bash">nmap -sS -P0 -sV -O <span class="token operator">&lt;</span>target<span class="token operator">></span></code></pre><p>这里的 &lt; target &gt; 可以是单一IP，或主机名，或域名，或子网<br>-sS TCP SYN 扫描（又称半开放，或隐身扫描）<br>-P0 允许你关闭 ICMP pings.<br>-sV 打开系统版本检测<br>-O 尝试识别远程操作系统<br>其它选项：<br>-A 同时启用操作系统指纹识别和版本检测<br>-v 详细输出扫描情况<br>nmap -sS -P0 -A -v <target></target></p><p><span style="color: #27ae60;">2）列出开放了指定端口的主机列表</span></p><pre class=" language-bash"><code class="language-bash">nmap -sT -p 80 -oG – 192.168.1.* <span class="token operator">|</span> <span class="token function">grep</span> <span class="token function">open</span></code></pre><p>更改-p参数来指定端口号。参考“man nmap”中指定地址范围的不同方法。</p><p><span style="color: #27ae60;">3）在网络中寻找所有在线主机</span></p><pre class=" language-bash"><code class="language-bash">nmap -sP 192.168.0.*<span class="token comment" spellcheck="true"># 或者也可用以下命令指定 subnet：</span>nmap -sP 192.168.0.0/24</code></pre><p><span style="color: #27ae60;">4）Ping指定范围内的 IP 地址</span></p><pre class=" language-bash"><code class="language-bash">nmap -sP 192.168.1.100-254</code></pre><p>nmap接受多种寻址符号、多个目标/范围等。</p><p><span style="color: #27ae60;">5）在某段子网上查找未占用的IP</span></p><pre class=" language-bash"><code class="language-bash">nmap -T4 -sP 192.168.2.0/24 <span class="token operator">&amp;&amp;</span> <span class="token function">egrep</span> <span class="token string">"00:00:00:00:00:00"</span> /proc/net/arp</code></pre><p><span style="color: #27ae60;">6）在局域网上扫描Conficker蠕虫病毒</span></p><pre class=" language-bash"><code class="language-bash">nmap -PN -T4 -p139,445 -n -v -script<span class="token operator">=</span>smb-check-vulns -script-args safe<span class="token operator">=</span>1 192.168.0.1-254</code></pre><p>将192.168.0.1-256替换成你想要检查的IP</p><p><span style="color: #27ae60;">7）扫描网络上的恶意接入点（rogue APs）</span></p><pre class=" language-bash"><code class="language-bash">nmap -A -p1-85,113,443,8080-8100 -T4 -min-hostgroup 50 -max-rtt-timeout 2000 -initial-rtt-timeout 300 -max-retries 3 -host-timeout 20m -max-scan-delay 1000 -oA wapscan 10.0.0.0/8</code></pre><p>我用这个扫描命令成功地在一个非常大的网络中找到许多流氓APs。</p><p><span style="color: #27ae60;">8）使用诱饵扫描方法来扫描主机端口</span><br>在扫描端口时使用诱饵，以避免被系统管理员捕获</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> nmap -sS 192.168.0.10 -D 192.168.0.2</code></pre><p>扫描目标设备/计算机（192.168.0.10）上打开的端口，同时设置一个诱饵地址（192.168.0.2）。这将在目标安全日志中显示诱饵ip地址，而不是您的ip。诱饵地址必须是活的。检查/var/log/secure上的目标安全日志，确保它工作正常。</p><p><span style="color: #27ae60;">9）子网的反向DNS记录列表</span></p><pre class=" language-bash"><code class="language-bash">nmap -R -sL 209.85.229.99/27 <span class="token operator">|</span> <span class="token function">awk</span> <span class="token string">'{if(<span class="token variable">$3</span>=="not")print"("<span class="token variable">$2</span>") no PTR";else print<span class="token variable">$3</span>" is "<span class="token variable">$2</span>}'</span> <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">'('</span></code></pre><p><span style="color: #27ae60;">10）显示网络上共有多少台Linux及Win设备</span></p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> nmap -F -O 192.168.1.1-255 <span class="token operator">|</span> <span class="token function">grep</span> <span class="token string">"Running: "</span> <span class="token operator">></span> /tmp/os<span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> /tmp/os <span class="token operator">|</span> <span class="token function">grep</span> Linux <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token variable">)</span></span> Linux device(s)"</span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span><span class="token function">cat</span> /tmp/os <span class="token operator">|</span> <span class="token function">grep</span> Windows <span class="token operator">|</span> <span class="token function">wc</span> -l<span class="token variable">)</span></span> Window(s) devices"</span></code></pre><h2 id="四、nmap命令完整思维导图"><a href="#四、nmap命令完整思维导图" class="headerlink" title="四、nmap命令完整思维导图"></a>四、nmap命令完整思维导图</h2><p><a href="/static/nmap命令完整思维导图.png" title="nmap命令完整思维导图">nmap命令完整思维导图</a></p>]]></content>
      
      
      <categories>
          
          <category> 日常运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Nmap </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux连接MySQL命令表</title>
      <link href="/blogs/mysql-command-in-linux.html"/>
      <url>/blogs/mysql-command-in-linux.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">Linux连接MySQL命令表</div><blockquote><p>Linux环境下通过一些命令快速操作数据库。</p></blockquote><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 连接mysql（注：-h、-P、-u、-p后面可以不用加空格）</span>mysql -h主机地址 -P端口 -u用户名 -p用户密码<span class="token comment" spellcheck="true"># 显示数据库</span>mysql<span class="token operator">></span> show databases<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 使用某个数据库</span>mysql<span class="token operator">></span> use xxx<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 查看该数据库中的表</span>mysql<span class="token operator">></span> show tables<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 显示数据表的结构</span>mysql<span class="token operator">></span> describe 表名<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 显示表中的记录（注意表名大小写）</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> * from 表名<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 创建数据库</span>mysql<span class="token operator">></span> create database 数据库名<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 建表  </span>use 库名<span class="token punctuation">;</span>create table 表名 （跟上字段列表）<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 例如：创建表user,表中有id（序号，自增），name（姓名）,gender（性别）,birthday（出身年月）四个字段  </span>mysql<span class="token operator">></span> use blog<span class="token punctuation">;</span>  mysql<span class="token operator">></span> create table user <span class="token punctuation">(</span>id int<span class="token punctuation">(</span>3<span class="token punctuation">)</span> auto_increment not null primary key, name char<span class="token punctuation">(</span>8<span class="token punctuation">)</span>,gender char<span class="token punctuation">(</span>2<span class="token punctuation">)</span>,birthday date<span class="token punctuation">)</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> describe name<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 往表中增加数据</span><span class="token comment" spellcheck="true"># 例如：增加几条相关纪录。  </span>mysql<span class="token operator">></span> insert into user values<span class="token punctuation">(</span><span class="token string">''</span>,<span class="token string">'张三'</span>,<span class="token string">'男'</span>,<span class="token string">'2019-01-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  mysql<span class="token operator">></span> insert into user values<span class="token punctuation">(</span><span class="token string">''</span>,<span class="token string">'李四'</span>,<span class="token string">'女'</span>,<span class="token string">'2020-06-01'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mysql<span class="token operator">></span> <span class="token keyword">select</span> * from name<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 修改表中数据</span><span class="token comment" spellcheck="true"># 例如：将张三的出生年月改为2019-06-01</span>mysql<span class="token operator">></span> update user <span class="token keyword">set</span> birthday<span class="token operator">=</span><span class="token string">'2019-01-01'</span> where name<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 删除某表中的数据  </span><span class="token comment" spellcheck="true"># 例如：删除名字是张三的数据。  </span>mysql<span class="token operator">></span> delete from user where name<span class="token operator">=</span><span class="token string">'张三'</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true"># 删库和删表  </span>mysql<span class="token operator">></span> drop database 库名<span class="token punctuation">;</span>mysql<span class="token operator">></span> drop table 表名<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 退出mysql</span>mysql<span class="token operator">></span> <span class="token keyword">exit</span> <span class="token punctuation">(</span>回车<span class="token punctuation">)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 日常运维 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows环境安装MySQL5.7</title>
      <link href="/blogs/mysql-install-in-windows.html"/>
      <url>/blogs/mysql-install-in-windows.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">Windows环境安装MySQL5.7</div><blockquote><p>在Windows开发环境下安装MySQL5.7，使用官方免安装软件包，手动启停服务和编写批处理脚本实现MySQL启停。</p></blockquote><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><h3 id="1-下载免安装软件包"><a href="#1-下载免安装软件包" class="headerlink" title="1. 下载免安装软件包"></a><span style="font-size: 18px;">1. 下载免安装软件包</span></h3><p>　　我比较喜欢免安装版本的，比较干净。<br>　　到官网的开发者专区下载MySQL（Community版）免安装软件包，<br>　　下载地址：<a href="https://dev.mysql.com/downloads/mysql/" rel="external nofollow noopener noreferrer" target="_blank">https://dev.mysql.com/downloads/mysql/</a><br>　　<span style="font-size: 10px; color: #FF0000;">* </span><span style="font-size: 10px; color: #9e9e9e;">当前最新版本是8.0，如果需要下载其它版本，可以点击页面中的</span> <span style="font-size: 18px; color: #007597;">Looking for previous GA versions?</span> <span style="font-size: 10px; color: #9e9e9e;">（未来版本超链接入口可能会有变化）</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/mysql_download_in_windows.png" alt="mysql_download_in_windows.png"></p><h3 id="2-解压压缩包"><a href="#2-解压压缩包" class="headerlink" title="2. 解压压缩包"></a><span style="font-size: 18px;">2. 解压压缩包</span></h3><p>　　将下载的软件包解压并重命名到 <code>D:\Program Files\mysql-5.7</code> 目录下。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/mysql_unzip_in_windows.png" alt="mysql_unzip_in_windows.png"></p><h3 id="3-进入命令行终端"><a href="#3-进入命令行终端" class="headerlink" title="3. 进入命令行终端"></a><span style="font-size: 18px;">3. 进入命令行终端</span></h3><p>　　以Window10为例，<br>　　【开始】-【搜索程序和文件】输入 <code>cmd</code>，在搜索到的程序图标上点击鼠标右键，选择【以管理员身份运行】。</p><h3 id="4-进入命令行终端"><a href="#4-进入命令行终端" class="headerlink" title="4. 进入命令行终端"></a><span style="font-size: 18px;">4. 进入命令行终端</span></h3><p>　　依次输入如下指令：</p><pre class=" language-bash"><code class="language-bash">C:\Windows\system32<span class="token operator">></span> d:D:\<span class="token operator">></span> <span class="token function">cd</span> D:\Program Files\mysql-5.7\bin</code></pre><h3 id="5-初始化MySQL"><a href="#5-初始化MySQL" class="headerlink" title="5. 初始化MySQL"></a><span style="font-size: 18px;">5. 初始化MySQL</span></h3><p>　　初始化可以选择带有随机密码或无密码，建议采用无密码初始化（可以设置密码），以免随机密码丢失。</p><pre class=" language-bash"><code class="language-bash">D:\Program Files\mysql-5.7\bin<span class="token operator">></span> mysqld --initialize（随机密码）D:\Program Files\mysql-5.7\bin<span class="token operator">></span> mysqld --initialize-insecure（无密码）</code></pre><h3 id="6-安装mysqld"><a href="#6-安装mysqld" class="headerlink" title="6. 安装mysqld"></a><span style="font-size: 18px;">6. 安装mysqld</span></h3><pre class=" language-bash"><code class="language-bash">D:\Program Files\mysql-5.7\bin<span class="token operator">></span> mysqld -install</code></pre><p>　　<span style="font-size: 10px; color: #FF0000;">* </span><span style="font-size: 10px; color: #9e9e9e;"><code>mysql</code> 用于执行SQL命令，<code>mysqld</code> 用于执行数据库命令。</span></p><h3 id="7-启动MySQL服务"><a href="#7-启动MySQL服务" class="headerlink" title="7. 启动MySQL服务"></a><span style="font-size: 18px;">7. 启动MySQL服务</span></h3><pre class=" language-bash"><code class="language-bash">D:\Program Files\mysql-5.7\bin<span class="token operator">></span> net start mysql</code></pre><p><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/mysql_start_in_windows.png" alt="mysql_start_in_windows.png"></p><h3 id="8-登录MySQL"><a href="#8-登录MySQL" class="headerlink" title="8. 登录MySQL"></a><span style="font-size: 18px;">8. 登录MySQL</span></h3><pre class=" language-bash"><code class="language-bash">D:\Program Files\mysql-5.7\bin<span class="token operator">></span> mysql -u root -pEnter password:（无密码则直接回车）</code></pre><h2 id="二、添加root账号登录密码"><a href="#二、添加root账号登录密码" class="headerlink" title="二、添加root账号登录密码"></a>二、添加root账号登录密码</h2><h3 id="1-停止MySQL服务"><a href="#1-停止MySQL服务" class="headerlink" title="1. 停止MySQL服务"></a><span style="font-size: 18px;">1. 停止MySQL服务</span></h3><pre class=" language-bash"><code class="language-bash">D:\Program Files\mysql-5.7\bin<span class="token operator">></span> net stop mysql</code></pre><h3 id="2-跳过密码验证"><a href="#2-跳过密码验证" class="headerlink" title="2. 跳过密码验证"></a><span style="font-size: 18px;">2. 跳过密码验证</span></h3><pre class=" language-bash"><code class="language-bash">D:\Program Files\mysql-5.7\bin<span class="token operator">></span> mysqld --console --skip-grant-tables</code></pre><p><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/mysql_skip_grant_tables_in_windows.png" alt="mysql_skip_grant_tables_in_windows.png"><br>　　此时，当前命令行终端窗口不能再输入命令了，我们需要再打开一个命令行窗口，进入 <code>D:\Program Files\mysql-5.7\bin&gt;</code>，方式和前面一样，即输入下面两行命令：</p><pre class=" language-bash"><code class="language-bash">C:\Windows\system32<span class="token operator">></span> d:D:\<span class="token operator">></span> <span class="token function">cd</span> D:\Program Files\mysql-5.7\bin</code></pre><h3 id="3-登录MySQL"><a href="#3-登录MySQL" class="headerlink" title="3. 登录MySQL"></a><span style="font-size: 18px;">3. 登录MySQL</span></h3><pre class=" language-bash"><code class="language-bash">D:\Program Files\mysql-5.7\bin<span class="token operator">></span> mysql -u root -pEnter password:（无需密码直接回车）</code></pre><h3 id="4-切换数据库"><a href="#4-切换数据库" class="headerlink" title="4. 切换数据库"></a><span style="font-size: 18px;">4. 切换数据库</span></h3><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> use mysql<span class="token punctuation">;</span></code></pre><h3 id="5-执行修改密码的语句"><a href="#5-执行修改密码的语句" class="headerlink" title="5. 执行修改密码的语句"></a><span style="font-size: 18px;">5. 执行修改密码的语句</span></h3><p>　　当前新版本的MySQL有密码规则：必须包含大写字母、小写字母、特殊符号并且8位以上。<br>　　我们这边是强行修改字段的，会有警告，但现在是开发环境，可以不管它，就把密码设置成 <code>123456</code> 即可。</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> update mysql.user <span class="token keyword">set</span> authentication_string<span class="token operator">=</span>password<span class="token punctuation">(</span><span class="token string">'123456'</span><span class="token punctuation">)</span> where user<span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span></code></pre><h3 id="6-刷新权限并退出MySQL"><a href="#6-刷新权限并退出MySQL" class="headerlink" title="6. 刷新权限并退出MySQL"></a><span style="font-size: 18px;">6. 刷新权限并退出MySQL</span></h3><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span> flush privileges<span class="token punctuation">;</span>mysql<span class="token operator">></span> quit<span class="token punctuation">;</span></code></pre><h3 id="7-终止mysqld"><a href="#7-终止mysqld" class="headerlink" title="7. 终止mysqld"></a><span style="font-size: 18px;">7. 终止mysqld</span></h3><p>　　回到第一个命令行窗口，按 “Ctrl+C” 结束进程或者按 “Ctrl+Alt+Del” 打开任务管理器，结束“mysqld.exe”的进程。</p><h3 id="8-重新启动MySQL服务"><a href="#8-重新启动MySQL服务" class="headerlink" title="8. 重新启动MySQL服务"></a><span style="font-size: 18px;">8. 重新启动MySQL服务</span></h3><pre class=" language-bash"><code class="language-bash">D:\Program Files\mysql-5.7\bin<span class="token operator">></span> net start mysql</code></pre><h3 id="9-登录MySQL"><a href="#9-登录MySQL" class="headerlink" title="9. 登录MySQL"></a><span style="font-size: 18px;">9. 登录MySQL</span></h3><pre class=" language-bash"><code class="language-bash">D:\Program Files\mysql-5.7\bin<span class="token operator">></span> mysql -u root -pEnter password:123456</code></pre><p>　　此时必须使用刚添加的密码才能登录MySQL。</p><h2 id="三、编写批处理脚本实现MySQL启停"><a href="#三、编写批处理脚本实现MySQL启停" class="headerlink" title="三、编写批处理脚本实现MySQL启停"></a>三、编写批处理脚本实现MySQL启停</h2><p>　　在前面安装完MySQL后，我们每次开机都是通过输入命令来切换目录、启停MySQL的，长期使用显然比较麻烦，为了偷懒，下面编写一个批处理脚本。</p><h3 id="1-系统环境变量配置"><a href="#1-系统环境变量配置" class="headerlink" title="1. 系统环境变量配置"></a><span style="font-size: 18px;">1. 系统环境变量配置</span></h3><p>　　（1）新增系统变量<br>　　　　变量名：<span style="color: #FF0000;">MYSQL_HOME</span><br>　　　　变量值：MySQL解压目录，如 <span style="color: #FF0000;">D:\Program Files\mysql-5.7</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/mysql_global_config_system_variable.png" alt="mysql_global_config_system_variable.png"><br>　　（2）追加PATH<br>　　　　<span style="color: #FF0000;">%MYSQL_HOME%\bin</span><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/mysql_global_config_path.png" alt="mysql_global_config_path.png"></p><h3 id="2-编写批处理脚本"><a href="#2-编写批处理脚本" class="headerlink" title="2. 编写批处理脚本"></a><span style="font-size: 18px;">2. 编写批处理脚本</span></h3><p>　　创建一个文件，并以 <code>.bat</code> 为后缀，如 <code>mysql.bat</code>，打开编辑，输入如下内容。输入后以管理员身份运行。（前提要MySQL已经安装或配置成功）</p><pre class=" language-bash"><code class="language-bash">cls @echo off:设置窗口字体颜色color 0F :设置窗口标题TITLE MySQL管理程序 by winyuancall :checkAdmingoto menu:菜单:menuclsecho. echo.<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 请选择您要对MySQL的操作 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span>echo.echo.1: 启动MySQLecho.echo.2: 关闭MySQLecho. echo.3: 重启MySQLecho. echo.4: 退 出echo.echo.<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 请输入您要选择的项目序号 <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token keyword">set</span> /p id<span class="token operator">=</span><span class="token keyword">if</span> <span class="token string">"%id%"</span><span class="token operator">==</span><span class="token string">"1"</span> goto startup<span class="token keyword">if</span> <span class="token string">"%id%"</span><span class="token operator">==</span><span class="token string">"2"</span> goto <span class="token function">shutdown</span><span class="token keyword">if</span> <span class="token string">"%id%"</span><span class="token operator">==</span><span class="token string">"3"</span> goto <span class="token function">reboot</span><span class="token keyword">if</span> <span class="token string">"%id%"</span><span class="token operator">==</span><span class="token string">"4"</span> <span class="token keyword">exit</span>pause:启动:startupecho.call :checkMySQL 1echo.启动MySQL<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>net start <span class="token string">"MySQL"</span>echo.启动MySQL成功！pause goto menu :停止:shutdownecho.call :checkMySQL 2echo.关闭MySQL<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>net stop <span class="token string">"MySQL"</span>echo.关闭MySQL成功！pause goto menu:重启:rebootecho.call :checkMySQL 2echo.关闭MySQL<span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>net stop <span class="token string">"MySQL"</span>echo.关闭MySQL成功！goto startupgoto menu:退出:gooutpausegoto menu:检查MySQL进程是否存在:checkMySQL<span class="token keyword">set</span> /a count<span class="token operator">=</span>0<span class="token keyword">for</span> /f <span class="token string">"tokens=1 delims= "</span> %%i <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token string">'tasklist /nh ^| find /i "MySQL"'</span><span class="token punctuation">)</span> <span class="token keyword">do</span> <span class="token punctuation">(</span>set /a count+<span class="token operator">=</span>1<span class="token punctuation">)</span><span class="token keyword">if</span> %count% neq 0 <span class="token keyword">if</span> <span class="token string">"%1"</span> equ <span class="token string">"1"</span> <span class="token punctuation">(</span>  <span class="token keyword">echo</span> 警告：MySQL已启动  goto goout<span class="token punctuation">)</span><span class="token keyword">if</span> %count% equ 0 <span class="token keyword">if</span> <span class="token string">"%1"</span> equ <span class="token string">"2"</span> <span class="token punctuation">(</span>  <span class="token keyword">echo</span> 警告：MySQL未启动  goto goout<span class="token punctuation">)</span>:检查是否是以管理员身份运行:checkAdmin<span class="token keyword">echo</span> <span class="token function">test</span> am i admin? <span class="token operator">></span> %SystemRoot%\System32\wenyuanblog.txt<span class="token keyword">if</span> not exist %SystemRoot%\System32\wenyuanblog.txt <span class="token punctuation">(</span>  <span class="token keyword">echo</span> 警告：请以管理员身份运行！  pause  <span class="token keyword">exit</span><span class="token punctuation">)</span>del %SystemRoot%\System32\wenyuanblog.txt</code></pre><p>　　最后，用管理员身份运行 <code>mysql.bat</code>，如下图所示：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/mysql_batch_script_in_windows.png" alt="mysql_batch_script_in_windows.png"></p><p class="reference"><br>参考<br>django中文网<br></p>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Py实战】获取tcpdump输出</title>
      <link href="/blogs/python-realtime-tcpdump.html"/>
      <url>/blogs/python-realtime-tcpdump.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">【Python实战】实时获取tcpdump输出</div><blockquote><p>Python实时获取tcpdump输出。</p></blockquote><h2 id="一、背景"><a href="#一、背景" class="headerlink" title="一、背景"></a><span style="font-size: 27px; color:#3498db;">一、背景</span></h2><p>　　今天有个小需求，要确认客户端有没有往服务端发送udp包，但为了减轻工作量，不想每次到机器上手动执行tcpdump抓包命令。<br>　　于是就写了个脚本来释放人力。</p><h2 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a><span style="font-size: 27px; color:#3498db;">二、代码实现</span></h2><p>　　整个脚本我还加了一些其他功能：时间戳、发送端IP提取，数据包分析，数据持久化等。这里都先去掉，仅记录下简单的<span style="color: #FF0000;">实时获取tcpdump输出</span>功能。<br>　　代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># !/usr/bin/env python</span><span class="token comment" spellcheck="true"># sudo tcpdump -tt -l -nn -c 5 -i enp4s0 udp port 514 or 51414</span><span class="token keyword">import</span> subprocesscmd <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'sudo'</span><span class="token punctuation">,</span> <span class="token string">'tcpdump'</span><span class="token punctuation">,</span> <span class="token string">'-tt'</span><span class="token punctuation">,</span> <span class="token string">'-l'</span><span class="token punctuation">,</span> <span class="token string">'-nn'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'-i'</span><span class="token punctuation">,</span> <span class="token string">'enp4s0'</span><span class="token punctuation">,</span> <span class="token string">'udp'</span><span class="token punctuation">,</span> <span class="token string">'port'</span><span class="token punctuation">,</span> <span class="token string">'514'</span><span class="token punctuation">,</span> <span class="token string">'or'</span><span class="token punctuation">,</span> <span class="token string">'51414'</span><span class="token punctuation">]</span>proc <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    line <span class="token operator">=</span> proc<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>    line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> line<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'tcpdump finished...'</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span></code></pre><p>　　输出如下（实时）：</p><pre class=" language-bash"><code class="language-bash">wenyuanblog@localhost:/home/test/script<span class="token comment" spellcheck="true"># python tcpdump_udp.py </span>tcpdump: verbose output suppressed, use -v or -vv <span class="token keyword">for</span> full protocol decodelistening on enp4s0, link-type EN10MB <span class="token punctuation">(</span>Ethernet<span class="token punctuation">)</span>, capture size 262144 bytes1499774951.124178 IP 192.168.10.210.41974 <span class="token operator">></span> 192.168.10.251.514: UDP, length 1391499774953.125664 IP 192.168.10.210.54995 <span class="token operator">></span> 192.168.10.251.51414: UDP, length 1391499774956.128498 IP 192.168.10.210.56748 <span class="token operator">></span> 192.168.10.251.514: UDP, length 1391499774958.129918 IP 192.168.10.210.53883 <span class="token operator">></span> 192.168.10.251.51414: UDP, length 1391499774961.132921 IP 192.168.10.210.58803 <span class="token operator">></span> 192.168.10.251.514: UDP, length 1395 packets captured6 packets received by filter0 packets dropped by kerneltcpdump finished<span class="token punctuation">..</span>.</code></pre><p>　　以上代码相当于手动执行了 <code>sudo tcpdump -tt -l -nn -c 5 -i enp4s0 udp port 514 or 51414</code>  这条命令。<br>　　注意参数-l很重要（行显）。</p><h2 id="三、代码实现（更新）"><a href="#三、代码实现（更新）" class="headerlink" title="三、代码实现（更新）"></a><span style="font-size: 27px; color:#3498db;">三、代码实现（更新）</span></h2><p>　　上面的代码能实现tcpdump的功能，但是有一个问题：没有做<span style="color: #FF0000;">超时保护</span>。即当程序执行时间过长时kill该进程（这里使用ctrl+c的方式）。<br>　　要实现这个功能有很多种方案，例如定时器+多线程等，这里仅演示一种方案，代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># !/usr/bin/env python</span><span class="token comment" spellcheck="true"># sudo tcpdump -tt -l -nn -c 50 -i enp4s0 udp port 514 or 51414</span><span class="token keyword">import</span> subprocess<span class="token keyword">import</span> signal<span class="token keyword">import</span> time<span class="token keyword">import</span> os<span class="token keyword">import</span> re<span class="token keyword">import</span> json<span class="token keyword">class</span> <span class="token class-name">CmdServer</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cmd<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">120</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">'''        :param cmd: 执行命令（列表形式）        :param timeout: 任务超时时间（seconds，进程运行超过该时间，kill该进程）        :param taskname: 任务名称（根据该任务名称记录命令输出信息）        '''</span>        self<span class="token punctuation">.</span>cmd <span class="token operator">=</span> cmd        self<span class="token punctuation">.</span>timeout <span class="token operator">=</span> timeout        self<span class="token punctuation">.</span>base_path <span class="token operator">=</span> reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>output_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>self<span class="token punctuation">.</span>base_path<span class="token punctuation">,</span> <span class="token string">'data.json'</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>udp_flow_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>begin_time <span class="token operator">=</span> int<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 执行tcpdump任务</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>self<span class="token punctuation">.</span>output_path<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">with</span> open<span class="token punctuation">(</span>self<span class="token punctuation">.</span>output_path<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>                self<span class="token punctuation">.</span>udp_flow_list <span class="token operator">=</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>        proc <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>self<span class="token punctuation">.</span>cmd<span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>        stdout <span class="token operator">=</span> <span class="token string">''</span>        <span class="token keyword">while</span> proc<span class="token punctuation">.</span>poll<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> None<span class="token punctuation">:</span>            current_time <span class="token operator">=</span> int<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> current_time <span class="token operator">-</span> self<span class="token punctuation">.</span>begin_time <span class="token operator">>=</span> self<span class="token punctuation">.</span>timeout<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'tcpdump timeout...'</span><span class="token punctuation">)</span>                proc<span class="token punctuation">.</span>send_signal<span class="token punctuation">(</span>signal<span class="token punctuation">.</span>SIGINT<span class="token punctuation">)</span>                stdout <span class="token operator">=</span> proc<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> proc<span class="token punctuation">.</span>poll<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token operator">not</span> None <span class="token operator">and</span> <span class="token operator">not</span> stdout<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'tcpdump finished...'</span><span class="token punctuation">)</span>            stdout <span class="token operator">=</span> proc<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>        stdout_list <span class="token operator">=</span> stdout<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> stdout_list<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>_merge_data<span class="token punctuation">(</span>stdout_list<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>_save_data<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 数据合并（新增/更新）</span>    <span class="token keyword">def</span> <span class="token function">_merge_data</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stdout_list<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> line <span class="token keyword">in</span> stdout_list<span class="token punctuation">:</span>            line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> line<span class="token punctuation">:</span>                <span class="token keyword">continue</span>            timestamp <span class="token operator">=</span> int<span class="token punctuation">(</span>float<span class="token punctuation">(</span>line<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'IP'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000</span>            <span class="token comment" spellcheck="true"># 源</span>            src_ip_port_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'IP(.+?)>'</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> src_ip_port_list<span class="token punctuation">:</span>                <span class="token keyword">continue</span>            src_ip_port_str <span class="token operator">=</span> src_ip_port_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            src_ip <span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>src_ip_port_str<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 目的</span>            dst_ip_port_list <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>r<span class="token string">'>(.+?):'</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> dst_ip_port_list<span class="token punctuation">:</span>                <span class="token keyword">continue</span>            dst_ip_port_str <span class="token operator">=</span> dst_ip_port_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span>            dst_port <span class="token operator">=</span> dst_ip_port_str<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 新增/更新latest_timestamp</span>            src_item <span class="token operator">=</span> filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> src_ip <span class="token operator">==</span> x<span class="token punctuation">[</span><span class="token string">'src_ip'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>udp_flow_list<span class="token punctuation">)</span>            <span class="token keyword">if</span> src_item<span class="token punctuation">:</span>                src_item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'dst_port'</span><span class="token punctuation">]</span> <span class="token operator">=</span> dst_port                src_item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'latest_timestamp'</span><span class="token punctuation">]</span> <span class="token operator">=</span> timestamp            <span class="token keyword">else</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>udp_flow_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dict<span class="token punctuation">(</span>                    src_ip<span class="token operator">=</span>src_ip<span class="token punctuation">,</span>                    dst_port<span class="token operator">=</span>dst_port<span class="token punctuation">,</span>                    latest_timestamp<span class="token operator">=</span>timestamp                <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 保存数据</span>    <span class="token keyword">def</span> <span class="token function">_save_data</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 写入文件</span>        <span class="token keyword">with</span> open<span class="token punctuation">(</span>self<span class="token punctuation">.</span>output_path<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>            json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>self<span class="token punctuation">.</span>udp_flow_list<span class="token punctuation">,</span> f<span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    cmd <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'sudo'</span><span class="token punctuation">,</span> <span class="token string">'tcpdump'</span><span class="token punctuation">,</span> <span class="token string">'-tt'</span><span class="token punctuation">,</span> <span class="token string">'-l'</span><span class="token punctuation">,</span> <span class="token string">'-nn'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">,</span> <span class="token string">'5'</span><span class="token punctuation">,</span> <span class="token string">'-i'</span><span class="token punctuation">,</span> <span class="token string">'enp4s0'</span><span class="token punctuation">,</span> <span class="token string">'udp'</span><span class="token punctuation">,</span> <span class="token string">'port'</span><span class="token punctuation">,</span> <span class="token string">'514'</span><span class="token punctuation">,</span> <span class="token string">'or'</span><span class="token punctuation">,</span> <span class="token string">'51414'</span><span class="token punctuation">]</span>    cmd_server <span class="token operator">=</span> CmdServer<span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>    cmd_server<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><h2 id="四、总结"><a href="#四、总结" class="headerlink" title="四、总结"></a><span style="font-size: 27px; color:#3498db;">四、总结</span></h2><p>　　比较简单，仅仅是记录下。如果想基于Python的tcpdump做一些业务上的逻辑，可以参考下面的“参考链接”。</p><p class="reference"><br>参考<br><a href="https://blog.csdn.net/wskzgz/article/details/83822780" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/wskzgz/article/details/83822780</a><br><a href="https://blog.csdn.net/wangqiuyun/article/details/46966839" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/wangqiuyun/article/details/46966839</a><br><a href="http://www.cnblogs.com/idvcn/p/8716066.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.cnblogs.com/idvcn/p/8716066.html</a><br><a href="https://blog.csdn.net/kobeyan/article/details/4344192" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/kobeyan/article/details/4344192</a><br><a href="https://blog.csdn.net/xhw88398569/article/details/48022967" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/xhw88398569/article/details/48022967</a><br></p>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 抓包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Py实战】单变量异常值检测</title>
      <link href="/blogs/python-univariate-outlier-detection.html"/>
      <url>/blogs/python-univariate-outlier-detection.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">【Python实战】单变量异常值检测</div><blockquote><p>异常值检测是数据预处理阶段重要的环节，这篇文章介绍下对于单变量异常值检测的常用方法，通过Python代码实现。</p></blockquote><h2 id="一、什么是异常值"><a href="#一、什么是异常值" class="headerlink" title="一、什么是异常值"></a><span style="font-size: 27px; color:#3498db;">一、什么是异常值</span></h2><p>　　异常值是在数据集中与其他观察值有很大差距的数据点，它的存在，会对随后的计算结果产生不适当的影响，因此检测异常值并加以适当的处理是十分必要的。</p><h2 id="二、异常值的处理"><a href="#二、异常值的处理" class="headerlink" title="二、异常值的处理"></a><span style="font-size: 27px; color:#3498db;">二、异常值的处理</span></h2><p>　　异常值并不都是坏的，了解这一点非常重要。只是简单地从数据中删除异常值，而不考虑它们如何影响结果的话，可能会导致灾难。</p><blockquote><p>“异常值不一定是坏事。这些只是与其他模式不一致的观察。但事实上异常值非常有趣。例如，如果在生物实验中，某只老鼠没有死亡而其他老鼠都死了，去了解为什么将会非常有趣。这可能会带来新的科学发现。因此，检测异常值非常重要。”    —— Pierre Lafaye de Micheaux，统计师</p></blockquote><p>　　对于异常值，一般有如下几种处理：</p><ul><li>删除含有异常值的记录（是否删除根据实际情况考虑）</li><li>将异常值视为缺失值，利用缺失值的处理方法进行处理</li><li>平均值修正（前后两个观测值的平均值）</li><li>不处理（直接在具有异常值的数据集上进行挖掘）</li></ul><h2 id="三、异常值的类型"><a href="#三、异常值的类型" class="headerlink" title="三、异常值的类型"></a><span style="font-size: 27px; color:#3498db;">三、异常值的类型</span></h2><p>　　异常值有两种类型：<span style="color: #FF0000;">单变量</span>和<span style="color: #FF0000;">多变量</span>（Univariate and Multivariate）。单变量异常值是仅由一个变量中的极值组成的数据点，而多变量异常值是至少两个变量的组合异常分数。假设您有三个不同的变量 - X，Y，Z。如果您在三维空间中绘制这些变量的图形，它们应该形成一种云。位于此云之外的所有数据点都将是多变量异常值。</p><p>　　举个例子：做客户分析，发现客户的年平均收入是80万美元。但是，有两个客户的年收入是4美元和420万美元。这两个客户的年收入明显不同于其他人，那这两个观察结果将被视为异常值，并且是<span style="color: #FF0000;">单变量异常值</span>，当我们看到单变量的分布时，可以找到这些异常值。</p><p>　　再举个例子：身高和体重之间的关系。我们对“身高”和“体重”有单变量和双变量分布，如下图所示。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/height_weight_outliers.png" alt="height_weight_outliers.png"><br>　　看箱线图（box plot后面会介绍）没有任何异常值，再看散点图（scatter plot），有两个值在一个特定的身高和体重的平均值以下。可见多变量异常值是n维空间中的异常值，必须通过多维度的分布才能体现出来。</p><p>　　如果对异常值不太了解，可以阅读这篇<a href="https://www.analyticsvidhya.com/blog/2016/01/guide-data-exploration/?utm_source=outlierdetectionpyod&amp;utm_medium=blog" title="数据探索指南" rel="external nofollow noopener noreferrer" target="_blank">《数据探索指南》</a>，上述部分解释也是从中摘录的。<br>　　下面，我主要记录下<span style="color: #FF0000;">单变量异常值检测的Python实现</span>。</p><h2 id="四、常用异常检测方法"><a href="#四、常用异常检测方法" class="headerlink" title="四、常用异常检测方法"></a><span style="font-size: 27px; color:#3498db;">四、常用异常检测方法</span></h2><p>　　原则上模拟数据集需要样本量足够大，这里仅是演示算法，所以就手动写了有限的样本。<br>　　异常值的测量标准有很多，比较常见的是描述性统计法、三西格玛法（3σ法）、箱线图等：</p><h3 id="1-描述性统计"><a href="#1-描述性统计" class="headerlink" title="1. 描述性统计"></a><span style="font-size: 18px; color: #159957;">1. 描述性统计</span></h3><p>　　基于常识或经验，假定我们认为大于10的数值是不符合常理的。</p><p>　　下面用Python代码实现用描述性统计求异常值：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span>data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2.78</span><span class="token punctuation">,</span> <span class="token number">1.79</span><span class="token punctuation">,</span> <span class="token number">4.73</span><span class="token punctuation">,</span> <span class="token number">3.81</span><span class="token punctuation">,</span> <span class="token number">2.78</span><span class="token punctuation">,</span> <span class="token number">1.80</span><span class="token punctuation">,</span> <span class="token number">4.81</span><span class="token punctuation">,</span> <span class="token number">2.79</span><span class="token punctuation">,</span> <span class="token number">1.78</span><span class="token punctuation">,</span> <span class="token number">3.32</span><span class="token punctuation">,</span> <span class="token number">10.8</span><span class="token punctuation">,</span> <span class="token number">100.0</span><span class="token punctuation">]</span>threshold <span class="token operator">=</span> <span class="token number">10</span><span class="token comment" spellcheck="true"># 定义描述性统计识别异常值函数</span><span class="token keyword">def</span> <span class="token function">descriptive_statistics</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> list<span class="token punctuation">(</span>filter<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">></span> threshold<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">)</span>outliers <span class="token operator">=</span> descriptive_statistics<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'异常值共有：{0}个，分别是：{1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>len<span class="token punctuation">(</span>outliers<span class="token punctuation">)</span><span class="token punctuation">,</span> outliers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：异常值共有：2个，分别是：[10.8, 100.0]</span></code></pre><h3 id="2-三西格玛（3σ）"><a href="#2-三西格玛（3σ）" class="headerlink" title="2. 三西格玛（3σ）"></a><span style="font-size: 18px; color: #159957;">2. 三西格玛（3σ）</span></h3><p>　　当数据服从正态分布时，99%的数值应该位于距离均值3个标准差之内的距离，P(|x−μ|&gt;3σ)≤0.003，当数值超出这个距离，可以认为它是异常值。<br>　　正态分布状况下，数值分布表：</p><table><thead><tr><th style="text-align:center">数值分布</th><th style="text-align:center">在数据中的占比</th></tr></thead><tbody><tr><td style="text-align:center">(μ-σ,μ+σ)</td><td style="text-align:center">0.6827</td></tr><tr><td style="text-align:center">(μ-2σ,μ+2σ)</td><td style="text-align:center">0.9545</td></tr><tr><td style="text-align:center">(μ-3σ,μ+3σ)</td><td style="text-align:center">0.9973</td></tr></tbody></table><p>注：在正态分布中σ代表标准差，μ代表均值，x=μ为图形的对称轴</p><p>　　下面用Python代码实现用三西格玛求异常值：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npdata <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2.78</span><span class="token punctuation">,</span> <span class="token number">1.79</span><span class="token punctuation">,</span> <span class="token number">4.73</span><span class="token punctuation">,</span> <span class="token number">3.81</span><span class="token punctuation">,</span> <span class="token number">2.78</span><span class="token punctuation">,</span> <span class="token number">1.80</span><span class="token punctuation">,</span> <span class="token number">4.81</span><span class="token punctuation">,</span> <span class="token number">2.79</span><span class="token punctuation">,</span> <span class="token number">1.78</span><span class="token punctuation">,</span> <span class="token number">3.32</span><span class="token punctuation">,</span> <span class="token number">10.8</span><span class="token punctuation">,</span> <span class="token number">100.0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 定义3σ法则识别异常值函数</span><span class="token keyword">def</span> <span class="token function">three_sigma</span><span class="token punctuation">(</span>data_series<span class="token punctuation">)</span><span class="token punctuation">:</span>    rule <span class="token operator">=</span> <span class="token punctuation">(</span>data_series<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">3</span> <span class="token operator">*</span> data_series<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> data_series<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>data_series<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> data_series<span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> data_series<span class="token punctuation">)</span>    index <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>data_series<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span>rule<span class="token punctuation">]</span>    outliers <span class="token operator">=</span> data_series<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token keyword">return</span> outliers<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>data_series <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>data<span class="token punctuation">)</span>outliers <span class="token operator">=</span> three_sigma<span class="token punctuation">(</span>data_series<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'异常值共有：{0}个，分别是：{1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>len<span class="token punctuation">(</span>outliers<span class="token punctuation">)</span><span class="token punctuation">,</span> outliers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：异常值共有：1个，分别是：[100.0]</span></code></pre><h3 id="3-箱线图（box-plot）"><a href="#3-箱线图（box-plot）" class="headerlink" title="3. 箱线图（box plot）"></a><span style="font-size: 18px; color: #159957;">3. 箱线图（box plot）</span></h3><p>　　和3σ原则相比，箱线图依据实际数据绘制，真实、直观地表现出了数据分布的本来面貌，且没有对数据作任何限制性要求（<span style="color: #FF0000;">3σ原则要求数据服从正态分布或近似服从正态分布</span>）。<br>　　其判断异常值的标准以四分位数和四分位距为基础。四分位数给出了数据分布的中心、散布和形状的某种指示，具有一定的鲁棒性，即25%的数据可以变得任意远而不会很大地扰动四分位数，所以异常值通常不能对这个标准施加影响。鉴于此，箱线图识别异常值的结果比较客观，因此在识别异常值方面具有一定的优越性。<br>　　箱线图提供了识别异常值的一个标准，即：<br>　　上界 = Q3 + 1.5IQR<br>　　下界 = Q1 - 1.5IQR<br>　　<span style="color: #FF0000;">小于下界或大于上界的值即为异常值。</span><br>　　其中，<br>　　Q3称为上四分位数（75%），表示全部观察值中只有四分之一的数据取值比它大；<br>　　Q1称为下四分位数（25%），表示全部观察值中只有四分之一的数据取值比它小；<br>　　IQR称为四分位数差，这里就是 Q3-Q1；<br>　　1.5其实是个参数λ，这个参数通常取1.5（类似于正态分布中的μ±λ）</p><p>　　文字描述可能比较绕，下面用图片来解释下。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/box_plot.png" alt="box_plot.png"></p><blockquote><p>第一四分位数 (Q1)，又称“较小四分位数”，等于该样本中所有数值由小到大排列后第25%的数字。<br>第二四分位数 (Q2)，又称“<span style="color: #FF0000;">中位数</span>”，等于该样本中所有数值由小到大排列后第50%的数字。<br>第三四分位数 (Q3)，又称“较大四分位数”，等于该样本中所有数值由小到大排列后第75%的数字。<br>Q3与Q1的差距又称<span style="color: #FF0000;">四分位距</span>（InterQuartile Range,IQR）。</p></blockquote><p>　　四分位数的计算参见<a href="https://baike.baidu.com/item/四分位数" rel="external nofollow noopener noreferrer" target="_blank">四分位数</a>和<a href="https://blog.csdn.net/ningyanggege/article/details/82625947" rel="external nofollow noopener noreferrer" target="_blank">四分位数的计算</a></p><p>　　下面用Python代码实现用箱线图求异常值：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pddata <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2.78</span><span class="token punctuation">,</span> <span class="token number">1.79</span><span class="token punctuation">,</span> <span class="token number">4.73</span><span class="token punctuation">,</span> <span class="token number">3.81</span><span class="token punctuation">,</span> <span class="token number">2.78</span><span class="token punctuation">,</span> <span class="token number">1.80</span><span class="token punctuation">,</span> <span class="token number">4.81</span><span class="token punctuation">,</span> <span class="token number">2.79</span><span class="token punctuation">,</span> <span class="token number">1.78</span><span class="token punctuation">,</span> <span class="token number">3.32</span><span class="token punctuation">,</span> <span class="token number">10.8</span><span class="token punctuation">,</span> <span class="token number">100.0</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 定义箱线图识别异常值函数</span><span class="token keyword">def</span> <span class="token function">box_plot</span><span class="token punctuation">(</span>data_series<span class="token punctuation">)</span><span class="token punctuation">:</span>    q_abnormal_low <span class="token operator">=</span> data_series<span class="token punctuation">.</span>quantile<span class="token punctuation">(</span><span class="token number">0.25</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1.5</span> <span class="token operator">*</span> <span class="token punctuation">(</span>data_series<span class="token punctuation">.</span>quantile<span class="token punctuation">(</span><span class="token number">0.75</span><span class="token punctuation">)</span> <span class="token operator">-</span> data_series<span class="token punctuation">.</span>quantile<span class="token punctuation">(</span><span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    q_abnormal_up <span class="token operator">=</span> data_series<span class="token punctuation">.</span>quantile<span class="token punctuation">(</span><span class="token number">0.75</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1.5</span> <span class="token operator">*</span> <span class="token punctuation">(</span>data_series<span class="token punctuation">.</span>quantile<span class="token punctuation">(</span><span class="token number">0.75</span><span class="token punctuation">)</span> <span class="token operator">-</span> data_series<span class="token punctuation">.</span>quantile<span class="token punctuation">(</span><span class="token number">0.25</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    index <span class="token operator">=</span> <span class="token punctuation">(</span>data_series <span class="token operator">&lt;</span> q_abnormal_low<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>data_series <span class="token operator">></span> q_abnormal_up<span class="token punctuation">)</span>    outliers <span class="token operator">=</span> data_series<span class="token punctuation">.</span>loc<span class="token punctuation">[</span>index<span class="token punctuation">]</span>    <span class="token keyword">return</span> outliers<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>sorted_data <span class="token operator">=</span> sorted<span class="token punctuation">(</span>data<span class="token punctuation">)</span>data_series <span class="token operator">=</span> pd<span class="token punctuation">.</span>Series<span class="token punctuation">(</span>sorted_data<span class="token punctuation">)</span>outliers <span class="token operator">=</span> box_plot<span class="token punctuation">(</span>data_series<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'异常值共有：{0}个，分别是：{1}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>len<span class="token punctuation">(</span>outliers<span class="token punctuation">)</span><span class="token punctuation">,</span> outliers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：异常值共有：2个，分别是：[10.8, 100.0]</span></code></pre><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a><span style="font-size: 27px; color:#3498db;">五、总结</span></h2><p>　　以上是最基础的几种单变量异常值检测方法，没有最好的，只有对当前数据场景最合适的。<br>　　后期如果涉及机器学习的数据预处理，我会继续学习和研究多变量异常值的检测，相信会有更有意思的一些算法等着我去学习。</p><p class="reference" style="text-align:left"><br>参考<br>异常检测的N种方法，阿里工程师都盘出来了：<a href="https://mp.weixin.qq.com/s/w7SbAHxZsmHqFtTG8ZAXNg" rel="external nofollow noopener noreferrer" target="_blank">https://mp.weixin.qq.com/s/w7SbAHxZsmHqFtTG8ZAXNg</a><br>数据探索指南：<a href="https://www.analyticsvidhya.com/blog/2016/01/guide-data-exploration/?utm_source=outlierdetectionpyod&amp;utm_medium=blog" rel="external nofollow noopener noreferrer" target="_blank">https://www.analyticsvidhya.com/blog/2016/01/guide-data-exploration/?utm_source=outlierdetectionpyod&amp;utm_medium=blog</a><br>Tukey method：<a href="https://en.wikipedia.org/wiki/Tukey%27s_range_test" rel="external nofollow noopener noreferrer" target="_blank">https://en.wikipedia.org/wiki/Tukey%27s_range_test</a><br>图基（Tukey）检验：一种值得倍加推崇的检验方法：<a href="http://blog.sina.com.cn/s/blog_60be90250100eojy.html" rel="external nofollow noopener noreferrer" target="_blank">http://blog.sina.com.cn/s/blog_60be90250100eojy.html</a><br>如何从大量数据中找出异常值：<a href="https://blog.csdn.net/wangyangzhizhou/article/details/83854951" rel="external nofollow noopener noreferrer" target="_blank">https://blog.csdn.net/wangyangzhizhou/article/details/83854951</a><br>概率论与数理统计 第四版 浙江大学出版社：<a href="https://book.douban.com/subject/3165271/" rel="external nofollow noopener noreferrer" target="_blank">https://book.douban.com/subject/3165271/</a><br></p>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 数据处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Py进阶】经典排序算法</title>
      <link href="/blogs/python-sorting-algorithm.html"/>
      <url>/blogs/python-sorting-algorithm.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">【Python进阶】经典排序算法</div><blockquote><p>Python实现七种经典排序算法。</p></blockquote><h2 id="一、冒泡排序"><a href="#一、冒泡排序" class="headerlink" title="一、冒泡排序"></a><span style="font-size: 27px; color:#3498db;">一、冒泡排序</span></h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a><span style="font-size: 18px; color: #159957;">介绍</span></h3><ul><li>冒泡排序是排序算法中较为简单的一种，英文称为 <span style="color: #FF0000;">Bubble Sort</span>。它遍历所有的数据，每次对相邻元素进行两两比较，如果顺序和预先规定的顺序不一致，则进行位置交换；这样一次遍历会将最大或最小的数据上浮到顶端，之后再重复同样的操作，直到所有的数据有序。</li><li>如果有n个数据，那么需要的比较次数，所以当数据量很大时，冒泡算法的效率并不高。</li><li>当输入的数据是反序时，花的时间最长，当输入的数据是正序时，时间最短。</li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a><span style="font-size: 18px; color: #159957;">步骤</span></h3><ol><li>从前往后依次比较相邻的元素。如果前一个元素比后一个二元素大，交换二者位置。（数列遍历一遍后，最大数被移动到末尾)。</li><li>重复步骤1（已确定位置的数据不需要再参与排序）。</li><li>完成排序。</li></ol><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a><span style="font-size: 18px; color: #159957;">实现</span></h3><p>动画演示<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/bubble_sort.gif" alt="bubble_sort.gif"><br>python代码实现</p><pre class=" language-python"><code class="language-python">    <span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> alist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span>alist<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    alist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>alist<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>alist<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>alist<span class="token punctuation">[</span>j<span class="token punctuation">]</span></code></pre><p>优化：某一趟遍历如果没有数据交换，则说明已经排好序了，因此不用再进行迭代了。用一个标记记录这个状态即可。设置标志位flag，如果发生了交换flag设置为true；如果没有交换就设置为false。 这样当一轮比较结束后如果flag仍为false，即：这一轮没有发生交换，说明数据的顺序已经排好，没有必要继续进行下去,排序结束。</p><h2 id="二、选择排序"><a href="#二、选择排序" class="headerlink" title="二、选择排序"></a><span style="font-size: 27px; color:#3498db;">二、选择排序</span></h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a><span style="font-size: 18px; color: #159957;">介绍</span></h3><ul><li>选择排序简单直观，英文称为 <span style="color: #FF0000;">Selection Sort</span>，先在数据中找出最大或最小的元素，放到序列的起始；然后再从余下的数据中继续寻找最大或最小的元素，依次放到排序序列中，直到所有数据样本排序完成。很显然，选择排序也是一个费时的排序算法，无论什么数据，都需要 O(n²) 的时间复杂度，不适宜大量数据的排序。</li><li>选择排序的主要优点与数据移动有关。如果某个元素位于正确的最终位置上，则它不会被移动。选择排序每次交换一对元素，它们当中至少有一个将被移到其最终位置上，因此对n个元素的表进行排序总共进行至多n-1次交换。在所有的完全依靠交换去移动元素的排序方法中，选择排序属于非常好的一种。</li></ul><h3 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a><span style="font-size: 18px; color: #159957;">步骤</span></h3><ol><li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置 。</li><li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li><li>重复步骤2，直到所有元素均排序完毕。</li></ol><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a><span style="font-size: 18px; color: #159957;">实现</span></h3><p>动画演示<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/selection_sort.gif" alt="selection_sort.gif"><br>python代码实现</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">select_sort</span><span class="token punctuation">(</span>alist<span class="token punctuation">)</span>：    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        min_index<span class="token operator">=</span>i        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> alist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>alist<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">:</span>               min_index<span class="token operator">=</span>j        <span class="token keyword">if</span> min_index<span class="token operator">!=</span>i<span class="token punctuation">:</span>             alist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>alist<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span> <span class="token operator">=</span> alist<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">,</span>alsit<span class="token punctuation">[</span>i<span class="token punctuation">]</span></code></pre><h2 id="三、插入排序"><a href="#三、插入排序" class="headerlink" title="三、插入排序"></a><span style="font-size: 27px; color:#3498db;">三、插入排序</span></h2><h3 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a><span style="font-size: 18px; color: #159957;">介绍</span></h3><ul><li>插入排序英文称为 <span style="color: #FF0000;">Insertion Sort</span>，它通过构建有序序列，对于未排序的数据序列，在已排序序列中从后向前扫描，找到相应的位置并插入，类似打扑克牌时的码牌。插入排序有一种优化的算法，可以进行拆半插入。</li><li>基本思路是先将待排序序列的第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列；然后从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置，直到所有数据都完成排序；如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面。</li></ul><h3 id="步骤-2"><a href="#步骤-2" class="headerlink" title="步骤"></a><span style="font-size: 18px; color: #159957;">步骤</span></h3><ol><li>将第一待排序序列第一个元素看做一个有序序列，把第二个元素到最后一个元素当成是未排序序列。</li><li>从头到尾依次扫描未排序序列，将扫描到的每个元素插入有序序列的适当位置。（如果待插入的元素与有序序列中的某个元素相等，则将待插入元素插入到相等元素的后面）。</li></ol><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a><span style="font-size: 18px; color: #159957;">实现</span></h3><p>动画演示<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/insertion_sort.gif" alt="insertion_sort.gif"><br>python代码实现</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">insert_sort</span><span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>len<span class="token punctuation">(</span>alsit<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> alist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>alist<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                alist<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>alist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>alist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>alist<span class="token punctuation">[</span>j<span class="token number">-1</span><span class="token punctuation">]</span></code></pre><h2 id="四、快速排序"><a href="#四、快速排序" class="headerlink" title="四、快速排序"></a><span style="font-size: 27px; color:#3498db;">四、快速排序</span></h2><h3 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a><span style="font-size: 18px; color: #159957;">介绍</span></h3><ul><li>快速排序，英文称为 <span style="color: #FF0000;">Quicksort</span>，又称划分交换排序 <span style="color: #FF0000;">partition-exchange sort</span>，简称快排。</li><li>快速排序使用分治策略来把一个序列分为两个子序列。首先从数列中挑出一个元素，并将这个元素称为「基准」pivot。重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面，相同的数可以到任何一边。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区partition操作。之后，在子序列中继续重复这个方法，直到最后整个数据序列排序完成。</li><li>在平均状况下，排序n个项目要 O(nlogn) 次比较。在最坏状况下则需要 O(n²) 次比较，但这种状况并不常见。事实上，快速排序通常明显比其他算法更快，因为它的内部循环可以在大部分的架构上很有效率地达成。</li></ul><h3 id="步骤-3"><a href="#步骤-3" class="headerlink" title="步骤"></a><span style="font-size: 18px; color: #159957;">步骤</span></h3><ol><li>从数列中挑出一个元素，称为”基准”(pivot)。</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ol><p>递归的最底部情形，是数列的大小是零或一，也就是永远都已经被排序好了。虽然一直递归下去，但是这个算法总会结束，因为在每次的迭代（iteration）中，它至少会把一个元素摆到它最后的位置去。</p><h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a><span style="font-size: 18px; color: #159957;">实现</span></h3><p>动画演示<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/quick_sort.gif" alt="quick_sort.gif"><br>python代码实现</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>alist<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> start<span class="token operator">>=</span>end<span class="token punctuation">:</span>        <span class="token keyword">return</span>    pivot<span class="token operator">=</span> alist<span class="token punctuation">[</span>start<span class="token punctuation">]</span>    low <span class="token operator">=</span> start    high <span class="token operator">=</span> end    <span class="token keyword">while</span> low <span class="token operator">&lt;</span> high<span class="token punctuation">:</span>        <span class="token keyword">while</span> low <span class="token operator">&lt;</span> high <span class="token operator">and</span> pivot <span class="token operator">&lt;</span> alist<span class="token punctuation">[</span>high<span class="token punctuation">]</span><span class="token punctuation">:</span>            high<span class="token operator">-=</span><span class="token number">1</span>       alist<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> alist<span class="token punctuation">[</span>high<span class="token punctuation">]</span>       <span class="token keyword">while</span> low <span class="token operator">&lt;</span> high <span class="token operator">and</span> alist<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">&lt;</span> pivot<span class="token punctuation">:</span>           low<span class="token operator">+=</span><span class="token number">1</span>       alist<span class="token punctuation">[</span>high<span class="token punctuation">]</span> <span class="token operator">=</span> alist<span class="token punctuation">[</span>low<span class="token punctuation">]</span>   alsit<span class="token punctuation">[</span>low<span class="token punctuation">]</span> <span class="token operator">=</span> pivot   quick_sort<span class="token punctuation">(</span>alist<span class="token punctuation">,</span>start<span class="token punctuation">,</span>low<span class="token number">-1</span><span class="token punctuation">)</span>   quick_sort<span class="token punctuation">(</span>alist<span class="token punctuation">,</span>low<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>end<span class="token punctuation">)</span></code></pre><h2 id="五、希尔排序"><a href="#五、希尔排序" class="headerlink" title="五、希尔排序"></a><span style="font-size: 27px; color:#3498db;">五、希尔排序</span></h2><h3 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a><span style="font-size: 18px; color: #159957;">介绍</span></h3><ul><li>希尔排序也称递减增量排序，是插入排序的一种改进版本，英文称为 <span style="color: #FF0000;">Shell Sort</span>，效率虽高，但它是一种不稳定的排序算法。</li><li>插入排序在对几乎已经排好序的数据操作时，效果是非常好的；但是插入排序每次只能移动一位数据，因此插入排序效率比较低。</li><li>希尔排序在插入排序的基础上进行了改进，它的基本思路是先将整个数据序列分割成若干子序列分别进行直接插入排序，待整个序列中的记录基本有序时，再对全部数据进行依次直接插入排序。</li></ul><h3 id="步骤-4"><a href="#步骤-4" class="headerlink" title="步骤"></a><span style="font-size: 18px; color: #159957;">步骤</span></h3><ol><li>将元素分为n列，并对每列进行插入排序。</li><li>将n列元素按行进行合并。</li><li>重复步骤1-2，其中元素的列数为上次的一半。</li></ol><h3 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a><span style="font-size: 18px; color: #159957;">实现</span></h3><p>动画演示<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/shell_sort.gif" alt="shell_sort.gif"><br>python代码实现</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">shell_sort</span><span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token punctuation">:</span>    gap<span class="token operator">=</span>len<span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>    <span class="token keyword">while</span> gap<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>gap<span class="token punctuation">,</span>len<span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            j<span class="token operator">=</span>i            <span class="token keyword">while</span> <span class="token punctuation">(</span>j<span class="token operator">-</span>gap<span class="token punctuation">)</span><span class="token operator">>=</span><span class="token number">0</span> <span class="token operator">and</span> alist<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span><span class="token operator">></span>alist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                alist<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span><span class="token punctuation">,</span>alsit<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>alist<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>alist<span class="token punctuation">[</span>j<span class="token operator">-</span>gap<span class="token punctuation">]</span>                j<span class="token operator">-=</span>gap         gap<span class="token operator">//=</span><span class="token number">2</span> </code></pre><h2 id="六、归并排序"><a href="#六、归并排序" class="headerlink" title="六、归并排序"></a><span style="font-size: 27px; color:#3498db;">六、归并排序</span></h2><h3 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a><span style="font-size: 18px; color: #159957;">介绍</span></h3><ul><li>归并排序英文称为 <span style="color: #FF0000;">Merge Sort</span>，它是采用分治法的一个非常典型的应用。归并排序的思想就是先递归分解数组，再合并数组。</li><li>将数组分解最小之后，然后合并两个有序数组，基本思路是比较两个数组的最前面的数，谁小就先取谁，取了后相应的指针就往后移一位。然后再比较，直至一个数组为空，最后把另一个数组的剩余部分复制过来即可。</li><li>归并排序严格遵循从左到右或从右到左的顺序合并子数据序列, 它不会改变相同数据之间的相对顺序, 因此归并排序是一种稳定的排序算法。</li></ul><h3 id="步骤-5"><a href="#步骤-5" class="headerlink" title="步骤"></a><span style="font-size: 18px; color: #159957;">步骤</span></h3><ol><li>归分解，将数组分解成left和right。如果这两个数组内部数据是有序的（转向步骤2-4）；如果无序，则对数组进行二分，直至分解出的小组只有一个元素，此时认为该小组内部有序。</li><li>合并两个有序数组，比较两个数组的最前面的数，谁小就先取谁，该数组的指针往后移一位。</li><li>重复步骤2，直至一个数组为空。</li><li>最后把另一个数组的剩余部分复制过来即可。</li></ol><h3 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a><span style="font-size: 18px; color: #159957;">实现</span></h3><p>动画演示<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/merge_sort.gif" alt="merge_sort.gif"><br>python代码实现</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> alist    mid <span class="token operator">=</span> len<span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span>    left<span class="token operator">=</span>merge_sort<span class="token punctuation">(</span>alsit<span class="token punctuation">[</span><span class="token punctuation">:</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>    right<span class="token operator">=</span>merge_sort<span class="token punctuation">(</span>alist<span class="token punctuation">[</span>mid<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> sort<span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sort</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>    l<span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>    result<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> l<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">and</span> r<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> left<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">&lt;=</span>right<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>left<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span>            l<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>right<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span>            r<span class="token operator">+=</span><span class="token number">1</span>    result<span class="token operator">+=</span>left<span class="token punctuation">[</span>l<span class="token punctuation">:</span><span class="token punctuation">]</span>    result<span class="token operator">+=</span>right<span class="token punctuation">[</span>r<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">return</span> result</code></pre><h2 id="七、堆排序"><a href="#七、堆排序" class="headerlink" title="七、堆排序"></a><span style="font-size: 27px; color:#3498db;">七、堆排序</span></h2><h3 id="介绍-6"><a href="#介绍-6" class="headerlink" title="介绍"></a><span style="font-size: 18px; color: #159957;">介绍</span></h3><ul><li>堆排序，英文称 <span style="color: #FF0000;">Heapsort</span>，是指利用堆这种数据结构所设计的一种排序算法。堆排序在 top K问题中使用比较频繁。堆排序是采用二叉堆的数据结构来实现的，虽然实质上还是一维数组。二叉堆是一个近似完全二叉树。</li><li>二叉堆具有以下性质：<ul><li>父节点的键值总是大于或等于（小于或等于）任何一个子节点的键值。</li><li>每个节点的左右子树都是一个二叉堆（都是最大堆或最小堆）。</li></ul></li></ul><h3 id="步骤-6"><a href="#步骤-6" class="headerlink" title="步骤"></a><span style="font-size: 18px; color: #159957;">步骤</span></h3><ol><li>根据初始数组取构建一个完全二叉树，保证所有的父节点比子节点的数值大。</li><li>每次交换第一个和最后一个元素，输出最后一个元素（最大值），然后把剩下元素重新调整为最大堆。</li></ol><h3 id="实现-6"><a href="#实现-6" class="headerlink" title="实现"></a><span style="font-size: 18px; color: #159957;">实现</span></h3><p>动画演示<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/heap_sort.gif" alt="heap_sort.gif"><br>python代码实现</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">heap_sort</span><span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>alist<span class="token punctuation">)</span>    first <span class="token operator">=</span> int<span class="token punctuation">(</span>n<span class="token operator">/</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> start <span class="token keyword">in</span> range<span class="token punctuation">(</span>first<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        max_heapify<span class="token punctuation">(</span>alist<span class="token punctuation">,</span>start<span class="token punctuation">,</span>n<span class="token number">-1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> end <span class="token keyword">in</span> range<span class="token punctuation">(</span>n<span class="token number">-1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        alist<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">,</span>alist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>alist<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>alist<span class="token punctuation">[</span>end<span class="token punctuation">]</span>        max_heapify<span class="token punctuation">(</span>alist<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>end<span class="token number">-1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> alsit<span class="token keyword">def</span> <span class="token function">max_heapify</span><span class="token punctuation">(</span>alist<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">:</span>    root <span class="token operator">=</span> start    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        child <span class="token operator">=</span> root<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span>        <span class="token keyword">if</span> child<span class="token operator">></span>end <span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">if</span> child<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;=</span>end <span class="token operator">and</span> alist<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token operator">&lt;</span>alist<span class="token punctuation">[</span>child<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            child<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">if</span> alist<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token operator">&lt;</span>alist<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">:</span>            alist<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">,</span>alist<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token operator">=</span>alist<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">,</span>alist<span class="token punctuation">[</span>root<span class="token punctuation">]</span>            root<span class="token operator">=</span>child        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span></code></pre><h2 id="总结：常见排序算法效率比较"><a href="#总结：常见排序算法效率比较" class="headerlink" title="总结：常见排序算法效率比较"></a><span style="font-size: 27px; color:#3498db;">总结：常见排序算法效率比较</span></h2><p><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/sorting_algorithms_compare.png" alt="sorting_algorithms_compare.png"></p><p class="reference"><br>参考<br><a href="https://github.com/hustcc/JS-Sorting-Algorithm" rel="external nofollow noopener noreferrer" target="_blank">https://github.com/hustcc/JS-Sorting-Algorithm</a><br></p>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Py进阶】Pythonic风格整理</title>
      <link href="/blogs/python-code-and-pythonic-code.html"/>
      <url>/blogs/python-code-and-pythonic-code.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">【Python进阶】Pythonic风格整理</div><blockquote><p>所谓Pythonic，就是代码风格符合Python的特点，合理使用“语法糖”，使代码简洁优美，更具可读性，便于维护和修改。</p></blockquote><h2 id="一、Python之禅"><a href="#一、Python之禅" class="headerlink" title="一、Python之禅"></a><span style="font-size: 27px; color:#3498db;">一、Python之禅</span></h2><p>　　Python 里有个小彩蛋：<br>　　在 Python Shell 里输入 <code>import this</code><br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/the_zen_of_python.png" alt="the_zen_of_python.png"><br>　　这段话被称作“<strong>Python 之禅</strong>”（<strong>The Zen of Python</strong>），它列举了一些 Python 所推崇的理念，比如：</p><blockquote><p>优美胜于丑陋<br>  明确胜于隐晦<br>  简单胜于复杂<br>  …<br>  可读性很重要<br>  不要忽略错误<br>  面对不确定时，拒绝猜测<br>  现在做好过不做，但盲目动手不如不做<br>  如果你的实现很难说清楚，那是个坏想法；反之亦然<br>  …　　</p></blockquote><p>　　我们看一些有经验的工程师写的代码，很容易看出来是出自一个“老手”，那是因为他们的代码比较<strong>Pythonic</strong>，遵循了一个比较好的代码风格。<br>　　“Python 之禅”并不仅限于 Python，很多理念是编程普适的。<br>　　下面我列举了一些比较Pythonic的语法实现，主要是从一些大佬的项目中学习并整理的。<br>　　<strong>普通写法</strong>：能实现功能的写法<br>　　<strong>代码优化</strong>：使用Python“语法糖”或其他更具Python风格的写法，使代码更优雅</p><h2 id="二、代码对比"><a href="#二、代码对比" class="headerlink" title="二、代码对比"></a><span style="font-size: 27px; color:#3498db;">二、代码对比</span></h2><h3 id="1-实现对列表元素的遍历访问"><a href="#1-实现对列表元素的遍历访问" class="headerlink" title="1. 实现对列表元素的遍历访问"></a><span style="font-size: 18px; color: #159957;">1. 实现对列表元素的遍历访问</span></h3><p>普通写法</p><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'www.'</span><span class="token punctuation">,</span><span class="token string">'wenyuanblog'</span><span class="token punctuation">,</span><span class="token string">'.com'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>lst<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>lst<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     www<span class="token punctuation">.</span>wenyuanblog<span class="token punctuation">.</span>com</code></pre><p>代码优化</p><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'www.'</span><span class="token punctuation">,</span><span class="token string">'wenyuanblog'</span><span class="token punctuation">,</span><span class="token string">'.com'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> lst<span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     www<span class="token punctuation">.</span>wenyuanblog<span class="token punctuation">.</span>com</code></pre><h3 id="2-交换两个变量的值"><a href="#2-交换两个变量的值" class="headerlink" title="2. 交换两个变量的值"></a><span style="font-size: 18px; color: #159957;">2. 交换两个变量的值</span></h3><p>普通写法</p><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token string">'hello'</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> <span class="token string">'world'</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> temp <span class="token operator">=</span> aIn <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> bIn <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> tempIn <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">)</span></code></pre><p>代码优化</p><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a <span class="token operator">=</span> <span class="token string">'hello'</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> b <span class="token operator">=</span> <span class="token string">'world'</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> aIn <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'world'</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">)</span></code></pre><h3 id="3-拼接字符串"><a href="#3-拼接字符串" class="headerlink" title="3. 拼接字符串"></a><span style="font-size: 18px; color: #159957;">3. 拼接字符串</span></h3><p>普通写法</p><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'w'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> homepage <span class="token operator">=</span> <span class="token string">''</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">for</span> letter <span class="token keyword">in</span> letters<span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     homepage <span class="token operator">+=</span> letter   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>homepage<span class="token punctuation">)</span>wenyuanblog<span class="token punctuation">.</span>com</code></pre><p>代码优化</p><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> letters <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'w'</span><span class="token punctuation">,</span> <span class="token string">'e'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'u'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'g'</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'o'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>letters<span class="token punctuation">)</span><span class="token punctuation">)</span>wenyuanblog<span class="token punctuation">.</span>com</code></pre><h3 id="4-取出列表中大于-0-的元素，生成新列表"><a href="#4-取出列表中大于-0-的元素，生成新列表" class="headerlink" title="4. 取出列表中大于 0 的元素，生成新列表"></a><span style="font-size: 18px; color: #159957;">4. 取出列表中大于 0 的元素，生成新列表</span></h3><p>普通写法</p><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> new_lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> lst<span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">if</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         new_lst<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>         In <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>new_lst<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span></code></pre><p>代码优化：列表解析式</p><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> new_lst <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> lst <span class="token keyword">if</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">print</span><span class="token punctuation">(</span>new_lst<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span></code></pre><p>代码优化：生成器（用于数据量很大，但对新列表仅仅是遍历操作，并不需要一个列表对象的场景）</p><pre class=" language-python"><code class="language-python">In <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span> lst <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>In <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">:</span> new_lst <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> lst <span class="token keyword">if</span> i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span>In <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> new_lst<span class="token punctuation">:</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>   <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">:</span>     <span class="token number">1</span><span class="token number">2</span><span class="token number">3</span><span class="token number">6</span></code></pre><h3 id="5-判断一个值是否为True、空列表、None"><a href="#5-判断一个值是否为True、空列表、None" class="headerlink" title="5. 判断一个值是否为True、空列表、None"></a><span style="font-size: 18px; color: #159957;">5. 判断一个值是否为True、空列表、None</span></h3><p>普通写法</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> len<span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> z <span class="token operator">==</span> None<span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><p>代码优化</p><pre class=" language-python"><code class="language-python"><span class="token keyword">if</span> x<span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> <span class="token operator">not</span> y<span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token keyword">if</span> z <span class="token keyword">is</span> None<span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><h3 id="6-根据键名获取字典中对应的值"><a href="#6-根据键名获取字典中对应的值" class="headerlink" title="6. 根据键名获取字典中对应的值"></a><span style="font-size: 18px; color: #159957;">6. 根据键名获取字典中对应的值</span></h3><p>普通写法<br>这样的问题在于，如果 key 不存在，代码就报错跳出。</p><pre class=" language-python"><code class="language-python">value <span class="token operator">=</span> dct<span class="token punctuation">[</span>key<span class="token punctuation">]</span></code></pre><p>代码优化<br>改用 get 方法，不存在时会得到 None，或者指定的默认值（这里是 0）。</p><pre class=" language-python"><code class="language-python">value <span class="token operator">=</span> dct<span class="token punctuation">.</span>get<span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span></code></pre><h3 id="7-持续更新ing"><a href="#7-持续更新ing" class="headerlink" title="7. 持续更新ing"></a><span style="font-size: 18px; color: #159957;">7. 持续更新ing</span></h3><p>普通写法</p><pre class=" language-python"><code class="language-python"></code></pre><p>代码优化</p><pre class=" language-python"><code class="language-python"></code></pre><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a><span style="font-size: 27px; color:#3498db;">三、总结</span></h2><p>　　篇幅所限，以上仅仅是一些比较具有代表性的例子。但凡事要有度，过分追求 Pythonic 的写法也可能导致代码的可读性下降。比如有人喜欢把很多功能写在一个语句中，这反倒不 Pythonic 了。所以，我们需要有一些设计的原则，但又不必拘泥于具体的形式，否则就钻入牛角尖了。<br>　　平时还是要多看官方库、优秀项目，学习别人的代码。但首先还是要先实现功能，尤其时间紧张的时候，我都会先把功能做出来，然后再去学习、比对、思考，最终优化代码。相信写到足够的代码量后，我们自然而然能“悟道”了。<br>　　另外，对于代码本身，Python 有一套书写规范，叫做 PEP8。里面约定了很多细节，比如哪里该空格、注释怎么写、什么地方该换行、如何命名等等。网上搜一下就能找到，还有中文版，务必找时间看一看。</p>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Py基础】Matplotlib模块</title>
      <link href="/blogs/python-matplotlib.html"/>
      <url>/blogs/python-matplotlib.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">【Python基础】Matplotlib模块</div><blockquote><p>Python中的绘图库-Matplotlib。</p></blockquote><h2 id="一、Matplotlib简介与安装"><a href="#一、Matplotlib简介与安装" class="headerlink" title="一、Matplotlib简介与安装"></a><span style="font-size: 27px; color:#3498db;">一、Matplotlib简介与安装</span></h2><p>　　Matplotlib也就是Matrix Plot Library，顾名思义，是Python的绘图库。它可与NumPy一起使用，提供了一种有效的MATLAB开源替代方案。它也可以和图形工具包一起使用，如PyQt和wxPython。<br>　　安装方式：执行命令 <code>pip install matplotlib</code><br>　　一般常用的是它的子包<span style="color: #FF0000;">PyPlot</span>，提供类似MATLAB的绘图框架。</p><h2 id="二、使用方法"><a href="#二、使用方法" class="headerlink" title="二、使用方法"></a><span style="font-size: 27px; color:#3498db;">二、使用方法</span></h2><ol><li>绘制一条直线 y = 3 * x + 4，其中 x 在(-2, 2)，取100个点平均分布</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment" spellcheck="true"># 创建数据</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>y <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">*</span> x <span class="token operator">+</span> <span class="token number">4</span><span class="token comment" spellcheck="true"># 创建图像</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 显示图像</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol start="2"><li>在一张图里绘制多个子图</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>ticker <span class="token keyword">import</span> NullFormatter<span class="token triple-quoted-string string">"""多个子图"""</span><span class="token comment" spellcheck="true"># 为了能够复现</span>np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">,</span> scale<span class="token operator">=</span><span class="token number">0.4</span><span class="token punctuation">,</span> size<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">)</span>y <span class="token operator">=</span> y<span class="token punctuation">[</span><span class="token punctuation">(</span>y <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token punctuation">(</span>y <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>y<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span>len<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># linear</span><span class="token comment" spellcheck="true"># 使用.subplot()方法创建子图，221表示2行2列第1个位置</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">221</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>yscale<span class="token punctuation">(</span><span class="token string">'linear'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'linear'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># log</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>yscale<span class="token punctuation">(</span><span class="token string">'log'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'log'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># symmetric log</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">223</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">-</span> y<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>yscale<span class="token punctuation">(</span><span class="token string">'symlog'</span><span class="token punctuation">,</span> linthreshy<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'symlog'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># logit</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>yscale<span class="token punctuation">(</span><span class="token string">'logit'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'logit'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>grid<span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>yaxis<span class="token punctuation">.</span>set_minor_formatter<span class="token punctuation">(</span>NullFormatter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplots_adjust<span class="token punctuation">(</span>top<span class="token operator">=</span><span class="token number">0.92</span><span class="token punctuation">,</span> bottom<span class="token operator">=</span><span class="token number">0.08</span><span class="token punctuation">,</span> left<span class="token operator">=</span><span class="token number">0.10</span><span class="token punctuation">,</span> right<span class="token operator">=</span><span class="token number">0.95</span><span class="token punctuation">,</span> hspace<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">,</span>                    wspace<span class="token operator">=</span><span class="token number">0.35</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol start="3"><li>绘制一个碗状的3D图形，着色使用彩虹色</li></ol><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> mpl_toolkits<span class="token punctuation">.</span>mplot3d <span class="token keyword">import</span> Axes3D<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token triple-quoted-string string">"""碗状图形"""</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax1 <span class="token operator">=</span> Axes3D<span class="token punctuation">(</span>fig<span class="token punctuation">)</span>alpha <span class="token operator">=</span> <span class="token number">0.8</span>r <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token operator">-</span>alpha<span class="token punctuation">,</span> alpha<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>X<span class="token punctuation">,</span> Y <span class="token operator">=</span> np<span class="token punctuation">.</span>meshgrid<span class="token punctuation">(</span>r<span class="token punctuation">,</span> r<span class="token punctuation">)</span>l <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">.</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>exp<span class="token punctuation">(</span><span class="token operator">-</span><span class="token punctuation">(</span>X <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> Y <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ax1<span class="token punctuation">.</span>plot_wireframe<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> l<span class="token punctuation">)</span>ax1<span class="token punctuation">.</span>plot_surface<span class="token punctuation">(</span>X<span class="token punctuation">,</span> Y<span class="token punctuation">,</span> l<span class="token punctuation">,</span> cmap<span class="token operator">=</span>plt<span class="token punctuation">.</span>get_cmap<span class="token punctuation">(</span><span class="token string">"rainbow"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 彩虹配色</span>ax1<span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">"Bowl shape"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><ol start="4"><li>更多用法<br>参见官网文档</li></ol>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Py基础】SMTP发送邮件</title>
      <link href="/blogs/python-send-email.html"/>
      <url>/blogs/python-send-email.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">【Python基础】SMTP发送邮件</div><blockquote><p>Python使用SMTP发送邮件。</p></blockquote><h2 id="一、准备"><a href="#一、准备" class="headerlink" title="一、准备"></a><span style="font-size: 27px; color:#3498db;">一、准备</span></h2><h3 id="1-开启邮箱的SMTP-服务"><a href="#1-开启邮箱的SMTP-服务" class="headerlink" title="1. 开启邮箱的SMTP 服务"></a><span style="font-size: 18px; color: #159957;">1. 开启邮箱的SMTP 服务</span></h3><p>　　这里使用第三方 SMTP 服务发送邮件，可以使用 <span style="color: #FF0000;">QQ邮箱，163，Gmail</span> 等的 SMTP 服务，但需要做以下配置，以QQ邮箱为例。<br>　　登录QQ邮箱，依次点击最上方的 <span style="color: #FF0000;">设置</span>，然后点击 <span style="color: #FF0000;">账户</span>。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/qq_smtp_setting_1.png" alt="qq_smtp_setting_1.png"><br>　　往下翻页，找到 <strong>POP3/IMAP/SMTP/Exchange/CardDAV/CalDAV</strong> 这一版块，开启 <span style="color: #FF0000;">POP3/SMTP服务</span>。（不同版本的QQ可能会不一样，总之就是找到QQ邮箱的“POP3/SMTP服务”开启按钮。）<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/qq_smtp_setting_2.png" alt="qq_smtp_setting_2.png"><br>　　成功开启QQ邮箱的SMTP服务后，我们会得到一串授权码，在后面的代码里，这串授权码就是我们邮箱的登录密码。开启SMTP服务可能需要进行手机验证，根据提示来就好。</p><h3 id="2-常用的邮件服务器配置"><a href="#2-常用的邮件服务器配置" class="headerlink" title="2. 常用的邮件服务器配置"></a><span style="font-size: 18px; color: #159957;">2. 常用的邮件服务器配置</span></h3><p>　　下面整理了常用的邮件服务器名称、地址及SSL/非SSL协议端口号。<br>　　<strong>网易163免费邮箱相关服务器信息：</strong></p><table><thead><tr><th style="text-align:center">服务器名称</th><th style="text-align:center">服务器地址</th><th style="text-align:center">SSL协议端口号</th><th style="text-align:center">非SSL协议端口号</th></tr></thead><tbody><tr><td style="text-align:center">IMAP</td><td style="text-align:center">imap.163.com</td><td style="text-align:center">993</td><td style="text-align:center">143</td></tr><tr><td style="text-align:center">SMTP</td><td style="text-align:center">smtp.163.com</td><td style="text-align:center">454/994</td><td style="text-align:center">25</td></tr><tr><td style="text-align:center">POP3</td><td style="text-align:center">pop.163.com</td><td style="text-align:center">995</td><td style="text-align:center">110</td></tr></tbody></table><p>　　<strong>网易163企业邮箱相关服务器信息：</strong>（免费企业邮箱的smtp服务器名及端口号为：smtp.ym.163.com / 25）</p><table><thead><tr><th style="text-align:center">服务器名称</th><th style="text-align:center">服务器地址</th><th style="text-align:center">SSL协议端口号</th><th style="text-align:center">非SSL协议端口号</th></tr></thead><tbody><tr><td style="text-align:center">IMAP</td><td style="text-align:center">imap.qiye.163.com</td><td style="text-align:center">993</td><td style="text-align:center">143</td></tr><tr><td style="text-align:center">SMTP</td><td style="text-align:center">smtp.qiye.163.com</td><td style="text-align:center">994</td><td style="text-align:center">25</td></tr><tr><td style="text-align:center">POP3</td><td style="text-align:center">pop.qiye.163.com</td><td style="text-align:center">995</td><td style="text-align:center">110</td></tr></tbody></table><p>　　<strong>网易126免费邮箱相关服务器信息：</strong></p><table><thead><tr><th style="text-align:center">服务器名称</th><th style="text-align:center">服务器地址</th><th style="text-align:center">SSL协议端口号</th><th style="text-align:center">非SSL协议端口号</th></tr></thead><tbody><tr><td style="text-align:center">IMAP</td><td style="text-align:center">imap.126.com</td><td style="text-align:center">993</td><td style="text-align:center">143</td></tr><tr><td style="text-align:center">SMTP</td><td style="text-align:center">smtp.126.com</td><td style="text-align:center">465/994</td><td style="text-align:center">25</td></tr><tr><td style="text-align:center">POP3</td><td style="text-align:center">pop.126.com</td><td style="text-align:center">995</td><td style="text-align:center">110</td></tr></tbody></table><p>　　<strong>腾讯QQ免费邮箱相关服务器信息：</strong></p><table><thead><tr><th style="text-align:center">服务器名称</th><th style="text-align:center">服务器地址</th><th style="text-align:center">SSL协议端口号</th><th style="text-align:center">非SSL协议端口号</th></tr></thead><tbody><tr><td style="text-align:center">IMAP</td><td style="text-align:center">imap.qq.com</td><td style="text-align:center">993</td><td style="text-align:center">143</td></tr><tr><td style="text-align:center">SMTP</td><td style="text-align:center">smtp.qq.com</td><td style="text-align:center">465/587</td><td style="text-align:center">25</td></tr><tr><td style="text-align:center">POP3</td><td style="text-align:center">pop.qq.com</td><td style="text-align:center">995</td><td style="text-align:center">110</td></tr></tbody></table><p>　　<strong>腾讯QQ企业邮箱相关服务器信息：</strong></p><table><thead><tr><th style="text-align:center">服务器名称</th><th style="text-align:center">服务器地址</th><th style="text-align:center">SSL协议端口号</th><th style="text-align:center">非SSL协议端口号</th></tr></thead><tbody><tr><td style="text-align:center">IMAP</td><td style="text-align:center">imap.exmail.qq.com</td><td style="text-align:center">993</td><td style="text-align:center">143</td></tr><tr><td style="text-align:center">SMTP</td><td style="text-align:center">smtp.exmail.qq.com</td><td style="text-align:center">465/587</td><td style="text-align:center">25</td></tr><tr><td style="text-align:center">POP3</td><td style="text-align:center">pop.exmail.qq.com</td><td style="text-align:center">995</td><td style="text-align:center">110</td></tr></tbody></table><p>　　<strong>谷歌Gmail邮箱相关服务器信息：</strong></p><table><thead><tr><th style="text-align:center">服务器名称</th><th style="text-align:center">服务器地址</th><th style="text-align:center">SSL协议端口号</th><th style="text-align:center">非SSL协议端口号</th></tr></thead><tbody><tr><td style="text-align:center">IMAP</td><td style="text-align:center">imap.gmail.com</td><td style="text-align:center">993</td><td style="text-align:center">143</td></tr><tr><td style="text-align:center">SMTP</td><td style="text-align:center">smtp.gmail.com</td><td style="text-align:center">465</td><td style="text-align:center">25</td></tr><tr><td style="text-align:center">POP3</td><td style="text-align:center">pop.gmail.com</td><td style="text-align:center">995</td><td style="text-align:center">110</td></tr></tbody></table><h2 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a><span style="font-size: 27px; color:#3498db;">二、代码实现</span></h2><p>　　下面开始编写代码，注意QQ邮箱SMTP服务器地址：smtp.qq.com，ssl端口：465。</p><h3 id="1-发送纯文本邮件"><a href="#1-发送纯文本邮件" class="headerlink" title="1. 发送纯文本邮件"></a><span style="font-size: 18px; color: #159957;">1. 发送纯文本邮件</span></h3><p>　　以下实例你需要修改：发件人邮箱（你的QQ邮箱），密码，收件人邮箱（可发给自己）。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> time<span class="token keyword">import</span> smtplib<span class="token keyword">from</span> email<span class="token punctuation">.</span>header <span class="token keyword">import</span> Header<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText<span class="token comment" spellcheck="true"># ----- 需要修改的参数 -----</span><span class="token comment" spellcheck="true"># email相关</span>sender <span class="token operator">=</span> <span class="token string">'wenyuanblog@qq.com'</span>password <span class="token operator">=</span> <span class="token string">'hjenixkwghseowyxnclh12yx8je9l2au'</span>smtp_server <span class="token operator">=</span> <span class="token string">'smtp.qq.com'</span>smtp_port <span class="token operator">=</span> <span class="token number">465</span>receivers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'recever1@163.com'</span><span class="token punctuation">,</span> <span class="token string">'recever1@qq.com'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ------------------------</span><span class="token keyword">def</span> <span class="token function">send_email</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span> detail<span class="token punctuation">)</span><span class="token punctuation">:</span>    now_time <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">)</span>    mail_msg <span class="token operator">=</span> <span class="token triple-quoted-string string">"""    时间：{now_time}    详情：{detail}    """</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>subject<span class="token operator">=</span>subject<span class="token punctuation">,</span> now_time<span class="token operator">=</span>now_time<span class="token punctuation">,</span> detail<span class="token operator">=</span>detail<span class="token punctuation">)</span>    msg <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>mail_msg<span class="token punctuation">,</span> <span class="token string">'plain'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    msg<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span><span class="token string">'wenyuanblog汇报人 &lt;%s>'</span> <span class="token operator">%</span> sender<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    msg<span class="token punctuation">[</span><span class="token string">'To'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span><span class="token string">'wenyuanblog订阅者'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    msg<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        smtp <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP_SSL<span class="token punctuation">(</span>smtp_server<span class="token punctuation">,</span> smtp_port<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># smtp.set_debuglevel(1)    # 打印和SMTP服务器交互的所有信息</span>        smtp<span class="token punctuation">.</span>login<span class="token punctuation">(</span>sender<span class="token punctuation">,</span> password<span class="token punctuation">)</span>        smtp<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>sender<span class="token punctuation">,</span> receivers<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        smtp<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'邮件发送成功'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> smtplib<span class="token punctuation">.</span>SMTPException <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Error: 无法发送邮件'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    email_title <span class="token operator">=</span> <span class="token string">'Python SMTP 纯文本邮件测试'</span>    detail <span class="token operator">=</span> <span class="token triple-quoted-string string">"""    欢迎访问：www.wenyuanblog.com    这里是我的博客站点，专注于Python、前端和机器学习技术的分享。    """</span>    send_email<span class="token punctuation">(</span>email_title<span class="token punctuation">,</span> detail<span class="token punctuation">)</span></code></pre><h3 id="2-发送HTML格式的邮件"><a href="#2-发送HTML格式的邮件" class="headerlink" title="2. 发送HTML格式的邮件"></a><span style="font-size: 18px; color: #159957;">2. 发送HTML格式的邮件</span></h3><p>　　以下实例你需要修改：发件人邮箱（你的QQ邮箱），密码，收件人邮箱（可发给自己）。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> time<span class="token keyword">import</span> smtplib<span class="token keyword">from</span> email<span class="token punctuation">.</span>header <span class="token keyword">import</span> Header<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText<span class="token comment" spellcheck="true"># ----- 需要修改的参数 -----</span><span class="token comment" spellcheck="true"># email相关</span>sender <span class="token operator">=</span> <span class="token string">'wenyuanblog@qq.com'</span>password <span class="token operator">=</span> <span class="token string">'hjenixkwghseowyxnclh12yx8je9l2au'</span>smtp_server <span class="token operator">=</span> <span class="token string">'smtp.qq.com'</span>smtp_port <span class="token operator">=</span> <span class="token number">465</span>receivers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'recever1@163.com'</span><span class="token punctuation">,</span> <span class="token string">'recever1@qq.com'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ------------------------</span><span class="token keyword">def</span> <span class="token function">send_email</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span> detail<span class="token punctuation">)</span><span class="token punctuation">:</span>    now_time <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">)</span>    mail_msg <span class="token operator">=</span> <span class="token triple-quoted-string string">"""    &lt;h1 style='margin-top:10px;margin-bottom:10px;text-align:center'>{subject}&lt;/h1>    &lt;hr>    &lt;h2 style='margin-top:0;margin-bottom:10px'>时间&lt;/h2>    &lt;div style='margin-left: 40px'>{now_time}&lt;/div>    &lt;hr>    &lt;h2 style='margin-top:0;margin-bottom:10px'>详情&lt;/h2>    &lt;div style='margin-left: 40px'>{detail}&lt;/div>    &lt;hr>    """</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>subject<span class="token operator">=</span>subject<span class="token punctuation">,</span> now_time<span class="token operator">=</span>now_time<span class="token punctuation">,</span> detail<span class="token operator">=</span>detail<span class="token punctuation">)</span>    msg <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>mail_msg<span class="token punctuation">,</span> <span class="token string">'html'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    msg<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span><span class="token string">'wenyuanblog汇报人 &lt;%s>'</span> <span class="token operator">%</span> sender<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    msg<span class="token punctuation">[</span><span class="token string">'To'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span><span class="token string">'wenyuanblog订阅者'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    msg<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        smtp <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP_SSL<span class="token punctuation">(</span>smtp_server<span class="token punctuation">,</span> smtp_port<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># smtp.set_debuglevel(1)    # 打印和SMTP服务器交互的所有信息</span>        smtp<span class="token punctuation">.</span>login<span class="token punctuation">(</span>sender<span class="token punctuation">,</span> password<span class="token punctuation">)</span>        smtp<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>sender<span class="token punctuation">,</span> receivers<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        smtp<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'邮件发送成功'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> smtplib<span class="token punctuation">.</span>SMTPException <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Error: 无法发送邮件'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    email_title <span class="token operator">=</span> <span class="token string">'Python SMTP HTML格式邮件测试'</span>    detail <span class="token operator">=</span> <span class="token triple-quoted-string string">"""    &lt;div>欢迎访问：&lt;a href="http://www.wenyuanblog.com" target="_blank">www.wenyuanblog.com&lt;/a>&lt;/div>    &lt;div style='margin-bottom:5px'>这里是我的博客站点，专注于Python、前端和机器学习技术的分享。&lt;/div>    """</span>    send_email<span class="token punctuation">(</span>email_title<span class="token punctuation">,</span> detail<span class="token punctuation">)</span></code></pre><h3 id="2-发送带附件的邮件"><a href="#2-发送带附件的邮件" class="headerlink" title="2. 发送带附件的邮件"></a><span style="font-size: 18px; color: #159957;">2. 发送带附件的邮件</span></h3><p>　　以下实例你需要修改：发件人邮箱（你的QQ邮箱），密码，收件人邮箱（可发给自己）。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> time<span class="token keyword">import</span> smtplib<span class="token keyword">from</span> email<span class="token punctuation">.</span>header <span class="token keyword">import</span> Header<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>text <span class="token keyword">import</span> MIMEText<span class="token keyword">from</span> email<span class="token punctuation">.</span>mime<span class="token punctuation">.</span>multipart <span class="token keyword">import</span> MIMEMultipart<span class="token comment" spellcheck="true"># ----- 需要修改的参数 -----</span><span class="token comment" spellcheck="true"># email相关</span>sender <span class="token operator">=</span> <span class="token string">'wenyuanblog@qq.com'</span>password <span class="token operator">=</span> <span class="token string">'hjenixkwghseowyxnclh12yx8je9l2au'</span>smtp_server <span class="token operator">=</span> <span class="token string">'smtp.qq.com'</span>smtp_port <span class="token operator">=</span> <span class="token number">465</span>receivers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'recever1@163.com'</span><span class="token punctuation">,</span> <span class="token string">'recever1@qq.com'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ------------------------</span><span class="token keyword">def</span> <span class="token function">send_email</span><span class="token punctuation">(</span>subject<span class="token punctuation">,</span> detail<span class="token punctuation">,</span> attach_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    now_time <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">)</span>    mail_msg <span class="token operator">=</span> <span class="token triple-quoted-string string">"""    时间：{now_time}    详情：{detail}    """</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>subject<span class="token operator">=</span>subject<span class="token punctuation">,</span> now_time<span class="token operator">=</span>now_time<span class="token punctuation">,</span> detail<span class="token operator">=</span>detail<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 创建一个带附件的实例</span>    msg <span class="token operator">=</span> MIMEMultipart<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># msg = MIMEText(mail_msg, 'plain', 'utf-8')</span>    msg<span class="token punctuation">[</span><span class="token string">'From'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span><span class="token string">'wenyuanblog汇报人 &lt;%s>'</span> <span class="token operator">%</span> sender<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    msg<span class="token punctuation">[</span><span class="token string">'To'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span><span class="token string">'wenyuanblog订阅者'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    msg<span class="token punctuation">[</span><span class="token string">'Subject'</span><span class="token punctuation">]</span> <span class="token operator">=</span> Header<span class="token punctuation">(</span>subject<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 邮件正文内容</span>    msg<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>MIMEText<span class="token punctuation">(</span>mail_msg<span class="token punctuation">,</span> <span class="token string">'plain'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 构造附件，传送指定目录下的文件</span>    <span class="token keyword">for</span> att_path <span class="token keyword">in</span> attach_list<span class="token punctuation">:</span>        att <span class="token operator">=</span> MIMEText<span class="token punctuation">(</span>open<span class="token punctuation">(</span>att_path<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'base64'</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span>        att<span class="token punctuation">[</span><span class="token string">"Content-Type"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'application/octet-stream'</span>        <span class="token comment" spellcheck="true"># 这里的filename可以任意写，写什么名字，邮件中显示什么名字</span>        att<span class="token punctuation">[</span><span class="token string">"Content-Disposition"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'attachment; filename={filename}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>filename<span class="token operator">=</span>att_path<span class="token punctuation">)</span>        msg<span class="token punctuation">.</span>attach<span class="token punctuation">(</span>att<span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        smtp <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP_SSL<span class="token punctuation">(</span>smtp_server<span class="token punctuation">,</span> smtp_port<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># smtp.set_debuglevel(1)    # 打印和SMTP服务器交互的所有信息</span>        smtp<span class="token punctuation">.</span>login<span class="token punctuation">(</span>sender<span class="token punctuation">,</span> password<span class="token punctuation">)</span>        smtp<span class="token punctuation">.</span>sendmail<span class="token punctuation">(</span>sender<span class="token punctuation">,</span> receivers<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>as_string<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        smtp<span class="token punctuation">.</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'邮件发送成功'</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> smtplib<span class="token punctuation">.</span>SMTPException <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Error: 无法发送邮件'</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    email_title <span class="token operator">=</span> <span class="token string">'Python SMTP 带附件邮件测试'</span>    detail <span class="token operator">=</span> <span class="token triple-quoted-string string">"""    欢迎访问：www.wenyuanblog.com    这里是我的博客站点，专注于Python、前端和机器学习技术的分享。    附件是网站源码，请查收。    """</span>    attach_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'send_email.py'</span><span class="token punctuation">,</span> <span class="token string">'README.md'</span><span class="token punctuation">]</span>    send_email<span class="token punctuation">(</span>email_title<span class="token punctuation">,</span> detail<span class="token punctuation">,</span> attach_list<span class="token punctuation">)</span></code></pre><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a><span style="font-size: 27px; color:#3498db;">三、总结</span></h2><p>　　以上就是通过 Python SMTP 发送邮件的代码示例，一般情况下是够用了。还有一些图片email等特殊邮件，因为需要考虑到兼容性问题，有些邮箱默认不显示图片，个人感觉不太常用，就不整理了。</p>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Py基础】subprocess模块</title>
      <link href="/blogs/python-subprocess.html"/>
      <url>/blogs/python-subprocess.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">【Python基础】subprocess模块</div><blockquote><p>Python执行Linux的Shell命令方法总结。</p></blockquote><h2 id="一、简介"><a href="#一、简介" class="headerlink" title="一、简介"></a><span style="font-size: 27px; color:#3498db;">一、简介</span></h2><p>　　工作中经常会遇到写工具脚本的需求，需要我们通过Python来执行shell命令。<br>　　Python中可以执行shell命令的<span style="color: #FF0000;">相关模块和函数</span>有：<br>　　●　<strong> os.system </strong><br>　　●　<strong> os.spawn* </strong><br>　　●　<strong> os.popen* </strong>     –废弃<br>　　●　<strong> popen2.* </strong>      –废弃<br>　　●　<strong> commands.* </strong>    –废弃，3.x中被移除<br>　　乍一看是不是很凌乱，怎么有那么多，选择恐惧症啊：到底哪个是主流呢？<br>　　以前我比较常用的是 <span style="color: #3498db;">commands</span>，用起来很方便，如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> commandsresult <span class="token operator">=</span> commands<span class="token punctuation">.</span>getoutput<span class="token punctuation">(</span><span class="token string">'cmd'</span><span class="token punctuation">)</span>result <span class="token operator">=</span> commands<span class="token punctuation">.</span>getstatus<span class="token punctuation">(</span><span class="token string">'cmd'</span><span class="token punctuation">)</span>result <span class="token operator">=</span> commands<span class="token punctuation">.</span>getstatusoutput<span class="token punctuation">(</span><span class="token string">'cmd'</span><span class="token punctuation">)</span></code></pre><p>　　随着Python版本的更新，上面有这么多模块，必然引起了代码的复杂与冗余。因此Python新引入了一个模块 <span style="color: #FF0000;">subprocess</span>。它将以上几个模块的功能集中到了一起。<br>　　<span style="color: #FF0000;">所以今后只需要 import subprocess 这一个即可。</span><br>　　<strong>subprocess</strong> 的目的就是启动一个新的进程并且与之通信。</p><h2 id="二、subprocess常用的封装函数"><a href="#二、subprocess常用的封装函数" class="headerlink" title="二、subprocess常用的封装函数"></a><span style="font-size: 27px; color:#3498db;">二、subprocess常用的封装函数</span></h2><h3 id="1-subprocess-call"><a href="#1-subprocess-call" class="headerlink" title="1. subprocess.call()"></a><span style="font-size: 18px; color: #159957;">1. subprocess.call()</span></h3><p>　　父进程等待子进程执行命令，返回子进程执行命令的状态码，<span style="color: #FF0000;">如果出现错误，不进行报错</span>。<br>　　<span style="font-size: 10px; color: #FF0000;">* </span><span style="font-size: 10px; color: #9e9e9e;">这里说的返回执行命令的状态码的意思是：如果我们通过一个变量 res = subprocess.call([‘dir’,shell=True]) 获取的执行结果，我们<span style="color: #3498db;">能获取到的是子进程执行命令执行结果的状态码</span>，即res=0/1 执行成功或者不成功，<span style="color: #3498db;">并不代表说看不到执行结果</span>，在Python的console界面中我们是能够看到命令结果的，只是获取不到。想获取执行的返回结果，就要看后面的check_output。</span><br>　　<span style="font-size: 10px; color: #FF0000;">* </span><span style="font-size: 10px; color: #9e9e9e;">不进行报错解释：如果我们执行的命令在执行时，操作系统不识别，系统会返回一个错误，如：abc命令不存在，这个结果会在console界面中显示出来，但是我们的Python解释器不会提示任何信息，如果想让Python解释器也进行报错，就要看后面的check_output。</span><br>　　下面举一个例子，执行 <code>cat /etc/issue</code> 命令：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># !/usr/bin/env python</span><span class="token keyword">import</span> subprocessresult <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>call<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'/etc/issue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p>　　<span style="font-size: 10px; color: #FF0000;">注：</span><span style="font-size: 10px;">shell默认为False，在Linux下，shell=False时, Popen调用os.execvp()执行args指定的程序；shell=True时，如果args是字符串，Popen直接调用系统的Shell来执行args指定的程序，如果args是一个序列，则args的第一项是定义程序命令字符串，其它项是调用系统Shell时的附加参数。<br>　　在Windows下，不论shell的值如何，Popen调用CreateProcess()执行args指定的外部程序。如果args是一个序列，则先用list2cmdline()转化为字符串，但需要注意的是，并不是MS Windows下所有的程序都可以用list2cmdline来转化为命令行字符串。在windows下，调用脚本时要写上shell=True。</span><br>　　输出结果：</p><pre class=" language-bash"><code class="language-bash">Ubuntu 14.04.3 LTS \n \l0</code></pre><h3 id="2-subprocess-check-call"><a href="#2-subprocess-check-call" class="headerlink" title="2. subprocess.check_call()"></a><span style="font-size: 18px; color: #159957;">2. subprocess.check_call()</span></h3><p>　　父进程等待子进程执行命令，返回执行命令的状态码，<span style="color: #FF0000;">如果出现错误，进行报错【如果returncode不为0，则举出错误subprocess.CalledProcessError，该对象包含有returncode属性，可用try…except…来检查】</span>。<br>　　下面举一个例子，分别执行一条正确的命令和一条错误的命令：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># !/usr/bin/env python</span><span class="token keyword">import</span> subprocess<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行一条正确的命令：'</span><span class="token punctuation">)</span>result <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>check_call<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'/etc/issue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'执行一条错误的命令：'</span><span class="token punctuation">)</span>result <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>check_call<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p>　　输出结果：</p><pre class=" language-bash"><code class="language-bash">执行一条正确的命令：Ubuntu 14.04.3 LTS \n \l0执行一条错误的命令：Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span>:  File <span class="token string">"subprocess_check_call.py"</span>, line 12, <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>    result <span class="token operator">=</span> subprocess.check_call<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'abc'</span><span class="token punctuation">]</span>, shell<span class="token operator">=</span>False<span class="token punctuation">)</span>  File <span class="token string">"/usr/lib/python2.7/subprocess.py"</span>, line 535, <span class="token keyword">in</span> check_call    retcode <span class="token operator">=</span> call<span class="token punctuation">(</span>*popenargs, **kwargs<span class="token punctuation">)</span>  File <span class="token string">"/usr/lib/python2.7/subprocess.py"</span>, line 522, <span class="token keyword">in</span> call    <span class="token keyword">return</span> Popen<span class="token punctuation">(</span>*popenargs, **kwargs<span class="token punctuation">)</span>.wait<span class="token punctuation">(</span><span class="token punctuation">)</span>  File <span class="token string">"/usr/lib/python2.7/subprocess.py"</span>, line 710, <span class="token keyword">in</span> __init__    errread, errwrite<span class="token punctuation">)</span>  File <span class="token string">"/usr/lib/python2.7/subprocess.py"</span>, line 1327, <span class="token keyword">in</span> _execute_child    raise child_exceptionOSError: <span class="token punctuation">[</span>Errno 2<span class="token punctuation">]</span> No such <span class="token function">file</span> or directory</code></pre><h3 id="3-subprocess-check-output"><a href="#3-subprocess-check-output" class="headerlink" title="3. subprocess.check_output()"></a><span style="font-size: 18px; color: #159957;">3. subprocess.check_output()</span></h3><p>　　父进程等待子进程执行命令，返回子进程向标准输出发送输出运行结果，检查退出信息，如果returncode不为0，则举出错误subprocess.CalledProcessError，该对象包含有returncode属性和output属性，output属性为标准输出的输出结果，可用try…except…来检查。<br>　　下面举一个例子，执行 <code>ping -c 4 www.baidu.com</code> 命令：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># !/usr/bin/env python</span><span class="token keyword">import</span> subprocessresult <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>check_output<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'ping'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'www.baidu.com'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre><p>　　输出结果：</p><pre class=" language-bash"><code class="language-bash">PING www.a.shifen.com <span class="token punctuation">(</span>180.97.33.107<span class="token punctuation">)</span> 56<span class="token punctuation">(</span>84<span class="token punctuation">)</span> bytes of data.64 bytes from 180.97.33.107: icmp_seq<span class="token operator">=</span>1 ttl<span class="token operator">=</span>55 time<span class="token operator">=</span>5.52 ms64 bytes from 180.97.33.107: icmp_seq<span class="token operator">=</span>2 ttl<span class="token operator">=</span>55 time<span class="token operator">=</span>6.65 ms64 bytes from 180.97.33.107: icmp_seq<span class="token operator">=</span>3 ttl<span class="token operator">=</span>55 time<span class="token operator">=</span>6.18 ms64 bytes from 180.97.33.107: icmp_seq<span class="token operator">=</span>4 ttl<span class="token operator">=</span>55 time<span class="token operator">=</span>7.77 ms--- www.a.shifen.com <span class="token function">ping</span> statistics ---4 packets transmitted, 4 received, 0% packet loss, <span class="token function">time</span> 3004msrtt min/avg/max/mdev <span class="token operator">=</span> 5.529/6.537/7.779/0.824 ms</code></pre><p>　　可见，<span style="color: #FF0000;">call/check_call 返回值均是命令的执行状态码</span>，而 <span style="color: #FF0000;">check_output 返回值是命令的执行结果</span>。<br>　　如果在执行相关命令时，命令后带有参数，将命令和所带的参数一起放在一个列表中传递给相关方法即可。</p><h3 id="4-subprocess-Popen"><a href="#4-subprocess-Popen" class="headerlink" title="4. subprocess.Popen()"></a><span style="font-size: 18px; color: #159957;">4. subprocess.Popen()</span></h3><p>　　实际上，subprocess模块中<span style="color: #FF0000;">只定义了一个类：Popen</span>。上面的几个函数都是基于Popen()的封装(wrapper)。从Python2.4开始使用Popen来创建进程，用于连接到子进程的标准输入/输出/错误中去，还可以得到子进程的返回值。这些封装的目的在于让我们容易使用子进程。当我们想要更个性化我们的需求的时候，就要转向Popen类，该类生成的对象用来代表子进程。<br>　　构造函数如下：</p><pre class=" language-python"><code class="language-python">subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>args<span class="token punctuation">,</span> bufsize<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> executable<span class="token operator">=</span>None<span class="token punctuation">,</span> stdin<span class="token operator">=</span>None<span class="token punctuation">,</span> stdout<span class="token operator">=</span>None<span class="token punctuation">,</span> stderr<span class="token operator">=</span>None<span class="token punctuation">,</span> preexec_fn<span class="token operator">=</span>None<span class="token punctuation">,</span>                 close_fds<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> cwd<span class="token operator">=</span>None<span class="token punctuation">,</span> env<span class="token operator">=</span>None<span class="token punctuation">,</span> universal_newlines<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> startupinfo<span class="token operator">=</span>None<span class="token punctuation">,</span>                 creationflags<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>　　与上面的封装不同，Popen对象创建后，主程序不会自动等待子进程完成。我们必须调用对象的wait()方法，父进程才会等待（也就是阻塞block）。<br>　　① <span style="color: #FF0000;">不等待的子进程</span></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># !/usr/bin/env python</span><span class="token keyword">import</span> subprocesschild <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'ping'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'www.baidu.com'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span></code></pre><p>　　输出结果：</p><pre class=" language-bash"><code class="language-bash">wenyuanblog@localhost:~/home/test/script$ python subprocess_sub.py hello worldwenyuanblog@localhost:~/home/test/script$ PING www.a.shifen.com <span class="token punctuation">(</span>180.97.33.107<span class="token punctuation">)</span> 56<span class="token punctuation">(</span>84<span class="token punctuation">)</span> bytes of data.64 bytes from 180.97.33.107: icmp_seq<span class="token operator">=</span>1 ttl<span class="token operator">=</span>55 time<span class="token operator">=</span>6.28 ms64 bytes from 180.97.33.107: icmp_seq<span class="token operator">=</span>2 ttl<span class="token operator">=</span>55 time<span class="token operator">=</span>6.61 ms64 bytes from 180.97.33.107: icmp_seq<span class="token operator">=</span>3 ttl<span class="token operator">=</span>55 time<span class="token operator">=</span>6.30 ms64 bytes from 180.97.33.107: icmp_seq<span class="token operator">=</span>4 ttl<span class="token operator">=</span>55 time<span class="token operator">=</span>6.45 ms--- www.a.shifen.com <span class="token function">ping</span> statistics ---4 packets transmitted, 4 received, 0% packet loss, <span class="token function">time</span> 3004msrtt min/avg/max/mdev <span class="token operator">=</span> 6.287/6.413/6.610/0.162 ms</code></pre><p>　　可以看出，Python并没有等到child子进程执行的Popen操作完成就执行了print操作。<br>　　② <span style="color: #FF0000;">添加子进程等待</span></p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># !/usr/bin/env python</span><span class="token keyword">import</span> subprocess<span class="token comment" spellcheck="true"># 创建一个子进程，进程名为child，执行操作ping -c 4 www.baidu.com</span>child <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'ping'</span><span class="token punctuation">,</span> <span class="token string">'-c'</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token string">'www.baidu.com'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 子进程等待</span>child<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello world'</span><span class="token punctuation">)</span></code></pre><p>　　输出结果：</p><pre class=" language-bash"><code class="language-bash">wenyuanblog@localhost:~/home/test/script$ python subprocess_sub.py PING www.a.shifen.com <span class="token punctuation">(</span>180.97.33.108<span class="token punctuation">)</span> 56<span class="token punctuation">(</span>84<span class="token punctuation">)</span> bytes of data.64 bytes from 180.97.33.108: icmp_seq<span class="token operator">=</span>1 ttl<span class="token operator">=</span>55 time<span class="token operator">=</span>6.50 ms64 bytes from 180.97.33.108: icmp_seq<span class="token operator">=</span>2 ttl<span class="token operator">=</span>55 time<span class="token operator">=</span>5.88 ms64 bytes from 180.97.33.108: icmp_seq<span class="token operator">=</span>3 ttl<span class="token operator">=</span>55 time<span class="token operator">=</span>6.48 ms64 bytes from 180.97.33.108: icmp_seq<span class="token operator">=</span>4 ttl<span class="token operator">=</span>55 time<span class="token operator">=</span>6.74 ms--- www.a.shifen.com <span class="token function">ping</span> statistics ---4 packets transmitted, 4 received, 0% packet loss, <span class="token function">time</span> 3004msrtt min/avg/max/mdev <span class="token operator">=</span> 5.887/6.404/6.740/0.325 mshello world</code></pre><p>　　看出Python执行print操作是在child子进程操作完成以后才进行的。</p><p>　　<span style="color: #FF0000;">此外</span>，你还可以在父进程中对子进程进行其它操作，比如我们上面例子中的child对象：</p><pre class=" language-python"><code class="language-python">child<span class="token punctuation">.</span>poll<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 检查子进程状态</span>child<span class="token punctuation">.</span>kill<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 终止子进程</span>child<span class="token punctuation">.</span>send_signal<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 向子进程发送信号</span>child<span class="token punctuation">.</span>terminate<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 终止子进程</span>ps<span class="token punctuation">:</span> 子进程的PID存储在child<span class="token punctuation">.</span>pid</code></pre><p>　　<strong>子进程文本流控制</strong><br>　　子进程的标准输入、标准输出和标准错误如下属性分别表示：<br>　　<span style="color: #FF0000;">child.stdin | child.stdout | child.stderr</span><br>　　我们还可以在Popen()<span style="color: #3498db;">建立子进程的时候改变标准输入、标准输出和标准错误</span>，并可以利用subprocess.PIPE<span style="color: #3498db;">将多个子进程的输入和输出连接在一起</span>，构成管道（pipe），如下2个例子。<br>　　例1：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># !/usr/bin/env python</span><span class="token keyword">import</span> subprocess<span class="token comment" spellcheck="true"># 将标准输出定向输出到subprocess.PIPE</span>child <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span><span class="token string">'/etc/issue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用 child.communicate() 也可</span><span class="token keyword">print</span><span class="token punctuation">(</span>child<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>　　输出结果：</p><pre class=" language-bash"><code class="language-bash">Ubuntu 14.04.3 LTS \n \l</code></pre><p>　　例2：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># !/usr/bin/env python</span><span class="token keyword">import</span> subprocesschild1 <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'/etc/issue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span>child2 <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'date'</span><span class="token punctuation">,</span> <span class="token string">'+%Y-%m-%d'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> stdin<span class="token operator">=</span>child1<span class="token punctuation">.</span>stdout<span class="token punctuation">,</span> stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>child2<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>　　输出结果：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">(</span><span class="token string">'2017-06-08\n'</span>, None<span class="token punctuation">)</span></code></pre><p>　　<span style="color: #FF0000;">subprocess.PIPE实际上为文本流提供一个缓存区。</span>child1的stdout将文本输出到缓存区，随后child2的stdin从该PIPE中将文本读取走。child2的输出文本也被存放在PIPE中，直到communicate()方法从PIPE中读取出PIPE中的文本。<br>　　注意：communicate()是Popen对象的一个方法，<span style="color: #FF0000;">该方法会阻塞父进程，直到子进程完成。</span></p><p>　　<strong>子进程命令解释</strong><br>　　在上面的例子中我们创建子进程时，全部是调用Python进行解释，但Python并没有将所有命令全部解释，当Python不能进行解释时，就需要调用系统来进行执行。<br>　　上面说过，带参数的命令，要使用列表的形式，其实我们也可以传字符串，只不过这时要传入<span style="color: #3498db;">shell=True</span>，大概就是这个意思。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token comment" spellcheck="true"># !/usr/bin/env python</span><span class="token keyword">import</span> subprocesssubprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'ls'</span><span class="token punctuation">,</span> <span class="token string">'-l'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'ifconfig|grep 127.0.0.1'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> shell<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a><span style="font-size: 27px; color:#3498db;">三、总结</span></h2><p>　　subprocess模块作为最新出的“集大成者”，还是很强大的。上面整理的是平时常用的功能。如果需要更进一步了解内部函数，可以查看官方文档。</p>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Py基础】文本文件读写</title>
      <link href="/blogs/python-txt-files-io.html"/>
      <url>/blogs/python-txt-files-io.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">【Python基础】文本文件读写</div><blockquote><p>Python中常用文件读写方法汇总。</p></blockquote><h2 id="一、打开文件模式"><a href="#一、打开文件模式" class="headerlink" title="一、打开文件模式"></a><span style="font-size: 27px; color:#3498db;">一、打开文件模式</span></h2><p>　　打开文件模式列表：</p><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">r</th><th style="text-align:center">r+</th><th style="text-align:center">w</th><th style="text-align:center">w+</th><th style="text-align:center">a</th><th style="text-align:center">a+</th></tr></thead><tbody><tr><td style="text-align:center">读</td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center"></td><td style="text-align:center">+</td><td style="text-align:center"></td><td style="text-align:center">+</td></tr><tr><td style="text-align:center">写</td><td style="text-align:center"></td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center">+</td></tr><tr><td style="text-align:center">创建</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center">+</td></tr><tr><td style="text-align:center">覆盖</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">指针在开始</td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">指针在结尾</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">+</td><td style="text-align:center">+</td></tr></tbody></table><h2 id="二、读取文本文件"><a href="#二、读取文本文件" class="headerlink" title="二、读取文本文件"></a><span style="font-size: 27px; color:#3498db;">二、读取文本文件</span></h2><p>　　python常用的读取文件函数有三种read()、readline()、readlines()<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/py_test_txtfile.png" alt="py_test_txtfile.png"></p><h3 id="1-read-一次性读全部内容"><a href="#1-read-一次性读全部内容" class="headerlink" title="1. read() 一次性读全部内容"></a><span style="font-size: 18px; color: #159957;">1. read() 一次性读全部内容</span></h3><p>　　read()会一次性读取文本中全部的内容，以字符串的形式返回结果</p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 打开文件</span>    data <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 读取文件</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><h3 id="2-readline-读取第一行内容"><a href="#2-readline-读取第一行内容" class="headerlink" title="2. readline() 读取第一行内容"></a><span style="font-size: 18px; color: #159957;">2. readline() 读取第一行内容</span></h3><p>　　readline()只读取文本第一行的内容，以字符串的形式返回结果</p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 打开文件</span>    data <span class="token operator">=</span> f<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span></code></pre><h3 id="3-readlines-列表"><a href="#3-readlines-列表" class="headerlink" title="3. readlines() 列表"></a><span style="font-size: 18px; color: #159957;">3. readlines() 列表</span></h3><p>　　readlines()会读取文本所有内容，并且以数列的格式返回结果，一般配合for in使用</p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 打开文件</span>    data <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：['你好，我是第一行\n', '你好，我是第二行\n', '你好，我是第三行\n', '你好，我是第四行\n', '你好，我是第五行']</span></code></pre><p>　　可见readlines会读到换行符，我们可以用如下方法去除：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 打开文件</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 去掉列表中每一个元素的换行符</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span></code></pre><h2 id="三、写入文本文件"><a href="#三、写入文本文件" class="headerlink" title="三、写入文本文件"></a><span style="font-size: 27px; color:#3498db;">三、写入文本文件</span></h2><p>　　清空原来的内容，覆盖写入</p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 打开文件</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'测试写入一行'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 这句话自带文件关闭功能，不需要再写f.close()</span></code></pre><p>　　保留原来的内容，在末尾追加写入</p><pre class=" language-python"><code class="language-python"><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'test.txt'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 打开文件</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">'测试写入一行'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 这句话自带文件关闭功能，不需要再写f.close()</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Py基础】时间和日期模块</title>
      <link href="/blogs/python-time-and-datetime.html"/>
      <url>/blogs/python-time-and-datetime.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">【Python基础】时间和日期模块</div><blockquote><p>Python中的time和datetime用法整理。</p></blockquote><h2 id="一、Python中时间的四种类型"><a href="#一、Python中时间的四种类型" class="headerlink" title="一、Python中时间的四种类型"></a><span style="font-size: 27px; color:#3498db;">一、Python中时间的四种类型</span></h2><ul><li>时间戳 float</li><li>时间元组 struct_time</li><li>时间字符串 string</li><li>时间对象 datetime，date，time</li></ul><h2 id="二、time模块"><a href="#二、time模块" class="headerlink" title="二、time模块"></a><span style="font-size: 27px; color:#3498db;">二、time模块</span></h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入包</span><span class="token keyword">import</span> time</code></pre><h3 id="1-时间类型"><a href="#1-时间类型" class="headerlink" title="1. 时间类型"></a><span style="font-size: 18px; color: #159957;">1. 时间类型</span></h3><p>以时间戳（秒）形式，返回当前时间</p><pre class=" language-python"><code class="language-python">time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：1552884340.400742</span></code></pre><p>以时间元组形式 struct_time，返回本地时间</p><pre class=" language-python"><code class="language-python">time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：time.struct_time(tm_year=2019, tm_mon=3, tm_mday=18, tm_hour=12, tm_min=47, tm_sec=18, tm_wday=0, tm_yday=77, tm_isdst=0)</span></code></pre><p>以字符串形式，返回格式化的时间</p><pre class=" language-python"><code class="language-python">time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：'2019-03-18 12:48:50'</span></code></pre><p>格式化指定时间戳，输出字符串</p><pre class=" language-python"><code class="language-python">time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token number">1554197885.739947</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：'2019-04-02 17:38:05'</span></code></pre><h3 id="2-类型转换"><a href="#2-类型转换" class="headerlink" title="2. 类型转换"></a><span style="font-size: 18px; color: #159957;">2. 类型转换</span></h3><p>时间元组 → 字符串</p><pre class=" language-python"><code class="language-python">time<span class="token punctuation">.</span>asctime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：'Mon Mar 18 13:02:31 2019'</span></code></pre><p>时间戳 → 字符串</p><pre class=" language-python"><code class="language-python">time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token number">1552884340.400742</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：'Mon Mar 18 12:45:40 2019'</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：'Mon Mar 18 13:03:32 2019'</span></code></pre><p>时间元组 → 时间戳</p><pre class=" language-python"><code class="language-python">time<span class="token punctuation">.</span>mktime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：1552885472.0</span></code></pre><p>字符串 → 时间元组</p><pre class=" language-python"><code class="language-python">time_str<span class="token operator">=</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>time<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>time_str<span class="token punctuation">,</span> <span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：time.struct_time(tm_year=2019, tm_mon=3, tm_mday=18, tm_hour=13, tm_min=5, tm_sec=48, tm_wday=0, tm_yday=77, tm_isdst=-1)</span></code></pre><h2 id="三、datetime模块"><a href="#三、datetime模块" class="headerlink" title="三、datetime模块"></a><span style="font-size: 27px; color:#3498db;">三、datetime模块</span></h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 导入包</span><span class="token keyword">import</span> datetime</code></pre><h3 id="1-datetime时间的计算"><a href="#1-datetime时间的计算" class="headerlink" title="1. datetime时间的计算"></a><span style="font-size: 18px; color: #159957;">1. datetime时间的计算</span></h3><p>datetime获取的是datetime对象<br>获取当前日期时间</p><pre class=" language-python"><code class="language-python">datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：datetime.datetime(2019, 3, 18, 15, 50, 31, 201287)</span></code></pre><p>获取当天日期 date</p><pre class=" language-python"><code class="language-python">datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 或 </span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：datetime.date(2019, 3, 18)</span></code></pre><p>获取当前的时间 time</p><pre class=" language-python"><code class="language-python">datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：datetime.time(15, 58, 25, 658748)</span></code></pre><p>获取时间差<br>可以计算相差多少 天（days）， 秒（seconds）， 微秒（microseconds）</p><pre class=" language-python"><code class="language-python">start_time <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span>end_time <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>end_time <span class="token operator">-</span> start_time<span class="token punctuation">)</span><span class="token punctuation">.</span>seconds<span class="token comment" spellcheck="true"># 执行完第3行输出：6</span></code></pre><p>获取当前时间向后8个小时的时间<br>可以计算：天（days），小时（hours），分钟（minutes），秒（seconds），微秒（microseconds）</p><pre class=" language-python"><code class="language-python">datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>hours<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：datetime.datetime(2019, 3, 19, 0, 19, 10, 233485)</span></code></pre><p>获取当前是星期几<br>返回的1~7代表周一到周日，如果用的是weekday则返回的0~6代表周一到周日</p><pre class=" language-python"><code class="language-python">datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isoweekday<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 或 </span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>isoweekday<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：1</span></code></pre><p>获取上周日和上周一的时间</p><pre class=" language-python"><code class="language-python">today <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span>today_weekday <span class="token operator">=</span> today<span class="token punctuation">.</span>isoweekday<span class="token punctuation">(</span><span class="token punctuation">)</span>last_sunday <span class="token operator">=</span> today <span class="token operator">-</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span>today_weekday<span class="token punctuation">)</span>last_monday <span class="token operator">=</span> last_sunday <span class="token operator">-</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 执行完第1行得到：today: datetime.date(2019, 3, 18)</span><span class="token comment" spellcheck="true"># 执行完第3行得到：last_sunday: datetime.date(2019, 3, 17)</span><span class="token comment" spellcheck="true"># 执行完第4行得到：last_monday: datetime.date(2019, 3, 11)</span></code></pre><p>获取上个月第一天和最后一天的日期</p><pre class=" language-python"><code class="language-python">today <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">.</span>today<span class="token punctuation">(</span><span class="token punctuation">)</span>last_month_end <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span>today<span class="token punctuation">.</span>year<span class="token punctuation">,</span> today<span class="token punctuation">.</span>month<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span>days<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>last_month_begin <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span>last_month_end<span class="token punctuation">.</span>year<span class="token punctuation">,</span> last_month_end<span class="token punctuation">.</span>month<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 执行完第1行得到：today: datetime.date(2019, 3, 18)</span><span class="token comment" spellcheck="true"># 执行完第2行得到：last_month_end: datetime.date(2019, 2, 28)</span><span class="token comment" spellcheck="true"># 执行完第3行得到：last_month_begin: datetime.date(2019, 2, 1)</span></code></pre><p>计算指定日期当月最后一天的日期和本月天数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> datetime<span class="token keyword">def</span> <span class="token function">specified_date_info</span><span class="token punctuation">(</span>date_object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> date_object<span class="token punctuation">.</span>month <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">:</span>        next_month_first_date <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span>date_object<span class="token punctuation">.</span>year<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        next_month_first_date <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span>date_object<span class="token punctuation">.</span>year<span class="token punctuation">,</span> date_object<span class="token punctuation">.</span>month<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> next_month_first_date <span class="token operator">-</span> datetime<span class="token punctuation">.</span>timedelta<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    date <span class="token operator">=</span> datetime<span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token number">2018</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span>    specified_month_last_date <span class="token operator">=</span> specified_date_info<span class="token punctuation">(</span>date<span class="token punctuation">)</span>    specified_month_days <span class="token operator">=</span> specified_date_info<span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">.</span>day    <span class="token keyword">print</span><span class="token punctuation">(</span>specified_month_last_date<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>specified_month_days<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：2018-12-31</span><span class="token comment" spellcheck="true"># 输出：31</span></code></pre><h3 id="2-datetime时间类型的转换"><a href="#2-datetime时间类型的转换" class="headerlink" title="2. datetime时间类型的转换"></a><span style="font-size: 18px; color: #159957;">2. datetime时间类型的转换</span></h3><p>时间戳 → datetime对象</p><pre class=" language-python"><code class="language-python">datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span><span class="token number">1552884340.400742</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：datetime.datetime(2019, 3, 18, 12, 45, 40, 400742)</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：datetime.datetime(2019, 3, 18, 17, 10, 21, 564136)</span></code></pre><p>datetime对象 → 时间戳</p><pre class=" language-python"><code class="language-python">time<span class="token punctuation">.</span>mktime<span class="token punctuation">(</span>datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>timetuple<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：1552900590.0</span></code></pre><p>字符串 → datetime对象</p><pre class=" language-python"><code class="language-python">datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span><span class="token string">"2019-02-14 13:14:00"</span><span class="token punctuation">,</span> <span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：datetime.datetime(2019, 2, 14, 13, 14)</span></code></pre><p>datetime对象 → 字符串</p><pre class=" language-python"><code class="language-python">datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：'2019-03-18 17:26:44'</span></code></pre><p>时间元祖 → datetime对象</p><pre class=" language-python"><code class="language-python">datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span>time<span class="token punctuation">.</span>mktime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：datetime.datetime(2019, 3, 18, 17, 22, 13)</span></code></pre><p>datetime对象 → 时间元祖</p><pre class=" language-python"><code class="language-python">datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>timetuple<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：time.struct_time(tm_year=2019, tm_mon=3, tm_mday=18, tm_hour=17, tm_min=22, tm_sec=53, tm_wday=0, tm_yday=77, tm_isdst=-1)</span></code></pre><h2 id="四、datetime，data，time对象转换"><a href="#四、datetime，data，time对象转换" class="headerlink" title="四、datetime，data，time对象转换"></a><span style="font-size: 27px; color:#3498db;">四、datetime，data，time对象转换</span></h2><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetime<span class="token keyword">from</span> datetime <span class="token keyword">import</span> date<span class="token keyword">from</span> datetime <span class="token keyword">import</span> timedeltadatetime对象 → date对象datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 输出：datetime.date(2019, 3, 17)</span>datetime对象 → time对象datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：datetime.time(17, 33, 3, 833546)</span>date对象 <span class="token operator">+</span> time对象 → datetime对象t1 <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>date<span class="token punctuation">(</span><span class="token punctuation">)</span> t2 <span class="token operator">=</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>datetime<span class="token punctuation">.</span>combine<span class="token punctuation">(</span>t1<span class="token punctuation">,</span> t2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：datetime.datetime(2019, 3, 18, 17, 34, 7, 363993)</span>时间戳 → date对象date<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 输出：datetime.date(2019, 3, 17)</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 后端技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows下pip安装依赖报错</title>
      <link href="/blogs/pip-install-error-in-windows.html"/>
      <url>/blogs/pip-install-error-in-windows.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">Windows下pip安装依赖报错</div><blockquote><p>在Windows环境下，使用pip install命令安装某些包时，有时候会出现安装失败的情况。</p></blockquote><p>windows下执行 <code>pip install</code> 来安装pip的有些包经常会出错，<br>最常见的就是<span style="color: #FF0000;">lxml</span>和<span style="color: #FF0000;">mysqlclient</span>这类包。</p><p>解决方式：</p><ol><li><p>访问 <a href="https://www.lfd.uci.edu/~gohlke/pythonlibs/" rel="external nofollow noopener noreferrer" target="_blank">https://www.lfd.uci.edu/~gohlke/pythonlibs/</a> 这个网站，这是个Python包管理网站；</p></li><li><p>下载你需要的包，都是以<span style="color: #FF0000;">.whl</span>结尾的文件，一般是(包名)-(包版本号)-(py版本号)-(系统版本号).whl这样的文件命名；</p></li><li><p>进入下载的包目录，执行 <code>pip install xxx.whl</code> 命令进行安装即可。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Windows </tag>
            
            <tag> PyPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pip修改国内镜像源</title>
      <link href="/blogs/pip-change-mirror-source.html"/>
      <url>/blogs/pip-change-mirror-source.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">pip修改国内镜像源</div><blockquote><p>Windows和Linux下修改pip国内镜像源。</p></blockquote><h2 id="一、Windows环境"><a href="#一、Windows环境" class="headerlink" title="一、Windows环境"></a>一、Windows环境</h2><p>　　在windows文件管理器中,输入 <code>%APPDATA%</code><br>　　一般会跳转到这个目录：C:\Users\Administrator\AppData\Roaming，不同用户可能不一样<br>　　在该目录下创建一个文件夹命名为 <code>pip</code><br>　　在pip文件夹下新建文件 <code>pip.ini</code><br>　　写入如下内容：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>list<span class="token punctuation">]</span> format<span class="token operator">=</span>columns<span class="token punctuation">;</span> https://pypi.python.org/pypi 默认<span class="token punctuation">;</span> https://pypi.tuna.tsinghua.edu.cn/simple/  清华-教育网<span class="token punctuation">;</span> http://pypi.douban.com/simple/  豆瓣<span class="token punctuation">;</span> https://pypi.mirrors.ustc.edu.cn/simple/  中国科学技术大学<span class="token punctuation">[</span>global<span class="token punctuation">]</span>index-url <span class="token operator">=</span> http://mirrors.aliyun.com/pypi/simple/<span class="token punctuation">[</span>install<span class="token punctuation">]</span>trusted-host <span class="token operator">=</span> mirrors.aliyun.com</code></pre><h2 id="二、Linux环境"><a href="#二、Linux环境" class="headerlink" title="二、Linux环境"></a>二、Linux环境</h2><h3 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a><span style="font-size: 18px;">临时使用</span></h3><p>　　<code>pip install -i http://mirrors.aliyun.com/pypi/simple/ pyspider</code></p><h3 id="永久修改"><a href="#永久修改" class="headerlink" title="永久修改"></a><span style="font-size: 18px;">永久修改</span></h3><p>　　<code>vim /root/.pip/pip.conf</code> 换成如下内容：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">;</span> https://pypi.python.org/pypi 默认<span class="token punctuation">;</span> https://pypi.tuna.tsinghua.edu.cn/simple/  清华-教育网<span class="token punctuation">;</span> http://pypi.douban.com/simple/  豆瓣<span class="token punctuation">;</span> https://pypi.mirrors.ustc.edu.cn/simple/  中国科学技术大学<span class="token punctuation">[</span>global<span class="token punctuation">]</span>index-url <span class="token operator">=</span> http://mirrors.aliyun.com/pypi/simple/<span class="token punctuation">[</span>install<span class="token punctuation">]</span>trusted-host <span class="token operator">=</span> mirrors.aliyun.com</code></pre>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyPI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前后端分离优缺点</title>
      <link href="/blogs/advantages-of-decoupling-frontend-from-backend.html"/>
      <url>/blogs/advantages-of-decoupling-frontend-from-backend.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">前后端分离优缺点</div><blockquote><p>之前有朋友问我：什么是前后端分离。他说北度搜到的都是大篇幅文章，看完还是很懵。<br>这里我简单总结下，如果有疏漏和不对的地方还请路过的网友指出。</p></blockquote><h2 id="一、先用一张图来解释"><a href="#一、先用一张图来解释" class="headerlink" title="一、先用一张图来解释"></a><span style="font-size: 27px; color:#e74c3c;">一、先用一张图来解释</span></h2><p><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/what_is_frontend_and backend.jpg" alt="what_is_frontend_and backend.jpg"></p><h2 id="二、为什么要前后端分离（优点）"><a href="#二、为什么要前后端分离（优点）" class="headerlink" title="二、为什么要前后端分离（优点）"></a><span style="font-size: 27px; color:#e74c3c;">二、为什么要前后端分离（优点）</span></h2><h3 id="1-全端适应"><a href="#1-全端适应" class="headerlink" title="1. 全端适应"></a><span style="font-size: 18px; color: #3498db;">1. 全端适应</span></h3><p>　　PC、APP、PAD等。</p><h3 id="2-SPA开发模式开始流行"><a href="#2-SPA开发模式开始流行" class="headerlink" title="2. SPA开发模式开始流行"></a><span style="font-size: 18px; color: #3498db;">2. SPA开发模式开始流行</span></h3><p>　　SPA即Single Page Web Application，俗称单页应用。</p><h3 id="3-前后端开发职责不清"><a href="#3-前后端开发职责不清" class="headerlink" title="3. 前后端开发职责不清"></a><span style="font-size: 18px; color: #3498db;">3. 前后端开发职责不清</span></h3><p>　　比如JSP、PHP页面，到底是由前端写还是后端写 (所有的模板语言会遇到这样的问题)。</p><h3 id="4-开发效率问题，前后端互相等待"><a href="#4-开发效率问题，前后端互相等待" class="headerlink" title="4. 开发效率问题，前后端互相等待"></a><span style="font-size: 18px; color: #3498db;">4. 开发效率问题，前后端互相等待</span></h3><p>　　要把html转成template等，效率比较低。</p><h3 id="5-前端一直配合着后端，能力受限"><a href="#5-前端一直配合着后端，能力受限" class="headerlink" title="5. 前端一直配合着后端，能力受限"></a><span style="font-size: 18px; color: #3498db;">5. 前端一直配合着后端，能力受限</span></h3><p>　　很多交互逻辑要在template里面由后端实现，前端只负责提供静态html，对前端工程师的能力提高不利。</p><h3 id="6-后台开发语言和模板高度耦合，导致开发语言依赖严重"><a href="#6-后台开发语言和模板高度耦合，导致开发语言依赖严重" class="headerlink" title="6. 后台开发语言和模板高度耦合，导致开发语言依赖严重"></a><span style="font-size: 18px; color: #3498db;">6. 后台开发语言和模板高度耦合，导致开发语言依赖严重</span></h3><p>　　比如后端是Java写的，后期要换成Python，可是模板中嵌入了很多Java语法，等于要重写整个template。</p><h2 id="三、前后端分离缺点"><a href="#三、前后端分离缺点" class="headerlink" title="三、前后端分离缺点"></a><span style="font-size: 27px; color:#e74c3c;">三、前后端分离缺点</span></h2><h3 id="1-前端学习门槛增加、前端工作量加大"><a href="#1-前端学习门槛增加、前端工作量加大" class="headerlink" title="1. 前端学习门槛增加、前端工作量加大"></a><span style="font-size: 18px; color: #3498db;">1. 前端学习门槛增加、前端工作量加大</span></h3><p>　　前端需要实现一部分的交互逻辑。</p><h3 id="2-数据依赖导致文档重要性增加"><a href="#2-数据依赖导致文档重要性增加" class="headerlink" title="2. 数据依赖导致文档重要性增加"></a><span style="font-size: 18px; color: #3498db;">2. 数据依赖导致文档重要性增加</span></h3><p>　　接口文档需要很详细，且要及时更新。（一个段子，程序员最痛恨两件事：1.别人的代码没写文档，2.写文档）</p><h3 id="3-SEO难度加大"><a href="#3-SEO难度加大" class="headerlink" title="3. SEO难度加大"></a><span style="font-size: 18px; color: #3498db;">3. SEO难度加大</span></h3><p>　　前端渲染的页面不利于搜索引擎爬虫爬取，但有办法解决的，即SSR策略。(以vue为例可以参考这个链接：<a href="https://segmentfault.com/a/1190000007933349" rel="external nofollow noopener noreferrer" target="_blank">https://segmentfault.com/a/1190000007933349</a>)</p><h2 id="四、综上"><a href="#四、综上" class="headerlink" title="四、综上"></a><span style="font-size: 27px; color:#e74c3c;">四、综上</span></h2><h3 id="1-一种趋势"><a href="#1-一种趋势" class="headerlink" title="1. 一种趋势"></a><span style="font-size: 18px; color: #3498db;">1. 一种趋势</span></h3><p>　　前后端分离有一些缺点，但都是可以想办法解决的，总的来说优点大于缺点，而且也是一种趋势。</p><h3 id="2-不过在一些场合其实也没有必要前后端分离"><a href="#2-不过在一些场合其实也没有必要前后端分离" class="headerlink" title="2. 不过在一些场合其实也没有必要前后端分离"></a><span style="font-size: 18px; color: #3498db;">2. 不过在一些场合其实也没有必要前后端分离</span></h3><p>　　比如写个人网站、内部小运维系统等。这些一般情况下都是一个人完成的，如果前后端分离写，就有frontend和backend两套代码要写，打开两个IDE，颇有左右手互搏的感觉。<br>　　当然如果为了练习和学习，写个这样的博客系统也是不错的。</p><h2 id="五、补充知识点-restful-api"><a href="#五、补充知识点-restful-api" class="headerlink" title="五、补充知识点 - restful api"></a><span style="font-size: 27px; color:#e74c3c;">五、补充知识点 - restful api</span></h2><h3 id="restful-api目前是前后端分离最佳实现"><a href="#restful-api目前是前后端分离最佳实现" class="headerlink" title="restful api目前是前后端分离最佳实现"></a><span style="font-size: 18px; color: #3498db;">restful api目前是前后端分离最佳实现</span></h3><ol><li>restful api是一种规范，作为开发时的标准</li><li>轻量，直接通过http。不需要额外的协议，post/get/put/delete操作</li><li>面向资源，一目了然，具有自解释性。比如看请求头delete就知道是删除动作。</li><li>数据描述简单，一般通过json或者xml做数据通信</li><li>更多细节的可以看阮一峰的一篇文章：<a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" rel="external nofollow noopener noreferrer" target="_blank">http://www.ruanyifeng.com/blog/2011/09/restful.html</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 基础知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费在线邮箱和短信平台</title>
      <link href="/blogs/online-email-and-sms-platforms.html"/>
      <url>/blogs/online-email-and-sms-platforms.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">免费在线邮箱和短信平台</div><blockquote><p>现在很多网站想要浏览或者下载资源都要注册账号，且需要绑定邮箱和手机号。<br>有的网站我们只用到一次，但绑定了邮箱和手机后就频频收到垃圾推送，无法取消订阅更无法销户。<br>因此我整理了一些国内外免费接收邮件和短信验证码的平台，注册某些网站的时候可以临时用一下。<br>重要申明：以下内容整理自网络，仅供学习交流，请勿用于非法用途，重要网站不要用这个注册，否则后果自负！！！</p></blockquote><h2 id="一、在线临时邮箱"><a href="#一、在线临时邮箱" class="headerlink" title="一、在线临时邮箱"></a><span style="font-size: 27px; color:#e74c3c;">一、在线临时邮箱</span></h2><pre class=" language-bash"><code class="language-bash">http://24mail.chacuo.net/https://bccto.me/http://www.yopmail.com/zh/https://www.linshiyouxiang.net/https://10minutemail.net/</code></pre><h2 id="二、在线临时短信"><a href="#二、在线临时短信" class="headerlink" title="二、在线临时短信"></a><span style="font-size: 27px; color:#e74c3c;">二、在线临时短信</span></h2><pre class=" language-bash"><code class="language-bash">国外Receive SMS Online <span class="token keyword">for</span> FREE：https://www.receive-sms-online.info/Receive a SMS Online：https://receive-a-sms.com/Free SMS Numbers Online：https://smsnumbersonline.com/Receive SMS online <span class="token keyword">for</span> Free：https://sms-online.co/receive-free-smsReceive-SMS：https://receive-sms.com/Receive FREE SMS online：http://receivefreesms.com/RECEIVE SMS ONLINE：https://www.receivesmsonline.net/Free Online Phone：https://www.freeonlinephone.org/Receive SMS Online：http://receive-sms-online.com/TextNow：https://www.textnow.com/Textfree：https://www.pinger.com/text-free/SELLAITE：http://sms.sellaite.com/Twilio：https://www.twilio.com/------------------------------------------------------------------------------------------------------------国内pdflibr：https://www.pdflibr.com/速码：www.z-sms.com</code></pre><div style="text-align: center;">再次申明：以上内容整理自网络，仅供学习交流，请勿用于非法用途，重要网站不要用这个注册，否则后果自负！！！</div>]]></content>
      
      
      <categories>
          
          <category> 资源整理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git提交信息规范</title>
      <link href="/blogs/git-commit-message.html"/>
      <url>/blogs/git-commit-message.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">Git提交信息规范</div><blockquote><p>无论是个人项目还是在团队协作中，commit message 都应该清晰明了，遵守一定规范。<br>目前，社区有多种 commit message 的写法规范。本文介绍 Angular规范，这是目前使用最广的写法，比较合理和系统化，并且有配套的工具。</p></blockquote><h2 id="一、格式化commit-message的目的"><a href="#一、格式化commit-message的目的" class="headerlink" title="一、格式化commit message的目的"></a>一、格式化commit message的目的</h2><ul><li>提供更多的历史信息，方便快速浏览。</li><li>可以过滤某些commit（比如文档改动），便于快速查找信息。</li><li>可以直接从commit生成Change log。</li></ul><h2 id="二、commit-message-的格式"><a href="#二、commit-message-的格式" class="headerlink" title="二、commit message 的格式"></a>二、commit message 的格式</h2><p>　　每次提交，commit message 都包括三个部分：Header，Body 和 Footer。</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&lt;</span>type<span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">&lt;</span>scope<span class="token operator">></span><span class="token punctuation">)</span>: <span class="token operator">&lt;</span>subject<span class="token operator">></span> <span class="token comment" spellcheck="true"># header</span><span class="token comment" spellcheck="true"># 空一行</span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token comment" spellcheck="true"># 空一行</span><span class="token operator">&lt;</span>footer<span class="token operator">></span> </code></pre><p>　　其中，<span style="color: #FF0000;">Header 是必需的</span>，Body 和 Footer 可以省略。<br>　　不管是哪一个部分，任何一行都不得超过72个字符（或100个字符）。这是为了避免自动换行影响美观。</p><h3 id="2-1-Header"><a href="#2-1-Header" class="headerlink" title="2.1 Header"></a><span style="font-size: 18px;">2.1 Header</span></h3><p>　　Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。<br><span style="font-size: 18px;"><strong> (1) type </strong></span><br>　　type用于说明 commit 的类别，只允许使用下面7个标识：</p><ul><li><code>feat</code>：新功能（feature）</li><li><code>fix</code>：修补bug</li><li><code>docs</code>：文档（documentation）</li><li><code>style</code>：格式（不影响代码运行的变动）</li><li><code>refactor</code>：重构（即不是新增功能，也不是修改bug的代码变动）</li><li><code>test</code>：增加测试</li><li><code>chore</code>：构建过程或辅助工具的变动</li></ul><p>　　如果type为feat和fix，则该 commit 将肯定出现在 Change log 之中。其他情况（docs、chore、style、refactor、test）由你决定，要不要放入 Change log，建议是不要。</p><p><span style="font-size: 18px;"><strong> (2) scope </strong></span><br>　　用于说明 commit 影响的范围，比如数据层、控制层、视图层等等，视项目不同而不同。</p><p><span style="font-size: 18px;"><strong> (3) subject </strong></span><br>　　subject是 commit 目的的简短描述，不超过50个字符。</p><ul><li>以动词开头，使用第一人称现在时，比如 change，而不是 changed 或 changes。</li><li>第一个字母小写。</li><li>结尾不加句号（.）。</li></ul><h3 id="2-2-Body"><a href="#2-2-Body" class="headerlink" title="2.2 Body"></a><span style="font-size: 18px;">2.2 Body</span></h3><p>　　用于对本次 commit 的详细描述，可以分成多行。下面是一个范例：</p><pre class=" language-bash"><code class="language-bash">More detailed explanatory text, <span class="token keyword">if</span> necessary.  Wrap it to about 72 characters or so. Further paragraphs come after blank lines.- Bullet points are okay, too- Use a hanging indent</code></pre><p>　　有两个注意点。<br>　　(1) 使用第一人称现在时，比如使用 change 而不是 changed 或 changes。<br>　　(2) 应该说明代码变动的动机，以及与以前行为的对比。</p><h3 id="2-3-Footer"><a href="#2-3-Footer" class="headerlink" title="2.3 Footer"></a><span style="font-size: 18px;">2.3 Footer</span></h3><p>　　Footer 部分只用于两种情况。</p><p><span style="font-size: 18px;"><strong> (1) 不兼容变动 </strong></span><br>　　如果当前代码与上一个版本不兼容，则 Footer 部分以 <code>BREAKING CHANGE</code> 开头，后面是对变动的描述、以及变动理由和迁移方法。</p><pre class=" language-bash"><code class="language-bash">BREAKING CHANGE: isolate scope bindings definition has changed.To migrate the code follow the example below:Before:scope: <span class="token punctuation">{</span>  myAttr: <span class="token string">'attribute'</span>,<span class="token punctuation">}</span>After:scope: <span class="token punctuation">{</span>  myAttr: <span class="token string">'@'</span>,<span class="token punctuation">}</span>The removed <span class="token variable"><span class="token variable">`</span>inject<span class="token variable">`</span></span> wasn't generaly useful <span class="token keyword">for</span> directives so there should be no code using it.</code></pre><p><span style="font-size: 18px;"><strong> (2) 关闭 Issue </strong></span><br>　　如果当前 commit 针对某个issue，那么可以在 Footer 部分关闭这个 issue 。</p><pre class=" language-bash"><code class="language-bash">Closes <span class="token comment" spellcheck="true">#234</span></code></pre><p>　　也可以一次关闭多个 issue 。</p><pre class=" language-bash"><code class="language-bash">Closes <span class="token comment" spellcheck="true">#123, #245, #992</span></code></pre><h3 id="2-4-Revert（可忽视）"><a href="#2-4-Revert（可忽视）" class="headerlink" title="2.4 Revert（可忽视）"></a><span style="font-size: 18px;">2.4 Revert（可忽视）</span></h3><p>　　还有一种特殊情况，如果当前 commit 用于撤销以前的 commit，则必须以 <code>revert:</code> 开头，后面跟着被撤销 Commit 的 Header。</p><pre class=" language-bash"><code class="language-bash">revert: feat<span class="token punctuation">(</span>pencil<span class="token punctuation">)</span>: add <span class="token string">'graphiteWidth'</span> optionThis reverts commit 667ecc1654a317a13331b17617d973392f415f02.</code></pre><p>　　Body部分的格式是固定的，必须写成 <code>This reverts commit &lt;hash&gt;.</code>，其中的 hash 是被撤销 commit 的 SHA 标识符。</p><p>　　如果当前 commit 与被撤销的 commit，在同一个发布（release）里面，那么它们都不会出现在 Change log 里面。如果两者在不同的发布，那么当前 commit，会出现在 Change log 的Reverts小标题下面。</p><h2 id="三、提交频率"><a href="#三、提交频率" class="headerlink" title="三、提交频率"></a>三、提交频率</h2><p>　　关于什么时候提交一次：<br>　　每次你写完一个功能的时候，就应该做一次提交（这个提交是提交到本地的git库中）。<br>　　当然，这里的写完表示的是你的这个功能是没有问题的。</p><h2 id="四、Angular规范"><a href="#四、Angular规范" class="headerlink" title="四、Angular规范"></a>四、Angular规范</h2><p>　　<a href="https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit#heading=h.greljkmo14y0" rel="external nofollow noopener noreferrer" target="_blank">Angular规范</a>见上图：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/git_commit_message_angular.png" alt="Angular规范"></p><h2 id="附：团队协作风格指南"><a href="#附：团队协作风格指南" class="headerlink" title="附：团队协作风格指南"></a>附：团队协作风格指南</h2><p>　　在团队协作中，不管有多少人共同参与同一项目，我们期望每一行代码都像是同一个人编写的。因此需要永远遵循同一套编码规范。<br>　　我基于国内大厂规范，整理了一套<span class="series"><a href="https://github.com/winyuan/style-guide" title="团队协作风格指南" rel="external nofollow noopener noreferrer" target="_blank">《团队协作风格指南》</a></span>，仅供参考。</p><p class="reference"><br>整理自<a href="http://www.ruanyifeng.com/blog/2016/01/commit_message_change_log.html" rel="external nofollow noopener noreferrer" target="_blank">《Commit message 和 Change log 编写指南》-阮一峰</a><br>参考<a href="https://segmentfault.com/a/1190000004282514" rel="external nofollow noopener noreferrer" target="_blank">［译］AngularJS Git提交信息规范</a><br></p><style type="text/css">    .series a {        text-decoration:none !important;    }</style>]]></content>
      
      
      <categories>
          
          <category> 开发环境 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>群里提问的艺术</title>
      <link href="/blogs/how-to-ask-questions-correctly.html"/>
      <url>/blogs/how-to-ask-questions-correctly.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">群里提问的艺术</div><blockquote><p>在技术交流群里，只有正确地提问，才能最有效地得到期望的答案。<br>提问，是一门艺术。</p></blockquote><p>　　平时网上冲浪，经常会看到有人在，xxx 交流群 / xxx 技术交流群 / xxx 学习交流群 里问问题，然而总是得不到想要的答案，最后无奈地吐槽完一句后默默离开。</p><p>　　其实这种问题地频繁出现，最终会让好端端的技术群成为车友群。之所以有这样的现象，跟提问者不会提问有很大的关系。</p><p>　　下面就 <span style="color: #FF0000;">如何正确地提问</span> 分成以下三部分进行介绍：</p><ul><li>提问之前</li><li>提问之时，怎么提问注意事项</li><li>提问之后</li></ul><h2 id="一、提问之前"><a href="#一、提问之前" class="headerlink" title="一、提问之前"></a>一、提问之前</h2><p>　　<span style="color: #FF0000;">遇到问题首先你得尝试自己解决自己的问题。</span><br>　　我相信很多群里都有这样的幽默公告：本群已和谷歌，百度，360，搜狗，必应等搜索引擎公司达成战略合作，有什么疑问可以先咨询他们，不用在群里问了。<br>　　尝试自己解决是非常重要的一步，这也是我们能否经过这个问题能够成长的关键所在。自己动手丰衣足食，这是亘古不变的道理，遇到难题也是如此，自己不首先动动脑子，只知道一个劲的问“为什么”“怎么做”，到头来，即使你解决了问题，你也没有学到解决的思路和方法。</p><p>　　那么如何自己尝试着解决呢？<span style="color: #FF0000;">按下面的步骤走一遍：</span><br>　　1. <strong>通过搜索引擎搜索</strong>：Baidu 或者 Google（推荐），搜索结果中前三页如果找不到你想要的信息，就进行下一步吧。对于成熟的开源项目，你遇到的问题，很可能别人也遇到过。这时通过 Google、StackOverflow 等网站的搜索服务，可以帮你快速定位并解决问题。永远记住，地球上的你并不孤单，包括你遇到的问题。<br>　　2. <strong>查阅手册/文档</strong>：确保自己阅读过至少一次官方文档。这样在遇到问题时，如果能回忆起只言片语，就可以再去读一遍相关文档，问题往往也就解决了。<br>　　3. <strong>查阅社区/论坛</strong>：阅读常见问题文件（FAQ）或者开源项目的 issue，或者论坛（类似 react china）。<br>　　4. <strong>询问朋友</strong>：如果你使用的开源软件，在朋友圈或同事圈里也有人使用，那么抬起你的脚、或拿起你的电话，真挚诚恳的探讨不会遭遇拒绝，而会增进友谊。相信我，同样是请教别人，有时候寻求身边看得见摸得着的人，会远比寻求网络上的水友更有效。当然，如果你是妹子，恰好群里的单身狗们闲着没事干就另当别论了。<br>　　5. <strong>自检并不断测试</strong>：反复尝试自己检查以找到答案。<br>　　6. <strong>阅读源码（这步非必须）</strong>：如果你是程序开发者，尽量尝试阅读源码以找到答案，有的第三方库文档漏写的东西，在源码的注释中会体现，实在不行还能直接看相应的函数（方法）。</p><p>　　经过以上 6 步或者 5 步你都无法解决遇到的问题，那么你确实针对这个问题能力有限，准备去群里请教了，那么在尝试自己解决之后无果，应该做哪些准备呢？<br>　　<span style="color: #FF0000;">你一定要准备好下面这些才能去群里提问。</span><br>　　1. 一定要明白自己想要问什么问题：不能自己都说不清自己想要问什么问题，那么群里提问你也问不出什么来。<br>　　2. 请梳理好您的问题：要说明之前你都干了些什么。<br>　　3. 要用言简意赅的语言：这个是我们作为职场一个必备的技能，说重点，言简意赅。</p><h2 id="二、怎么提问"><a href="#二、怎么提问" class="headerlink" title="二、怎么提问"></a>二、怎么提问</h2><p>　　抱着平和对等的心态，找到合适的途径后，就得静下心来将遇到的问题写成文字。书写文字不是一件简单的事情，我们可以从遵循一些简单的规则开始。<br>　　<span style="color: #FF0000;">用词准确，问题明确。</span><br>　　标题要简洁清晰，要言之有物。</p><blockquote><p>反例：有人会用Vue吗？<br>正例：在使用 xxx 版本的 Vue ，我操作了 xxx，也写了 xxx，但是 xxx 组件渲染不出来。</p></blockquote><p>　　一个好标题范例是<code>目标 —— 差异</code>式的描述，许多技术支持组织就是这样做的。在<code>目标</code>部分指出是哪一个或哪一组东西有问题，在<code>差异</code>部分则描述与期望的行为不一致的地方。</p><p>　　<span style="color: #FF0000;">描述清晰，信息充足。</span><br>　　1. <strong>准确有效的信息</strong>：描述事实，而不是猜测，如果你想给出你的猜测，一定要先描述事实，给你的猜测一些证据，不然就不要猜测。<br>　　2. <strong>问题表现/内容</strong>：按照时间顺序列出问题症状。问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。<br>　　3. <strong>简单的做过什么尝试</strong>：在描述你做过什么尝试的时候，简单的你描述你做了哪些尝试就行，为什么要这么做其实不是那么重要。</p><p>　　如果你想弄清楚如何做某事（而不是报告一个Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。</p><p>　　经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。</p><p>　　玉伯有句话是这么说的：</p><blockquote><p>提问者选择的路本身就是一条崎岖之路，对于要解决的问题，实际上有更好的方式。这种情况下，描述清楚目标，讲清楚要干什么非常重要。</p></blockquote><p>　　1. <strong>想要问到什么</strong>：提供建议？发送一段代码？检查你的补丁或者别的？在群里经常会出现这种情况，当某个人发了一段文字，另外的人说：你想问什么？</p><p>　　所以我们在问问题的时候一定要把你想要问到什么，这个目标想清楚。</p><p>　　1. <strong>提供尽量多的信息</strong>：尽量提供可重现的例子，你可以在 <a href="http://www.jsbin.com" rel="external nofollow noopener noreferrer" target="_blank">jsbin</a>、<a href="https://runjs.cn/" rel="external nofollow noopener noreferrer" target="_blank">runjs</a>、<a href="http://www.jsfiddle.net/" rel="external nofollow noopener noreferrer" target="_blank">jsfiddle</a>、<a href="http://codepen.io/" rel="external nofollow noopener noreferrer" target="_blank">codepen</a> 等这些地方提供一个可重现的例子。即使你是一个很大的项目，想办法把你需要验证的点提取出来，如果确实无法提取，就贴一些代码，出现问题那行代码周围的代码（周围的相关代码都要，因为你可能觉得不是他们的问题，但也许就是，不然你觉得的都是对的，你就不会不知道怎么解决了）。</p><p>　　<span style="color: #FF0000;">避免一些毫无意义的问题。</span><br>　　经常会有人问一些毫无意义的问题，比如这样的：</p><blockquote><p>反例：有没有人会xxx？<br>反例：有没有人在？<br>反例：谁能帮我解决一个问题？</p></blockquote><p>　　面对这种问题，别人就很难预估你这个问题需要解决多久，也很难判断自己是否能解决这个问题，如果他回答了你，意味着他就是有空而且很在行，所以他还是选择不出声。这个就跟微信私聊的时候说：”在吗？“ 这种一个意思。</p><blockquote><p>反例：ES6是什么？</p></blockquote><p>　　这种问题也是，很明显通过搜索引擎就能搞定的，要是下次还有这种问题，你就把这个图发给它。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/niao_ge_yu_lu.jpg" alt="鸟哥语录"></p><p>　　<span style="color: #FF0000;">建议的问法。</span><br>　　1. 有问题直接问。比如：vue2.0什么时候出，bootstrap表格插件有什么推荐的？<br>　　2. 直接说场景：我在做xx端东西的时候，在 window 7 平台的 IE7 版本下遇到了左右不对齐问题，具体如图所示img，代码地址：<code>http://www.jsbin.com/xxxx</code>，在百度中找到的答案，试了之后还是有同样的问题。请有空的同学帮我看看是什么问题？</p><h2 id="三、提问之后"><a href="#三、提问之后" class="headerlink" title="三、提问之后"></a>三、提问之后</h2><p>　　1. 如果有人花时间帮你理清了思路、解决了问题，记得表示下感谢。不强迫说一定要发个红包道谢，但如果一个群里能养成解决问题后发红包的风气，那也是很正能量的。<br>　　2. 无论问题有没有在群里得到解决，都要对参与讨论的人说声”谢谢你的建议，我再看看。“<br>　　3. 经常主动帮别人解决问题，你在群里自然就混了个眼熟，那么当你遇到问题的时候，别人也会乐意读完你的提问。能不能替你解决是另一码事。</p><h2 id="四、心态放平"><a href="#四、心态放平" class="headerlink" title="四、心态放平"></a>四、心态放平</h2><ul><li>提前做好冷场的准备：也许别人在忙，也许这个问题太简单了，也许没人做过这块，如果冷场了，没人回答，赶紧换下一个群。</li><li>谦虚，别人没有义务帮你解决问题，往往大牛的时间比你少，比你珍贵。</li><li>没有一定的自学能力，遇到问题就伸手的不适合玩这个。</li><li>群唯一的作用就是：扯淡、交流、分享，以上几条为前提。</li></ul><p>　　其实根据我的经验，<strong>选型问题</strong> 和 <strong>求资源/求推荐</strong> 这类问题在群里得到的反响比较多。真正遇到难点的技术问题，尤其还是跟业务紧密耦合的，还是要养成自己摸索解决的习惯。</p><h2 id="五、懒人必看"><a href="#五、懒人必看" class="headerlink" title="五、懒人必看"></a>五、懒人必看</h2><p>　　最后，如果嫌上文太长懒得看，收藏一下这个图吧：<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/how_to_ask_questions_correctly.png" alt="群里提问的艺术"></p><div style="text-align: center;"><a href="/medias/blogimages/how_to_ask_questions_correctly.png" title="群里提问的艺术">点击下载原图</a></div>]]></content>
      
      
      <categories>
          
          <category> 诗和远方 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/blogs/hello-world.html"/>
      <url>/blogs/hello-world.html</url>
      
        <content type="html"><![CDATA[<div style="text-align: center; font-size: 32px;">第一篇博客</div><blockquote><p>这是改版后的博客，暂且称为wenyuanblog_v2.0吧。回顾下1.0版本的个人博客。</p></blockquote><h2 id="技术组成"><a href="#技术组成" class="headerlink" title="技术组成"></a>技术组成</h2><p>前端组件：bootstrap，bootstrap-table，layer，CKEditor，一些charts.js等<br>后端架构：Python，Django，MySQL<br>服务器：nginx，uwsgi，supervisor</p><h2 id="效果概览"><a href="#效果概览" class="headerlink" title="效果概览"></a>效果概览</h2><ul><li><h5 id="博客首页"><a href="#博客首页" class="headerlink" title="博客首页"></a>博客首页</h5><p>　　左边是博客列表，右边是标签云和博客分类。搜索框可进行模糊搜索，本人比较屌丝，购买的是配置最差的那种服务器，所以未使用Lucene或Elasticsearch，而是直接对关系型数据库中的内容进行匹配查找。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/blog_index_page.png" alt="blog_index_page.png"></p></li><li><h5 id="作品展示页"><a href="#作品展示页" class="headerlink" title="作品展示页"></a>作品展示页</h5><p>　　贴了几个开源小项目，在我的GitHub上都能找到。<br>　　这里可通过点击每个卡片上悬浮的按钮选择预览效果页或者复制GitHub地址。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/blog_show_page.png" alt="blog_show_page.png"></p></li><li><h5 id="后台登录页面"><a href="#后台登录页面" class="headerlink" title="后台登录页面"></a>后台登录页面</h5><p>　　进入CMS（内容管理）系统的入口，这里我自己写了一套，没用Django自带的admin或者第三方xadmin。主要还是颜值，也喜欢自己折腾一下。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/blog_login_page.png" alt="blog_login_page.png"></p></li><li><h5 id="后台首页"><a href="#后台首页" class="headerlink" title="后台首页"></a>后台首页</h5><p>　　和大部分CMS（内容管理）的主页一样，以图表形式展示一些概览信息。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/blog_cms_page.png" alt="blog_cms_page.png"></p></li><li><h5 id="新增文章页"><a href="#新增文章页" class="headerlink" title="新增文章页"></a>新增文章页</h5><p>　　新增和编辑文章页，除了传统表单，还有缩略图上传和富文本编辑器功能。<br>　　因为用的是bootstrap，原生组件对于缩略图上传后的页面回显功能，没有layUI和elementUI提供的那么好，所以自己定制了一下。<br>　　富文本编辑器用的是<span style="color: #FF0000;">CKEditor</span>，用过UEditor，觉得还是CK颜值高一些，也比wangEditor出名些。<br>　　Django生态圈似乎有人基于Django封装过富文本编辑器，可以直接以app的形式引入，不过我还是采用了原生的方式，自己实现下其实也不麻烦。<br>　　最后存了两份信息，一份带html标签的用于页面显示，一份纯文本用于搜索。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/blog_add_page.png" alt="blog_add_page.png"></p></li><li><h5 id="文章列表页"><a href="#文章列表页" class="headerlink" title="文章列表页"></a>文章列表页</h5><p>　　对比jQuery DataTables，感觉wenzhixin封装的bootstrap-table颜值挺高的，也很好用（jQuery DataTables很强大，但毕竟难用，我以html单文件的形式整理过几个demo，<a href="https://github.com/winyuan/datatables_demos" title="DataTables Demos" rel="external nofollow noopener noreferrer" target="_blank">点击查看</a>）。<br>　　不过最后发现首列的多选框很难看，参照GitHub上作者对某issue的回复，我做了修改，最后效果如下图。个人觉得现在好看多了。<br><img src="/medias/blogimages/loading.gif" data-original="/medias/blogimages/blog_list_page.png" alt="blog_list_page.png"></p></li></ul><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p>　　第一版的博客花了点精力，主要是后端和CMS页面尽可能做成通用，这样以后好复制。顺便把用户注册和邮箱验证那一套也一起做了（虽然是个人博客，但先按多用户的模式起了个头）。<br>　　然后我比较喜欢折腾，所以又搞了第二版。</p>]]></content>
      
      
      <categories>
          
          <category> 诗和远方 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
